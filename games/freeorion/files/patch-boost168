https://github.com/freeorion/freeorion/pull/2241

--- GG/src/GUI.cpp.orig	2018-06-14 14:12:09 UTC
+++ GG/src/GUI.cpp
@@ -37,14 +37,19 @@
 #include <GG/ZList.h>
 
 #if GG_HAVE_LIBPNG
-# if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 7)
-#  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wunused-local-typedefs"
+# if BOOST_VERSION < 106800
+#  if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 7)
+#   pragma GCC diagnostic push
+#   pragma GCC diagnostic ignored "-Wunused-local-typedefs"
+#  endif
+#  include "gilext/io/png_io.hpp"
+#  include "gilext/io/png_io_v2_compat.hpp"
+#  if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 7)
+#   pragma GCC diagnostic pop
+#  endif
+# else
+#  include <boost/gil/extension/io/png.hpp>
 # endif
-# include "gilext/io/png_io.hpp"
-# if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 7)
-#  pragma GCC diagnostic pop
-# endif
 #endif
 
 #include <boost/algorithm/string/predicate.hpp>
@@ -132,12 +137,15 @@ namespace {
         glPopClientAttrib();
 
         using namespace boost::gil;
-        png_write_view(filename,
-                       flipped_up_down_view(
-                           interleaved_view(Value(size.x),
-                                            Value(size.y),
-                                            static_cast<rgba8_pixel_t*>(static_cast<void*>(&bytes[0])),
-                                            Value(size.x) * sizeof(rgba8_pixel_t))));
+        write_view(
+            filename,
+            flipped_up_down_view(
+                interleaved_view(
+                    Value(size.x),
+                    Value(size.y),
+                    static_cast<rgba8_pixel_t*>(static_cast<void*>(&bytes[0])),
+                    Value(size.x) * sizeof(rgba8_pixel_t))),
+            png_tag());
 #endif
     }
 }
--- GG/src/Texture.cpp.orig	2018-06-14 14:12:09 UTC
+++ GG/src/Texture.cpp
@@ -36,7 +36,12 @@
 #include <boost/algorithm/string/case_conv.hpp>
 
 #if GG_HAVE_LIBPNG
-# include "gilext/io/png_dynamic_io.hpp"
+# if BOOST_VERSION < 106800
+#  include "gilext/io/png_dynamic_io.hpp"
+#  include "gilext/io/png_io_v2_compat.hpp"
+# else
+#  include <boost/gil/extension/io/png.hpp>
+# endif
 #endif
 
 #include <iostream>
@@ -241,12 +246,12 @@ void Texture::Load(const boost::filesystem::path& path
         // formats above.
 #if GG_HAVE_LIBPNG
         if (extension == ".png")
-            gil::png_read_image(path, image);
+            gil::read_image(filename, image, gil::image_read_settings<gil::png_tag>());
         else
 #endif
 #if GG_HAVE_LIBTIFF
         if (extension == ".tif" || extension == ".tiff")
-            gil::tiff_read_image(filename, image);
+            gil::read_image(filename, image, gil::image_read_settings<gil::tiff_tag>());
         else
 #endif
             throw BadFile("Texture file \"" + filename + "\" does not have a supported file extension");
@@ -256,14 +261,14 @@ void Texture::Load(const boost::filesystem::path& path
 #if GG_HAVE_LIBPNG
         if (extension == ".png") {
             gil::rgba8_image_t rgba_image;
-            gil::png_read_and_convert_image(path, rgba_image);
+            gil::read_and_convert_image(filename, rgba_image, gil::image_read_settings<gil::png_tag>());
             image.move_in(rgba_image);
         }
 #endif
 #if GG_HAVE_LIBTIFF
         if (extension == ".tif" || extension == ".tiff") {
             gil::rgba8_image_t rgba_image;
-            gil::tiff_read_and_convert_image(filename, rgba_image);
+            gil::read_and_convert_image(filename, rgba_image, gil::image_read_settings<gil::tiff_tag>());
             image.move_in(rgba_image);
         }
 #endif
--- GG/src/gilext/io/png_io_v2_compat.hpp.orig	2018-07-20 13:44:48 UTC
+++ GG/src/gilext/io/png_io_v2_compat.hpp
@@ -0,0 +1,45 @@
+#ifndef GILEXT_PNG_IO_V2_COMPAT_H
+#define GILEXT_PNG_IO_V2_COMPAT_H
+
+namespace boost { namespace gil {
+
+struct png_tag {};
+
+template< typename Tag>
+struct image_read_settings {};
+
+template< typename String
+        , typename Image
+        , typename FormatTag
+        >
+inline
+void read_image( const String&    file_name
+               , Image&           image
+               , const FormatTag& tag
+               )
+{ boost::gil::png_read_image(file_name, image); }
+
+template< typename String
+        , typename Image
+        , typename FormatTag
+        >
+inline
+void read_and_convert_image( const String&    file_name
+                           , Image&           image
+                           , const FormatTag& tag
+                           )
+{ boost::gil::png_read_and_convert_image(file_name, image); }
+} }
+
+template< typename String
+        , typename View
+        , typename FormatTag
+        >
+inline
+void write_view( const String&    file_name
+               , const View&      view
+               , const FormatTag& tag
+               )
+{ boost::gil::png_write_view( file_name, view); }
+
+#endif
