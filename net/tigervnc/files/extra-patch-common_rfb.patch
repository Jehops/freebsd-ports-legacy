
--- common/rfb/CConnection.cxx	2011-11-15 00:44:11.000000000 +0900
+++ common/rfb/CConnection.cxx	2013-05-27 19:09:50.167574000 +0900
@@ -100,7 +100,7 @@
     char msg[256];
     sprintf(msg,"Server gave unsupported RFB protocol version %d.%d",
             cp.majorVersion, cp.minorVersion);
-    vlog.error(msg);
+    vlog.error("%s", msg);
     state_ = RFBSTATE_INVALID;
     throw Exception(msg);
   } else if (useProtocol3_3 || cp.beforeVersion(3,7)) {

--- common/rfb/CMsgReader.cxx	2010-02-10 16:43:02.000000000 +0900
+++ common/rfb/CMsgReader.cxx	2013-05-27 19:09:50.274574000 +0900
@@ -100,7 +100,7 @@
     readCopyRect(r);
   } else {
 
-    if (encoding > encodingMax) {
+    if (!Decoder::supported(encoding)) {
       fprintf(stderr, "Unknown rect encoding %d\n", encoding);
       throw Exception("Unknown rect encoding");
     }

--- common/rfb/CSecurityTLS.cxx	2011-05-10 17:54:57.000000000 +0900
+++ common/rfb/CSecurityTLS.cxx	2013-05-27 19:09:50.329576000 +0900
@@ -72,7 +72,7 @@
 
 static void debug_log(int level, const char* str)
 {
-  vlog_raw.debug(str);
+  vlog_raw.debug("[%d]: %s", level, str);
 }
 
 void CSecurityTLS::initGlobal()
@@ -188,20 +188,20 @@
       throw AuthFailureException("gnutls_set_default_priority failed");
 
     setParam();
-    
-    gnutls_transport_set_pull_function(session, rdr::gnutls_InStream_pull);
-    gnutls_transport_set_push_function(session, rdr::gnutls_OutStream_push);
-    gnutls_transport_set_ptr2(session,
-			      (gnutls_transport_ptr) is,
-			      (gnutls_transport_ptr) os);
   }
 
+  rdr::TLSInStream *tlsis = new rdr::TLSInStream(is, session);
+  rdr::TLSOutStream *tlsos = new rdr::TLSOutStream(os, session);
+
   int err;
   err = gnutls_handshake(session);
-  if (err != GNUTLS_E_SUCCESS && !gnutls_error_is_fatal(err))
-    return false;
-
   if (err != GNUTLS_E_SUCCESS) {
+    delete tlsis;
+    delete tlsos;
+
+    if (!gnutls_error_is_fatal(err))
+      return false;
+
     vlog.error("TLS Handshake failed: %s\n", gnutls_strerror (err));
     shutdown(false);
     throw AuthFailureException("TLS Handshake failed");
@@ -209,8 +209,7 @@
 
   checkSession();
 
-  cc->setStreams(fis = new rdr::TLSInStream(is, session),
-		 fos = new rdr::TLSOutStream(os, session));
+  cc->setStreams(fis = tlsis, fos = tlsos);
 
   return true;
 }

--- common/rfb/Decoder.cxx	2010-02-10 16:43:02.000000000 +0900
+++ common/rfb/Decoder.cxx	2013-05-27 19:09:50.186575000 +0900
@@ -34,12 +34,12 @@
 
 bool Decoder::supported(int encoding)
 {
-  return encoding <= encodingMax && createFns[encoding];
+  return encoding >= 0 && encoding <= encodingMax && createFns[encoding];
 }
 
 Decoder* Decoder::createDecoder(int encoding, CMsgReader* reader)
 {
-  if (encoding <= encodingMax && createFns[encoding])
+  if (supported(encoding))
     return (*createFns[encoding])(reader);
   return 0;
 }

--- common/rfb/LogWriter.h	2011-02-18 19:54:11.000000000 +0900
+++ common/rfb/LogWriter.h	2013-05-27 19:09:50.170575000 +0900
@@ -25,12 +25,18 @@
 #include <rfb/Logger.h>
 #include <rfb/Configuration.h>
 
+#ifdef __GNUC__
+#  define __printf_attr(a, b) __attribute__((__format__ (__printf__, a, b)))
+#else
+#  define __printf_attr(a, b)
+#endif // __GNUC__
+
 // Each log writer instance has a unique textual name,
 // and is attached to a particular Log instance and
 // is assigned a particular log level.
 
 #define DEF_LOGFUNCTION(name, level) \
-  inline void name(const char* fmt, ...) { \
+  inline void name(const char* fmt, ...) __printf_attr(2, 3) { \
     if (m_log && (level <= m_level)) {     \
       va_list ap; va_start(ap, fmt);       \
       m_log->write(level, m_name, fmt, ap);\
@@ -53,7 +59,7 @@
     void setLevel(int level);
     int getLevel(void) { return m_level; }
 
-    inline void write(int level, const char* format, ...) {
+    inline void write(int level, const char* format, ...) __printf_attr(3, 4) {
       if (m_log && (level <= m_level)) {
         va_list ap;
         va_start(ap, format);

--- common/rfb/SConnection.cxx	2011-11-15 01:22:23.000000000 +0900
+++ common/rfb/SConnection.cxx	2013-05-27 19:09:50.208576000 +0900
@@ -239,7 +239,7 @@
 
 void SConnection::throwConnFailedException(const char* msg)
 {
-  vlog.info(msg);
+  vlog.info("%s", msg);
   if (state_ == RFBSTATE_PROTOCOL_VERSION) {
     if (cp.majorVersion == 3 && cp.minorVersion == 3) {
       os->writeU32(0);

--- common/rfb/SSecurityTLS.cxx	2011-02-18 19:54:11.000000000 +0900
+++ common/rfb/SSecurityTLS.cxx	2013-05-27 19:09:50.354575000 +0900
@@ -49,7 +49,7 @@
 
 static void debug_log(int level, const char* str)
 {
-  vlog.debug(str);
+  vlog.debug("[%d]: %s", level, str);
 }
 
 void SSecurityTLS::initGlobal()
@@ -148,17 +148,19 @@
       throw;
     }
 
-    gnutls_transport_set_pull_function(session,rdr::gnutls_InStream_pull);
-    gnutls_transport_set_push_function(session,rdr::gnutls_OutStream_push);
-    gnutls_transport_set_ptr2(session,
-			      (gnutls_transport_ptr)is,
-			      (gnutls_transport_ptr)os);
     os->writeU8(1);
     os->flush();
   }
 
+  rdr::TLSInStream *tlsis = new rdr::TLSInStream(is, session);
+  rdr::TLSOutStream *tlsos = new rdr::TLSOutStream(os, session);
+
   int err;
-  if ((err = gnutls_handshake(session)) != GNUTLS_E_SUCCESS) {
+  err = gnutls_handshake(session);
+  if (err != GNUTLS_E_SUCCESS) {
+    delete tlsis;
+    delete tlsos;
+
     if (!gnutls_error_is_fatal(err)) {
       vlog.debug("Deferring completion of TLS handshake: %s", gnutls_strerror(err));
       return false;
@@ -170,8 +172,7 @@
 
   vlog.debug("Handshake completed");
 
-  sc->setStreams(fis=new rdr::TLSInStream(is,session),
-		 fos=new rdr::TLSOutStream(os,session));
+  sc->setStreams(fis = tlsis, fos = tlsos);
 
   return true;
 }

--- common/rfb/ScreenSet.h	2010-12-01 19:11:20.000000000 +0900
+++ common/rfb/ScreenSet.h	2013-05-27 19:09:50.103575000 +0900
@@ -23,6 +23,7 @@
 
 #include <stdio.h>
 
+#include <rdr/types.h>
 #include <rfb/Rect.h>
 #include <list>
 #include <set>

--- common/rfb/VNCSConnectionST.cxx	2011-12-21 22:17:54.000000000 +0900
+++ common/rfb/VNCSConnectionST.cxx	2013-05-27 19:09:50.296574000 +0900
@@ -66,7 +66,8 @@
 VNCSConnectionST::VNCSConnectionST(VNCServerST* server_, network::Socket *s,
                                    bool reverse)
   : SConnection(reverse), sock(s), inProcessMessages(false),
-    syncFence(false), fenceFlags(0), fenceDataLen(0), fenceData(NULL),
+    pendingSyncFence(false), syncFence(false), fenceFlags(0),
+    fenceDataLen(0), fenceData(NULL),
     baseRTT(-1), minRTT(-1), seenCongestion(false), pingCounter(0),
     ackedOffset(0), sentOffset(0), congWindow(0), congestionTimer(this),
     server(server_),
@@ -156,7 +157,13 @@
     network::TcpSocket::cork(sock->getFd(), true);
 
     while (getInStream()->checkNoWait(1)) {
+      if (pendingSyncFence) {
+        syncFence = true;
+        pendingSyncFence = false;
+      }
+
       processMsg();
+
       if (syncFence) {
         writer()->writeFence(fenceFlags, fenceDataLen, fenceData);
         syncFence = false;
@@ -627,10 +634,7 @@
 {
   if (flags & fenceFlagRequest) {
     if (flags & fenceFlagSyncNext) {
-      if (syncFence)
-        vlog.error("Fence trying to synchronise another fence");
-
-      syncFence = true;
+      pendingSyncFence = true;
 
       fenceFlags = flags & (fenceFlagBlockBefore | fenceFlagBlockAfter | fenceFlagSyncNext);
       fenceDataLen = len;
@@ -1083,6 +1087,10 @@
       if (i->width() && i->height()) {
         int nUpdateRects = writer()->getNumRects(*i);
         if (nUpdateRects == 0 && cp.currentEncoding() == encodingTight) {
+          // With Tight encoding and LastRect support, the client does not
+          // care about the number of rectangles in the update - it will
+          // stop parsing when it encounters a LastRect "rectangle".
+          // In this case, pretend to send 65535 rectangles.
           nRects = 0xFFFF;  break;
         }
         else

--- common/rfb/VNCSConnectionST.h	2011-11-21 00:36:11.000000000 +0900
+++ common/rfb/VNCSConnectionST.h	2013-05-27 19:09:50.156574000 +0900
@@ -183,7 +183,7 @@
 
     bool inProcessMessages;
 
-    bool syncFence;
+    bool pendingSyncFence, syncFence;
     rdr::U32 fenceFlags;
     unsigned fenceDataLen;
     char *fenceData;
