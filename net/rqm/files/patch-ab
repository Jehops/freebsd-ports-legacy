--- main.c	1999-10-14 11:27:07.000000000 -0400
+++ main.c	2011-03-17 17:21:34.000000000 -0400
@@ -14,7 +14,7 @@
 extern char 	 ui[];
 Tcl_Interp	*interp;
 
-static int tcl_init(int argc, char **argv)
+static int tcl_init(int argc, const char **argv)
 {
 	char		*cmd_line_args, buffer[10];
 	Tcl_Obj 	*ui_obj;
@@ -67,7 +67,7 @@
 	}
 }
 
-static void rtp_callback(struct rtp *s, rtp_event *e)
+static void rqm_rtp_callback(struct rtp *s, rtp_event *e)
 {
 	rtp_packet	*p    = (rtp_packet *)     e->data;
 	rtcp_sr         *sr   = (rtcp_sr *)        e->data;
@@ -79,7 +79,7 @@
 
 	switch (e->type) {
 		case RX_RTP:
-			sprintf(cmd, "set CODEC(0x%08lx) %d", p->ssrc, p->pt);
+			sprintf(cmd, "set CODEC(0x%04x) %d", p->fields.ssrc, p->fields.pt);
 			tcl_send(cmd);
 			xfree(p);
 			break;
@@ -90,37 +90,37 @@
 		case RX_SR:
 			break;
 		case RX_RR:
-			sprintf(cmd, "chart_set 0x%08lx 0x%08lx %d", rr->ssrc, e->ssrc, (100 * rr->fract_lost) / 256);
+			sprintf(cmd, "chart_set 0x%04x 0x%04x %d", rr->ssrc, e->ssrc, (100 * rr->fract_lost) / 256);
 			tcl_send(cmd);
 			break;
 		case RX_RR_EMPTY:
-			sprintf(cmd, "rr_empty 0x%08lx", e->ssrc);
+			sprintf(cmd, "rr_empty 0x%04x", e->ssrc);
 			tcl_send(cmd);
 			break;
 		case RX_SDES:
 			switch (sdes->type) {
 				case RTCP_SDES_CNAME:
-					sprintf(cmd, "set_cname 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_CNAME));
+					sprintf(cmd, "set_cname 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_CNAME));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_NAME:
-					sprintf(cmd, "set_name 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_NAME));
+					sprintf(cmd, "set_name 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_NAME));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_EMAIL:
-					sprintf(cmd, "set_email 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_EMAIL));
+					sprintf(cmd, "set_email 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_EMAIL));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_PHONE:
-					sprintf(cmd, "set_phone 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_PHONE));
+					sprintf(cmd, "set_phone 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_PHONE));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_LOC:
-					sprintf(cmd, "set_loc 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_LOC));
+					sprintf(cmd, "set_loc 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_LOC));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_TOOL:
-					sprintf(cmd, "set_tool 0x%08lx \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_TOOL));
+					sprintf(cmd, "set_tool 0x%04x \"%s\"", e->ssrc, rtp_get_sdes(s, e->ssrc, RTCP_SDES_TOOL));
 					tcl_send(cmd);
 					break;
 				case RTCP_SDES_NOTE:
@@ -130,23 +130,23 @@
 			}
 			break;
 		case RX_BYE:
-			sprintf(cmd, "ssrc_delete 0x%08lx", e->ssrc);
+			sprintf(cmd, "ssrc_delete 0x%04x", e->ssrc);
 			tcl_send(cmd);
 			break;
 		case SOURCE_CREATED:
-			sprintf(cmd, "ssrc_exists 0x%08lx", e->ssrc);
+			sprintf(cmd, "ssrc_exists 0x%04x", e->ssrc);
 			tcl_send(cmd);
 			break;
 		case SOURCE_DELETED:
-			sprintf(cmd, "ssrc_delete 0x%08lx", e->ssrc);
+			sprintf(cmd, "ssrc_delete 0x%04x", e->ssrc);
 			tcl_send(cmd);
 			break;
 		case RR_TIMEOUT:
-			sprintf(cmd, "chart_set 0x%08lx 0x%08lx %d", rr->ssrc, e->ssrc, 101);
+			sprintf(cmd, "chart_set 0x%04x 0x%04x %d", rr->ssrc, e->ssrc, 101);
 			tcl_send(cmd);
 			break;
 		default:
-			debug_msg("Unknown event: type %d ssrc 0x%08lx\n", e->type, e->ssrc);
+			debug_msg("Unknown event: type %d ssrc 0x%04x\n", e->type, e->ssrc);
 			break;
 	}
 }
@@ -170,14 +170,14 @@
     return (sec+(usec/1000000));
 }
 
-int main(int argc, char *argv[])
+int main(int argc, char **argv)
 {
 	struct timeval	 timeout, curr_t, prev_t;
 	struct rtp	*rtp_session;
 	char		*addr;
 	char		*port;
 	char		 cmd[100];
-	u_int32		 curr_rtp_time;
+	u_int32_t	 curr_rtp_time;
 #ifdef WIN32
 	WSADATA WSAdata;
 	if (WSAStartup(WS_VERSION_TWO, &WSAdata) != 0 && WSAStartup(WS_VERSION_ONE, &WSAdata) != 0) {
@@ -199,14 +199,14 @@
 	addr = (char *) strtok(argv[1], "/");
 	port = (char *) strtok(NULL, "\0");
 
-	rtp_session = rtp_init(addr, atoi(port), atoi(port), 15, 64000, rtp_callback, NULL);
+	rtp_session = rtp_init(addr, atoi(port), atoi(port), 15, 64000, rqm_rtp_callback, NULL);
 
 	/* Initialise the user interface... */
-	if (tcl_init(argc, argv) == FALSE) {
+	if (tcl_init(argc, (const char **)argv) == FALSE) {
-		printf("Unable to initialise interface\n");
+		fprintf(stderr, "Unable to initialise interface\n");
 		return 1;
 	}
-	sprintf(cmd, "ssrc_exists 0x%08lx", rtp_my_ssrc(rtp_session));
+	sprintf(cmd, "ssrc_exists 0x%04x", rtp_my_ssrc(rtp_session));
 	tcl_send(cmd);
 	sprintf(cmd, "set group_addr %s\n", addr);
 	tcl_send(cmd);
@@ -215,7 +215,7 @@
 	rtp_set_sdes(rtp_session, rtp_my_ssrc(rtp_session), RTCP_SDES_TOOL, VERSION, strlen(VERSION));
 
 	gettimeofday(&prev_t, NULL);
-	curr_rtp_time = (u_int32) lrand48();
+	curr_rtp_time = (u_int32_t) lrand48();
 	while (Tk_GetNumMainWindows() > 0) {
 		gettimeofday(&curr_t, NULL);
 		curr_rtp_time += (int) (tv_diff(curr_t, prev_t) * 8000);
