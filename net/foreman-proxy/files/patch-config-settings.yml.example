--- config/settings.yml.example.orig	2014-01-28 19:55:58.769179974 +0100
+++ config/settings.yml.example	2014-01-28 20:06:51.840135157 +0100
@@ -23,7 +23,7 @@
 
 # Enable TFTP management
 :tftp: false
-:tftproot: /var/lib/tftpboot
+:tftproot: /tftpboot
 # Defines the TFTP Servername to use, overrides the name in the subnet declaration
 #:tftp_servername: tftp.domain.com
 
@@ -35,14 +35,14 @@
 #   nsupdate_gss (for GSS-TSIG support)
 #   virsh (simple implementation for libvirt)
 :dns_provider: nsupdate
-#:dns_key: /etc/rndc.key
+#:dns_key: /usr/local/etc/namedb/rndc.key
 # use this setting if you are managing a dns server which is not localhost though this proxy
 #:dns_server: dns.domain.com
 # use this setting if you want to override default TTL setting (86400)
 #:dns_ttl: 86400
 # use dns_tsig_* for GSS-TSIG updates using Kerberos.  Required for Windows MS DNS with
 # Secure Dynamic Updates, or BIND as used in FreeIPA.  Set dns_provider to nsupdate_gss.
-#:dns_tsig_keytab: /usr/share/foreman-proxy/dns.keytab
+#:dns_tsig_keytab: /usr/local/share/foreman-proxy/dns.keytab
 #:dns_tsig_principal: DNS/host.example.com@EXAMPLE.COM
 
 # Enable DHCP management
@@ -55,15 +55,8 @@
 # dhcp_subnets is a Native MS implementation setting. It restricts the subnets queried to a
 # subset, so as to reduce the query time.
 #:dhcp_subnets: [192.168.205.0/255.255.255.128, 192.168.205.128/255.255.255.128]
-# Settings for Ubuntu ISC
-#:dhcp_config: /etc/dhcp3/dhcpd.conf
-#:dhcp_leases: /var/lib/dhcp3/dhcpd.leases
-# Settings for Redhat ISC
-# Redhat 5
-#:dhcp_config: /etc/dhcpd.conf
-# Redhat 6
-#:dhcp_config: /etc/dhcp/dhcpd.conf
-#:dhcp_leases: /var/lib/dhcpd/dhcpd.leases
+#:dhcp_config: %%LOCALBASE%%/etc/dhcpd.conf
+#:dhcp_leases: /var/db/dhcpd.leases
 #:dhcp_key_name: secret_key_name
 #:dhcp_key_secret: secret_key
 
@@ -72,8 +65,8 @@
 
 # enable PuppetCA management
 :puppetca: false
-#:ssldir: /var/lib/puppet/ssl
-#:puppetdir: /etc/puppet
+#:ssldir: /var/puppet/ssl
+#:puppetdir: %%LOCALBASE%%/etc/puppet
 
 # enable Puppet management
 :puppet: false
@@ -87,19 +80,19 @@
 
 # customrun command details
 # Set :customrun_cmd to the full path of the script you want to run, instead of /bin/false
-:customrun_cmd: /bin/false
+:customrun_cmd: /usr/bin/false
 # Set :customrun_args to any args you want to pass to your custom script. The hostname of the
 # system to run against will be appended after the custom commands.
 :customrun_args: -ay -f -s
 
-:puppet_conf: /etc/puppet/puppet.conf
+:puppet_conf: %%LOCALBASE%%/etc/puppet/puppet.conf
 # whether to use sudo before the ssh command
 :puppetssh_sudo: false
 # the command which will be sent to the host
-:puppetssh_command: /usr/bin/puppet agent --onetime --no-usecacheonfailure
+:puppetssh_command: %%LOCALBASE%%/bin/puppet agent --onetime --no-usecacheonfailure
 # With which user should the proxy connect
 #:puppetssh_user: root
-#:puppetssh_keyfile: /etc/foreman-proxy/id_rsa
+#:puppetssh_keyfile: %%PREFIX%%/etc/foreman-proxy/id_rsa
 
 # Which user to invoke sudo as to run puppet commands
 #:puppet_user: root
@@ -111,7 +104,7 @@
 # smart-proxy client node needs to have some admin right on chef-server
 # in order to retrive all nodes public keys
 # :chef_smartproxy_clientname: 'host.example.net'
-# :chef_smartproxy_privatekey: '/etc/chef/client.pem'
+# :chef_smartproxy_privatekey: '%%LOCALBASE%%/etc/chef/client.pem'
 
 # enable BMC management  (Bare metal power and bios controls)
 # Available providers:
