--- contrib/tstout.c	Wed Mar  4 23:15:24 1992
+++ contrib/tstout.c.new	Sat Dec  9 10:35:30 2000
@@ -36,7 +38,7 @@
   char *z;
 
   if (argc != 2
-      || strncmp (argv[1], "/dev/", sizeof "/dev/" - 1) != 0)
+      || strncmp (argv[1], _PATH_DEV, sizeof _PATH_DEV - 1) != 0)
     {
       fprintf (stderr, "Usage: tstout device\n");
       exit (EXIT_FAILURE);
--- unix/cohtty.c	Sun Aug 20 21:30:13 1995
+++ unix/cohtty.c.new	Sat Dec  9 10:35:30 2000
@@ -29,6 +31,7 @@
 
 #include <ctype.h>
 #include <access.h>
+#include <paths.h>
 
 /* fscoherent_disable_tty() is a COHERENT specific function. It takes the name
  * of a serial device and then scans /etc/ttys for a match. If it finds one,
@@ -139,9 +142,10 @@
 				    x = ixswait ((unsigned long) ipid,
 						 (const char *) NULL);
 				}
-				*pzenable = zbufalc (sizeof "/dev/"
+				*pzenable = zbufalc (sizeof _PATH_DEV
 						     + strlen (enable_device));
-				sprintf(*pzenable,"/dev/%s", enable_device);
+				sprintf(*pzenable,"%s%s",_PATH_DEV,
+					enable_device);
 /*				ulog(LOG_NORMAL,"Enable string is {%s}",*pzenable); */
 				return TRUE;
 			}else{
@@ -246,7 +250,7 @@
 	char resource[LOKFLEN];
 	char filename[LOKFLEN];
 
-	sprintf(filename, "/dev/%s", ttyn);
+	sprintf(filename, "%s%s", _PATH_DEV, ttyn);
 	if (NULL == gen_res_name(filename, resource)){
 		return(0);	/* Non-existent tty can not be locked :-) */
 	}
--- unix/cusub.c	Sun Aug 20 21:30:15 1995
+++ unix/cusub.c.new	Sat Dec  9 10:35:30 2000
@@ -63,6 +63,7 @@
 #endif /* ! defined (O_NONBLOCK) */
 
 #include <errno.h>
+#include <paths.h>
 
 /* 4.2 systems don't define SIGUSR2.  This should work for them.  On
    systems which are missing SIGUSR1, or SIGURG, you must find two
@@ -156,8 +157,8 @@
   zfree = NULL;
   if (*zline != '/')
     {
-      zfree = zbufalc (sizeof "/dev/" + strlen (zline));
-      sprintf (zfree, "/dev/%s", zline);
+      zfree = zbufalc (sizeof _PATH_DEV + strlen (zline));
+      sprintf (zfree, "%s%s", _PATH_DEV, zline);
       zline = zfree;
     }
 
@@ -188,14 +189,14 @@
   zfree2 = NULL;
   if (*zline != '/')
     {
-      zfree1 = zbufalc (sizeof "/dev/" + strlen (zline));
-      sprintf (zfree1, "/dev/%s", zline);
+      zfree1 = zbufalc (sizeof _PATH_DEV + strlen (zline));
+      sprintf (zfree1, "%s%s", _PATH_DEV, zline);
       zline = zfree1;
     }
   if (*zpline != '/')
     {
-      zfree2 = zbufalc (sizeof "/dev/" + strlen (zpline));
-      sprintf (zfree2, "/dev/%s", zpline);
+      zfree2 = zbufalc (sizeof _PATH_DEV + strlen (zpline));
+      sprintf (zfree2, "%s%s", _PATH_DEV, zpline);
       zpline = zfree2;
     }
 
--- unix/detach.c	Sun Aug 20 21:30:16 1995
+++ unix/detach.c	Sat Dec  9 10:35:30 2000
@@ -30,6 +32,7 @@
 #include "sysdep.h"
 
 #include <errno.h>
+#include <paths.h>
 
 #if HAVE_SYS_IOCTL_H
 #include <sys/ioctl.h>
@@ -123,7 +126,7 @@
   {
     int o;
 
-    o = open ((char *) "/dev/tty", O_RDONLY);
+    o = open ((char *) _PATH_TTY, O_RDONLY);
     if (o >= 0)
       {
 	(void) ioctl (o, TIOCNOTTY, (char *) NULL);
@@ -137,10 +140,10 @@
   (void) close (0);
   (void) close (1);
   (void) close (2);
-  if (open ((char *) "/dev/null", O_RDONLY) != 0
-      || open ((char *) "/dev/null", O_WRONLY) != 1
-      || open ((char *) "/dev/null", O_WRONLY) != 2)
-    ulog (LOG_FATAL, "open (/dev/null): %s", strerror (errno));
+  if (open ((char *) _PATH_DEVNULL, O_RDONLY) != 0
+      || open ((char *) _PATH_DEVNULL, O_WRONLY) != 1
+      || open ((char *) _PATH_DEVNULL, O_WRONLY) != 2)
+    ulog (LOG_FATAL, "open (%s): %s", _PATH_DEVNULL, strerror (errno));
 
 #if HAVE_SETSID
 
--- unix/init.c	Sun Aug 20 21:30:24 1995
+++ unix/init.c.new	Sat Dec  9 10:35:30 2000
@@ -31,6 +33,7 @@
 #include "sysdep.h"
 
 #include <errno.h>
+#include <paths.h>
 #include <pwd.h>
 
 #if HAVE_FCNTL_H
@@ -189,13 +192,13 @@
 
   /* Make sure stdin, stdout and stderr are open.  */
   if (fcntl (0, F_GETFD, 0) < 0
-      && open ((char *) "/dev/null", O_RDONLY, 0) != 0)
+      && open ((char *) _PATH_DEVNULL, O_RDONLY, 0) != 0)
     exit (EXIT_FAILURE);
   if (fcntl (1, F_GETFD, 0) < 0
-      && open ((char *) "/dev/null", O_WRONLY, 0) != 1)
+      && open ((char *) _PATH_DEVNULL, O_WRONLY, 0) != 1)
     exit (EXIT_FAILURE);
   if (fcntl (2, F_GETFD, 0) < 0
-      && open ((char *) "/dev/null", O_WRONLY, 0) != 2)
+      && open ((char *) _PATH_DEVNULL, O_WRONLY, 0) != 2)
     exit (EXIT_FAILURE);
 
   iuuconf = uuconf_spooldir (puuconf, &zSspooldir);
--- unix/portnm.c	Sun Aug 20 21:30:33 1995
+++ unix/portnm.c.new	Sat Dec  9 10:35:30 2000
@@ -12,6 +14,7 @@
 #endif
 #include <sys/socket.h>
 #endif
+#include <paths.h>
 
 #ifndef ttyname
 extern char *ttyname ();
@@ -44,8 +47,8 @@
   z = ttyname (0);
   if (z == NULL)
     return NULL;
-  if (strncmp (z, "/dev/", sizeof "/dev/" - 1) == 0)
-    return z + sizeof "/dev/" - 1;
+  if (strncmp (z, _PATH_DEV, sizeof _PATH_DEV - 1) == 0)
+    return z + sizeof _PATH_DEV - 1;
   else
     return z;
 }
--- unix/serial.c	Sun Aug 20 21:30:38 1995
+++ unix/serial.c.new	Sat Dec  9 10:35:30 2000
@@ -37,6 +37,7 @@
 
 #include <errno.h>
 #include <ctype.h>
+#include <paths.h>
 
 #if HAVE_SYS_PARAM_H
 #include <sys/param.h>
@@ -497,10 +498,10 @@
       size_t clen;
 
       clen = strlen (zdevice);
-      q->zdevice = zbufalc (sizeof "/dev/" + clen);
-      memcpy (q->zdevice, "/dev/", sizeof "/dev/" - 1);
-      memcpy (q->zdevice + sizeof "/dev/" - 1, zdevice, clen);
-      q->zdevice[sizeof "/dev/" + clen - 1] = '\0';
+      q->zdevice = zbufalc (sizeof _PATH_DEV + clen);
+      memcpy (q->zdevice, _PATH_DEV, sizeof _PATH_DEV - 1);
+      memcpy (q->zdevice + sizeof _PATH_DEV - 1, zdevice, clen);
+      q->zdevice[sizeof _PATH_DEV + clen - 1] = '\0';
     }
   q->o = -1;
   q->ord = -1;
@@ -519,7 +520,7 @@
 {
   /* chmod /dev/tty to prevent other users from writing messages to
      it.  This is essentially `mesg n'.  */
-  (void) chmod ("/dev/tty", S_IRUSR | S_IWUSR);
+  (void) chmod (_PATH_TTY, S_IRUSR | S_IWUSR);
   return fsserial_init (qconn, &sstdincmds, (const char *) NULL);
 }
 
@@ -920,6 +921,9 @@
 #ifdef B115200
   { B115200, 115200 },
 #endif
+#ifdef B230400
+  { B230400, 230400 },
+#endif
   { B0, 0 }
 };
 
@@ -956,8 +960,8 @@
 #else
       const char *z;
 
-      if (strncmp (q->zdevice, "/dev/", sizeof "/dev/" - 1) == 0)
-	z = q->zdevice + sizeof "/dev/" - 1;
+      if (strncmp (q->zdevice, _PATH_DEV, sizeof _PATH_DEV - 1) == 0)
+	z = q->zdevice + sizeof _PATH_DEV - 1;
       else
 	z = q->zdevice;
       ulog_device (z);
@@ -1648,8 +1652,8 @@
       zfree = NULL;
       if (*z != '/')
 	{
-	  zfree = zbufalc (sizeof "/dev/" + strlen (z));
-	  sprintf (zfree, "/dev/%s", z);
+	  zfree = zbufalc (sizeof _PATH_DEV + strlen (z));
+	  sprintf (zfree, "%s%s", _PATH_DEV, z);
 	  z = zfree;
 	}
 
@@ -2371,7 +2375,7 @@
 	  else
 	    csleepchars = MAX_INPUT - 10;
 
-	  isleep = (int) (((long) csleepchars * 10000L) / q->ibaud);
+	  isleep = (int) (((long) csleepchars * 10000L) / (q->ibaud? q->ibaud: (long)1200));
 	  isleep -= 10;
 
 	  if (isleep > 10)
@@ -2773,8 +2777,8 @@
 	                        / baud bits/sec)
 			       * 10 bits/byte)
 	     */
-	  stime.tv_sec = (long) 10240 / q->ibaud;
-	  stime.tv_usec = ((((long) 1024000000 / q->ibaud) * (long) 10)
+	  stime.tv_sec = (long) 10240 / (q->ibaud? q->ibaud: (long)1200);
+	  stime.tv_usec = ((((long) 1024000000 / (q->ibaud? q->ibaud: (long)1200)) * (long) 10)
 			   % (long) 1000000);
 
 	  imask = 1 << q->o;
@@ -2846,7 +2850,7 @@
                  we don't need to use the catch stuff, since we know
                  that HAVE_RESTARTABLE_SYSCALLS is 0.  */
 	      usset_signal (SIGALRM, usalarm, TRUE, (boolean *) NULL);
-	      alarm ((int) ((long) 10240 / q->ibaud) + 1);
+	      alarm ((int) ((long) 10240 / (q->ibaud? q->ibaud: (long)1200)) + 1);
 
 	      /* There is a race condition here: on a severely loaded
                  system, we could get the alarm before we start the
--- unix/spawn.c	Sun Aug 20 21:30:41 1995
+++ unix/spawn.c.new	Sat Dec  9 10:35:30 2000
@@ -29,6 +29,7 @@
 #include "sysdep.h"
 
 #include <errno.h>
+#include <paths.h>
 
 #if HAVE_FCNTL_H
 #include <fcntl.h>
@@ -210,7 +213,7 @@
 	{
 	  if (onull < 0)
 	    {
-	      onull = open ((char *) "/dev/null", O_RDWR);
+	      onull = open ((char *) _PATH_DEVNULL, O_RDWR);
 	      if (onull < 0
 		  || fcntl (onull, F_SETFD,
 			    fcntl (onull, F_GETFD, 0) | FD_CLOEXEC) < 0)
--- unix/tli.c	Sun Aug 20 21:30:46 1995
+++ unix/tli.c.new	Sat Dec  9 10:35:30 2000
@@ -38,6 +38,7 @@
 #include "system.h"
 
 #include <errno.h>
+#include <paths.h>
 
 #if HAVE_SYS_IOCTL_H
 #include <sys/ioctl.h>
@@ -267,8 +268,8 @@
   zfreedev = NULL;
   if (*zdevice != '/')
     {
-      zfreedev = zbufalc (sizeof "/dev/" + strlen (zdevice));
-      sprintf (zfreedev, "/dev/%s", zdevice);
+      zfreedev = zbufalc (sizeof _PATH_DEV + strlen (zdevice));
+      sprintf (zfreedev, "%s%s", _PATH_DEV, zdevice);
       zdevice = zfreedev;
     }
 
