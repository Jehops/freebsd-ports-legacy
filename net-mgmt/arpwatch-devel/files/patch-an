--- report.c.orig	Sat Sep 30 19:41:10 2000
+++ report.c	Fri Jun 11 12:35:32 2004
@@ -20,7 +20,7 @@
  */
 #ifndef lint
 static const char rcsid[] =
-    "@(#) $Id: report.c,v 1.46 2000/09/30 23:41:04 leres Exp $ (LBL)";
+    "@(#) $Id: report.c,v 1.8 2004/06/10 19:56:57 mdg Exp $ (LBL)";
 #endif

 /*
@@ -45,6 +45,8 @@

 #include <ctype.h>
 #include <errno.h>
+#include <fcntl.h>
+#include <paths.h>
 #include <signal.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -70,6 +72,8 @@

 #define PLURAL(n) ((n) == 1 || (n) == -1 ? "" : "s")

+extern char *Watcher;
+
 static int cdepth;	/* number of outstanding children */

 static char *fmtdate(time_t);
@@ -77,6 +81,8 @@
 RETSIGTYPE reaper(int);
 static int32_t gmt2local(void);

+extern struct ifdesc *if_desc;
+
 static char *
 fmtdelta(register time_t t)
 {
@@ -232,28 +238,37 @@
 }

 void
-report(register char *title, register u_int32_t a, register u_char *e1,
-    register u_char *e2, register time_t *t1p, register time_t *t2p)
+report(evt_type event, register u_int32_t a, register u_char *e1,
+    register u_char *e2, register time_t *t1p, register time_t *t2p,
+    register char *interface, register char *old_interface)
 {
 	register char *cp, *hn;
 	register int fd, pid;
 	register FILE *f;
 	char tempfile[64], cpu[64], os[64];
 	char *fmt = "%20s: %s\n";
-	char *watcher = WATCHER;
+	char *watcher = Watcher ? Watcher : WATCHER;
 	char *watchee = WATCHEE;
 	char *sendmail = PATH_SENDMAIL;
 	char *unknown = "<unknown>";
 	char buf[132];
+	char *newif, *newif_old;
 	static int init = 0;
+	struct ifdesc *idp = if_desc;

 	/* No report until we're initialized */
 	if (initializing)
 		return;

+	/* these types are sent to syslog instead of reported on.
+	 * only continue if there are other events as well
+	 */
+	if (event == 0 || (event & ~(IP_ETHER_REUSE | FLIPFLOP_DECNET)) == 0)
+	  return;
+
 	if (debug) {
 		if (debug > 1) {
-			dosyslog(LOG_NOTICE, title, a, e1, e2);
+			dosyslog(LOG_NOTICE, "event", a, e1, e2);
 			return;
 		}
 		f = stdout;
@@ -270,7 +285,7 @@
 		}

 		/* Syslog this event too */
-		dosyslog(LOG_NOTICE, title, a, e1, e2);
+		dosyslog(LOG_NOTICE, "event", a, e1, e2);

 		/* Update child depth */
 		++cdepth;
@@ -286,6 +301,7 @@

 		/* Child */
 		closelog();
+
 		(void)strcpy(tempfile, "/tmp/arpwatch.XXXXXX");
 		if ((fd = mkstemp(tempfile)) < 0) {
 			syslog(LOG_ERR, "mkstemp(%s) %m", tempfile);
@@ -300,16 +316,52 @@
 			syslog(LOG_ERR, "unlink(%s): %m", tempfile);
 	}

+	newif = newif_old = NULL;
+	if (interface != NULL)
+	  for (idp = if_desc; idp != NULL; idp = idp->next)
+	    if (strcmp(idp->name, interface) == 0)
+	      asprintf(&newif, "%s (%s)", interface, idp->desc);
+
+	if (newif == NULL && interface != NULL)
+	  asprintf(&newif, "%s", interface);
+
+	if (old_interface != NULL)
+	  for (idp = if_desc; idp != NULL; idp = idp->next)
+	    if (strcmp(idp->name, old_interface) == 0)
+	      asprintf(&newif_old, "%s (%s)", old_interface, idp->desc);
+
+	if (newif_old == NULL && old_interface != NULL)
+	  asprintf(&newif_old, "%s", old_interface);
+
 	(void)fprintf(f, "From: %s\n", watchee);
 	(void)fprintf(f, "To: %s\n", watcher);
 	hn = gethname(a);
-	if (!isdigit(*hn))
-		(void)fprintf(f, "Subject: %s (%s)\n", title, hn);
+	if (hn != NULL)
+		(void)fprintf(f, "Subject: Arpwatch Event (%s)\n", hn);
 	else {
-		(void)fprintf(f, "Subject: %s\n", title);
+		(void)fprintf(f, "Subject: Arpwatch Event\n");
 		hn = unknown;
 	}
 	(void)putc('\n', f);
+
+	if (event & ETHER_NEW)
+	  (void)fprintf(f, fmt, "event", "new ethernet device");
+	if (event & ETHER_IFCHG)
+	  (void)fprintf(f, fmt, "event", "ethernet device changed interfaces");
+	if (event & ACTIVITY_NEW)
+	  (void)fprintf(f, fmt, "event", "new activity");
+	if (event & IP_NEW)
+	  (void)fprintf(f, fmt, "event", "new active IP address");
+	if (event & IP_ETHERCHG)
+	  (void)fprintf(f, fmt, "event", "IP changed ethernet address");
+	if (event & FLIPFLOP)
+	  (void)fprintf(f, fmt, "event", "flip flop");
+
+	(void)fprintf(f, fmt, "interface", newif);
+
+	if (old_interface != NULL)
+	  (void)fprintf(f, fmt, "old interface", newif_old);
+
 	(void)fprintf(f, fmt, "hostname", hn);
 	(void)fprintf(f, fmt, "ip address", intoa(a));
 	(void)fprintf(f, fmt, "ethernet address", e2str(e1));
@@ -339,11 +391,37 @@
 	}

 	(void)rewind(f);
+
+	if (newif != NULL)
+	  free(newif);
+
+	if (newif_old != NULL)
+	  free(newif_old);
+
 	if (dup2(fileno(f), fileno(stdin)) < 0) {
 		syslog(LOG_ERR, "dup2: %m");
 		exit(1);
 	}
 	/* XXX Need to freopen()? */
+
+	/*
+	 * Open /dev/null as stdout and stderr so that sendmail 8.12.1 (and
+	 * above ?) won't complain about missing file descriptors.
+	 */
+	if ((fd = open(_PATH_DEVNULL, O_RDWR)) == -1) {
+		syslog(LOG_ERR, "Cannot open %s: %m", _PATH_DEVNULL);
+		exit(1);
+	}
+	if (dup2(fd, STDOUT_FILENO) == -1) {
+		syslog(LOG_ERR, "Cannot dup2 %s to stdout: %m", _PATH_DEVNULL);
+		exit(1);
+	}
+	if (dup2(fd, STDERR_FILENO) == -1) {
+		syslog(LOG_ERR, "Cannot dup2 %s to stderr: %m", _PATH_DEVNULL);
+		exit(1);
+	}
+	close(fd);
+
 	/* Always Deliver interactively (pause when child depth gets large) */
 	execl(sendmail, "sendmail", "-odi", watcher, NULL);
 	syslog(LOG_ERR, "execl: %s: %m", sendmail);
