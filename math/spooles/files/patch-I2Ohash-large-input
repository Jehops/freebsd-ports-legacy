$FreeBSD$
--- I2Ohash/src/util.c.orig	2013-03-04 21:21:54.000000000 -0500
+++ I2Ohash/src/util.c	2012-10-06 08:28:37.000000000 -0500
@@ -39,8 +39,9 @@
 */
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-long int loc3 = (long int)loc1*(long int)loc2 % hashtable->nlist ;
-loc =(int) loc3;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 #if MYDEBUG > 0
 fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %d", loc1, loc2, loc) ;
 fflush(stdout) ;
@@ -51,7 +52,7 @@
    --------------------------------------------------------
 */
 #if MYDEBUG > 0
-fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %ld, loc = %d", loc1, loc2, loc3, loc) ;
+fprintf(stdout, "\n hashtable->freeI2OP = %p", hashtable->freeI2OP) ;
 fflush(stdout) ;
 #endif
 if ( (i2op = hashtable->freeI2OP) == NULL ) {
@@ -159,10 +160,11 @@
 #endif
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-long int loc3 = (long int)loc1*(long int)loc2 % hashtable->nlist ;
-loc =(int) loc3;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 #if MYDEBUG > 0
-fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %ld, loc = %d", loc1, loc2, loc3, loc) ;
+fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %d", loc1, loc2, loc) ;
 fflush(stdout) ;
 #endif
 /*
@@ -231,7 +233,9 @@
 }
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-loc  = (loc1*loc2) % hashtable->nlist ;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 /*
    ---------------------------------------------------
    find the location of the first (key1,key2,*) triple
--- I2Ohash/src/util.c.orig	2013-03-04 21:21:54.000000000 -0500
+++ I2Ohash/src/util.c	2012-10-06 08:28:37.000000000 -0500
@@ -39,8 +39,9 @@
 */
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-long int loc3 = (long int)loc1*(long int)loc2 % hashtable->nlist ;
-loc =(int) loc3;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 #if MYDEBUG > 0
 fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %d", loc1, loc2, loc) ;
 fflush(stdout) ;
@@ -51,7 +52,7 @@
    --------------------------------------------------------
 */
 #if MYDEBUG > 0
-fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %ld, loc = %d", loc1, loc2, loc3, loc) ;
+fprintf(stdout, "\n hashtable->freeI2OP = %p", hashtable->freeI2OP) ;
 fflush(stdout) ;
 #endif
 if ( (i2op = hashtable->freeI2OP) == NULL ) {
@@ -159,10 +160,11 @@
 #endif
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-long int loc3 = (long int)loc1*(long int)loc2 % hashtable->nlist ;
-loc =(int) loc3;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 #if MYDEBUG > 0
-fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %ld, loc = %d", loc1, loc2, loc3, loc) ;
+fprintf(stdout, "\n loc1 = %d, loc2 = %d, loc3 = %d", loc1, loc2, loc) ;
 fflush(stdout) ;
 #endif
 /*
@@ -231,7 +233,9 @@
 }
 loc1 = (key1 + 1) % hashtable->nlist ;
 loc2 = (key2 + 1) % hashtable->nlist ;
-loc  = (loc1*loc2) % hashtable->nlist ;
+/*loc  = (loc1*loc2) % hashtable->nlist ;*/
+long int loc3  = (long int)loc1*(long int)loc2 % hashtable->nlist ;
+loc=(int)loc3;
 /*
    ---------------------------------------------------
    find the location of the first (key1,key2,*) triple
