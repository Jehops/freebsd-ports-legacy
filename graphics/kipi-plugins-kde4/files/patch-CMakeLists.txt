--- CMakeLists.txt.orig	2009-01-05 02:37:00.000000000 -0600
+++ CMakeLists.txt	2009-01-28 11:30:36.000000000 -0600
@@ -33,6 +33,183 @@
 INCLUDE(KDE4Defaults)
 INCLUDE(MacroLibrary)
 
+      message(STATUS "Check Kexiv2 library using pkg-config...")
+
+      # use pkg-config to get the directories and then use these values
+      # in the FIND_PATH() and FIND_LIBRARY() calls
+      INCLUDE(UsePkgConfig)
+    
+      PKGCONFIG(libkexiv2-kde4 _KEXIV2IncDir _KEXIV2LinkDir _KEXIV2LinkFlags _KEXIV2Cflags)
+    
+      if(_KEXIV2LinkFlags)
+        # query pkg-config asking for a libkexiv2 >= 0.2.0
+        EXEC_PROGRAM(${PKGCONFIG_EXECUTABLE} ARGS --atleast-version=0.2.0 libkexiv2-kde4 RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _pkgconfigDevNull )
+        if(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkexiv2 release >= 0.2.0")
+            set(KEXIV2_VERSION_GOOD_FOUND TRUE)
+        else(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkexiv2 release < 0.2.0, too old")
+            set(KEXIV2_VERSION_GOOD_FOUND FALSE)
+            set(KEXIV2_FOUND FALSE)
+        endif(_return_VALUE STREQUAL "0")
+      else(_KEXIV2LinkFlags)
+        set(KEXIV2_VERSION_GOOD_FOUND FALSE)
+        set(KEXIV2_FOUND FALSE)
+      endif(_KEXIV2LinkFlags)
+
+    if(KEXIV2_VERSION_GOOD_FOUND)
+        set(KEXIV2_DEFINITIONS "${_KEXIV2Cflags}")
+    
+        FIND_PATH(KEXIV2_INCLUDE_DIR libkexiv2/version.h
+        ${_KEXIV2IncDir}
+        )
+    
+        FIND_LIBRARY(KEXIV2_LIBRARIES NAMES kexiv2
+        PATHS
+        ${_KEXIV2LinkDir}
+        )
+    
+        if (KEXIV2_INCLUDE_DIR AND KEXIV2_LIBRARIES)
+            set(KEXIV2_FOUND TRUE)
+        endif (KEXIV2_INCLUDE_DIR AND KEXIV2_LIBRARIES)
+      endif(KEXIV2_VERSION_GOOD_FOUND) 
+      if (KEXIV2_FOUND)
+          if (NOT Kexiv2_FIND_QUIETLY)
+              message(STATUS "Found libkexiv2: ${KEXIV2_LIBRARIES}")
+          endif (NOT Kexiv2_FIND_QUIETLY)
+      else (KEXIV2_FOUND)
+          if (Kexiv2_FIND_REQUIRED)
+              if (NOT KEXIV2_INCLUDE_DIR)
+                  message(FATAL_ERROR "Could NOT find libkexiv2 header files")
+              endif (NOT KEXIV2_INCLUDE_DIR)
+              if (NOT KEXIV2_LIBRARIES)
+                  message(FATAL_ERROR "Could NOT find libkexiv2 library")
+              endif (NOT KEXIV2_LIBRARIES)
+          endif (Kexiv2_FIND_REQUIRED)
+      endif (KEXIV2_FOUND)
+    
+    MARK_AS_ADVANCED(KEXIV2_INCLUDE_DIR KEXIV2_LIBRARIES)
+
+
+# Find the KDCraw libary now
+    message(STATUS "Check Kdcraw library using pkg-config...")
+    if(NOT WIN32)
+      # use pkg-config to get the directories and then use these values
+      # in the FIND_PATH() and FIND_LIBRARY() calls
+      INCLUDE(UsePkgConfig)
+    
+      PKGCONFIG(libkdcraw-kde4 _KDCRAWIncDir _KDCRAWLinkDir _KDCRAWLinkFlags _KDCRAWCflags)
+    
+      if(_KDCRAWLinkFlags)
+        # query pkg-config asking for a libkdcraw >= 0.2.0
+        EXEC_PROGRAM(${PKGCONFIG_EXECUTABLE} ARGS --atleast-version=0.2.0 libkdcraw-kde4 RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _pkgconfigDevNull )
+        if(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkdcraw release >= 0.2.0")
+            set(KDCRAW_VERSION_GOOD_FOUND TRUE)
+        else(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkdcaw release < 0.2.0, too old")
+            set(KDCRAW_VERSION_GOOD_FOUND FALSE)
+            set(KDCRAW_FOUND FALSE)
+        endif(_return_VALUE STREQUAL "0")
+      else(_KDCRAWLinkFlags)
+        set(KDCRAW_VERSION_GOOD_FOUND FALSE)
+        set(KDCRAW_FOUND FALSE)
+      endif(_KDCRAWLinkFlags)
+    ELSE(NOT WIN32)
+      set(KDCRAW_VERSION_GOOD_FOUND TRUE)
+    ENDif(NOT WIN32)
+
+    if(KDCRAW_VERSION_GOOD_FOUND)
+        set(KDCRAW_DEFINITIONS "${_KDCRAWCflags}")
+    
+        FIND_PATH(KDCRAW_INCLUDE_DIR libkdcraw/version.h
+        ${_KDCRAWIncDir}
+        )
+    
+        FIND_LIBRARY(KDCRAW_LIBRARIES NAMES kdcraw
+        PATHS
+        ${_KDCRAWLinkDir}
+        )
+    
+        if (KDCRAW_INCLUDE_DIR AND KDCRAW_LIBRARIES)
+            set(KDCRAW_FOUND TRUE)
+            set(KDCRAW_FOR_DNGCONVERTER TRUE)
+        endif (KDCRAW_INCLUDE_DIR AND KDCRAW_LIBRARIES)
+     endif(KDCRAW_VERSION_GOOD_FOUND) 
+     if (KDCRAW_FOUND)
+         if (NOT Kdcraw_FIND_QUIETLY)
+             message(STATUS "Found libkdcraw: ${KDCRAW_LIBRARIES}")
+         endif (NOT Kdcraw_FIND_QUIETLY)
+     else (KDCRAW_FOUND)
+         if (Kdcraw_FIND_REQUIRED)
+             if (NOT KDCRAW_INCLUDE_DIR)
+                 message(FATAL_ERROR "Could NOT find libkdcraw header files")
+             endif (NOT KDCRAW_INCLUDE_DIR)
+             if (NOT KDCRAW_LIBRARIES)
+                 message(FATAL_ERROR "Could NOT find libkdcraw library")
+             endif (NOT KDCRAW_LIBRARIES)
+         endif (Kdcraw_FIND_REQUIRED)
+     endif (KDCRAW_FOUND)
+    
+    MARK_AS_ADVANCED(KDCRAW_INCLUDE_DIR KDCRAW_LIBRARIES)
+
+
+# Find the Kipi module now
+    if(NOT WIN32)
+      message(STATUS "Check Kipi library using pkg-config...")
+
+      # use pkg-config to get the directories and then use these values
+      # in the FIND_PATH() and FIND_LIBRARY() calls
+      INCLUDE(UsePkgConfig)
+
+      PKGCONFIG(libkipi-kde4 _KIPIIncDir _KIPILinkDir _KIPILinkFlags _KIPICflags)
+
+      if(_KIPILinkFlags)
+        # query pkg-config asking for a libkipi >= 0.2.0
+        exec_program(${PKGCONFIG_EXECUTABLE} ARGS --atleast-version=0.2.0 libkipi-kde4 RETURN_VALUE _return_VALUE OUTPUT_VARIABLE _pkgconfigDevNull )
+        if(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkipi release >= 0.2.0")
+            set(KIPI_VERSION_GOOD_FOUND TRUE)
+        else(_return_VALUE STREQUAL "0")
+            message(STATUS "Found libkipi release < 0.2.0, too old")
+            set(KIPI_VERSION_GOOD_FOUND FALSE)
+            set(KIPI_FOUND FALSE)
+        endif(_return_VALUE STREQUAL "0")
+      else(_KIPILinkFlags)
+        set(KIPI_VERSION_GOOD_FOUND FALSE)
+        set(KIPI_FOUND FALSE)
+      endif(_KIPILinkFlags)
+    else(NOT WIN32)
+      set(KIPI_VERSION_GOOD_FOUND TRUE)
+    endif(NOT WIN32)
+    if(KIPI_VERSION_GOOD_FOUND)
+        set(KIPI_DEFINITIONS ${_KIPICflags})
+
+        find_path(KIPI_INCLUDE_DIR NAMES libkipi/version.h PATHS ${KDE4_INCLUDE_DIR} ${_KIPIIncDir})
+        find_library(KIPI_LIBRARIES NAMES kipi PATHS ${KDE4_LIB_DIR} ${_KIPILinkDir})
+
+        if (KIPI_INCLUDE_DIR AND KIPI_LIBRARIES)
+            set(KIPI_FOUND TRUE)
+        endif (KIPI_INCLUDE_DIR AND KIPI_LIBRARIES)
+      endif(KIPI_VERSION_GOOD_FOUND)
+      if (KIPI_FOUND)
+          if (NOT Kipi_FIND_QUIETLY)
+              message(STATUS "Found libkipi: ${KIPI_LIBRARIES}")
+          endif (NOT Kipi_FIND_QUIETLY)
+      else (KIPI_FOUND)
+          if (Kipi_FIND_REQUIRED)
+              if (NOT KIPI_INCLUDE_DIR)
+                  message(FATAL_ERROR "Could NOT find libkipi header files")
+              endif (NOT KIPI_INCLUDE_DIR)
+              if (NOT KIPI_LIBRARIES)
+                  message(FATAL_ERROR "Could NOT find libkipi library")
+              endif (NOT KIPI_LIBRARIES)
+          endif (Kipi_FIND_REQUIRED)
+      endif (KIPI_FOUND)
+    
+    MARK_AS_ADVANCED(KIPI_INCLUDE_DIR KIPI_LIBRARIES)
+
+
 # Depencies detection required by all plugins
 FIND_PACKAGE(Kexiv2 REQUIRED)
 FIND_PACKAGE(Kdcraw REQUIRED)
@@ -62,19 +239,6 @@
     MACRO_OPTIONAL_FIND_PACKAGE(X11)   # For Slideshow and ImageViewer.
 ENDIF(NOT WIN32 AND NOT APPLE)
 
-IF(NOT WIN32)
-    # Check KDcraw version installed to compile fine DngConverter plugin.
-    FIND_PACKAGE(PkgConfig)
-    PKG_CHECK_MODULES(Kdcraw libkdcraw>=0.4.0)
-    IF(Kdcraw_FOUND)
-        SET(KDCRAW_FOR_DNGCONVERTER TRUE)
-    ELSE(Kdcraw_FOUND)
-        SET(KDCRAW_FOR_DNGCONVERTER FALSE)
-    ENDIF(Kdcraw_FOUND)
-ELSE(NOT WIN32)
-    SET(KDCRAW_FOR_DNGCONVERTER TRUE)
-ENDIF(NOT WIN32)
-
 INCLUDE(MacroOptionalDependPackage)
 
 # LINUX Only.
