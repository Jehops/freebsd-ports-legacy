--- dcmtk/dcmimage/include/diargpxt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/diargpxt.h	2012-06-08 20:02:18.531310065 +0400
@@ -91,7 +91,7 @@
                  const unsigned long planeSize,
                  const int bits)
     {                                             // not very much optimized, but no one really uses ARGB !!
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             register T2 value;
             const T1 offset = OFstatic_cast(T1, DicomImageClass::maxval(bits - 1));
--- dcmtk/dcmimage/include/dicmypxt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dicmypxt.h	2012-06-08 20:03:41.696298705 +0400
@@ -87,7 +87,7 @@
                  const unsigned long planeSize,
                  const int bits)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             // use the number of input pixels derived from the length of the 'PixelData'
             // attribute), but not more than the size of the intermediate buffer
--- dcmtk/dcmimage/include/dicocpt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dicocpt.h	2012-06-08 20:07:13.211298345 +0400
@@ -86,7 +86,7 @@
     inline void copy(const T *pixel[3],
                      const unsigned long offset)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             for (int j = 0; j < 3; j++)
                 OFBitmanipTemplate<T>::copyMem(pixel[j] + offset, this->Data[j], this->getCount());
--- dcmtk/dcmimage/include/dicoflt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dicoflt.h	2012-06-08 20:08:27.084301025 +0400
@@ -98,14 +98,14 @@
                      const int horz,
                      const int vert)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             if (horz && vert)
-                flipHorzVert(pixel, this->Data);
+                this->flipHorzVert(pixel, this->Data);
             else if (horz)
-                flipHorz(pixel, this->Data);
+                this->flipHorz(pixel, this->Data);
             else if (vert)
-                flipVert(pixel, this->Data);
+                this->flipVert(pixel, this->Data);
         }
     }
 };
--- dcmtk/dcmimage/include/dicorot.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dicorot.h	2012-06-08 20:04:43.917297785 +0400
@@ -98,14 +98,14 @@
     inline void rotate(const T *pixel[3],
                        const int degree)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             if (degree == 90)
-                rotateRight(pixel, this->Data);
+                this->rotateRight(pixel, this->Data);
             else if (degree == 180)
-                rotateTopDown(pixel, this->Data);
+                this->rotateTopDown(pixel, this->Data);
             else  if (degree == 270)
-                rotateLeft(pixel, this->Data);
+                this->rotateLeft(pixel, this->Data);
         }
     }
 };
--- dcmtk/dcmimage/include/dicosct.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dicosct.h	2012-06-08 20:05:53.268297505 +0400
@@ -107,8 +107,8 @@
     inline void scale(const T *pixel[3],
                       const int interpolate)
     {
-        if (Init(pixel))
-            scaleData(pixel, this->Data, interpolate);
+        if (this->Init(pixel))
+            this->scaleData(pixel, this->Data, interpolate);
     }
 };
 
--- dcmtk/dcmimage/include/dihsvpxt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dihsvpxt.h	2012-06-08 20:09:41.902298105 +0400
@@ -87,7 +87,7 @@
                  const unsigned long planeSize,
                  const int bits)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             register T2 *r = this->Data[0];
             register T2 *g = this->Data[1];
--- dcmtk/dcmimage/include/dipalpxt.h	2010-10-14 17:16:29.000000000 +0400
+++ dcmtk/dcmimage/include/dipalpxt.h	2012-06-08 20:10:20.035298545 +0400
@@ -92,7 +92,7 @@
     void convert(const T1 *pixel,
                  DiLookupTable *palette[3])
     {                                                                // can be optimized if necessary !
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             register const T1 *p = pixel;
             register T2 value = 0;
--- dcmtk/dcmimage/include/dirgbpxt.h	2010-10-14 17:16:30.000000000 +0400
+++ dcmtk/dcmimage/include/dirgbpxt.h	2012-06-08 20:11:05.988298185 +0400
@@ -87,7 +87,7 @@
                  const unsigned long planeSize,
                  const int bits)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             // use the number of input pixels derived from the length of the 'PixelData'
             // attribute), but not more than the size of the intermediate buffer
--- dcmtk/dcmimage/include/diybrpxt.h	2010-10-14 17:16:30.000000000 +0400
+++ dcmtk/dcmimage/include/diybrpxt.h	2012-06-08 20:11:45.316297345 +0400
@@ -91,7 +91,7 @@
                  const int bits,
                  const OFBool rgb)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             const T1 offset = OFstatic_cast(T1, DicomImageClass::maxval(bits - 1));
             // use the number of input pixels derived from the length of the 'PixelData'
--- dcmtk/dcmimage/include/diyf2pxt.h	2010-10-14 17:16:30.000000000 +0400
+++ dcmtk/dcmimage/include/diyf2pxt.h	2012-06-08 20:12:19.882296744 +0400
@@ -95,7 +95,7 @@
                  const int bits,
                  const OFBool rgb)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             const T1 offset = OFstatic_cast(T1, DicomImageClass::maxval(bits - 1));
             register unsigned long i;
--- dcmtk/dcmimage/include/diyp2pxt.h	2010-10-14 17:16:30.000000000 +0400
+++ dcmtk/dcmimage/include/diyp2pxt.h	2012-06-08 20:13:10.632301225 +0400
@@ -91,7 +91,7 @@
     void convert(const T1 *pixel,
                  const int bits)
     {
-        if (Init(pixel))
+        if (this->Init(pixel))
         {
             register T2 *r = this->Data[0];
             register T2 *g = this->Data[1];
--- dcmtk/dcmimgle/include/diflipt.h	2010-10-14 17:16:26.000000000 +0400
+++ dcmtk/dcmimgle/include/diflipt.h	2012-06-08 19:22:38.840297986 +0400
@@ -129,7 +129,7 @@
             else if (vert)
                 flipVert(src, dest);
             else
-                copyPixel(src, dest);
+                this->copyPixel(src, dest);
         }
     }
 
--- dcmtk/dcmimgle/include/dimoflt.h	2010-10-14 17:16:26.000000000 +0400
+++ dcmtk/dcmimgle/include/dimoflt.h	2012-06-08 19:17:52.632300786 +0400
@@ -106,11 +106,11 @@
             if (this->Data != NULL)
             {
                 if (horz && vert)
-                    flipHorzVert(&pixel, &this->Data);
+                    this->flipHorzVert(&pixel, &this->Data);
                 else if (horz)
-                    flipHorz(&pixel, &this->Data);
+                    this->flipHorz(&pixel, &this->Data);
                 else if (vert)
-                    flipVert(&pixel, &this->Data);
+                    this->flipVert(&pixel, &this->Data);
             }
         }
     }
--- dcmtk/dcmimgle/include/dimoipxt.h	2010-10-14 17:16:26.000000000 +0400
+++ dcmtk/dcmimgle/include/dimoipxt.h	2012-06-08 19:19:50.210297466 +0400
@@ -76,10 +76,10 @@
             else if ((this->Modality != NULL) && this->Modality->hasRescaling())
             {
                 rescale(pixel, this->Modality->getRescaleSlope(), this->Modality->getRescaleIntercept());
-                determineMinMax(OFstatic_cast(T3, this->Modality->getMinValue()), OFstatic_cast(T3, this->Modality->getMaxValue()));
+                this->determineMinMax(OFstatic_cast(T3, this->Modality->getMinValue()), OFstatic_cast(T3, this->Modality->getMaxValue()));
             } else {
                 rescale(pixel);                     // "copy" or reference pixel data
-                determineMinMax(OFstatic_cast(T3, this->Modality->getMinValue()), OFstatic_cast(T3, this->Modality->getMaxValue()));
+                this->determineMinMax(OFstatic_cast(T3, this->Modality->getMinValue()), OFstatic_cast(T3, this->Modality->getMaxValue()));
             }
         }
     }
--- dcmtk/dcmimgle/include/dimorot.h	2010-10-14 17:16:26.000000000 +0400
+++ dcmtk/dcmimgle/include/dimorot.h	2012-06-08 19:18:29.177297946 +0400
@@ -105,11 +105,11 @@
             if (this->Data != NULL)
             {
                 if (degree == 90)
-                    rotateRight(&pixel, &(this->Data));
+                    this->rotateRight(&pixel, &(this->Data));
                 else if (degree == 180)
-                    rotateTopDown(&pixel, &(this->Data));
+                    this->rotateTopDown(&pixel, &(this->Data));
                 else if (degree == 270)
-                    rotateLeft(&pixel, &(this->Data));
+                    this->rotateLeft(&pixel, &(this->Data));
             }
         }
     }
--- dcmtk/dcmimgle/include/dimosct.h	2010-10-14 17:16:26.000000000 +0400
+++ dcmtk/dcmimgle/include/dimosct.h	2012-06-08 18:55:53.254300667 +0400
@@ -124,7 +124,7 @@
             {
                 const T value = OFstatic_cast(T, OFstatic_cast(double, DicomImageClass::maxval(bits)) *
                     OFstatic_cast(double, pvalue) / OFstatic_cast(double, DicomImageClass::maxval(WIDTH_OF_PVALUES)));
-                scaleData(&pixel, &this->Data, interpolate, value);
+                this->scaleData(&pixel, &this->Data, interpolate, value);
              }
         }
     }
--- dcmtk/dcmimgle/include/dirotat.h	2010-10-14 17:16:27.000000000 +0400
+++ dcmtk/dcmimgle/include/dirotat.h	2012-06-08 19:23:11.011295866 +0400
@@ -132,7 +132,7 @@
         else if (degree == 270)
             rotateLeft(src, dest);
         else
-            copyPixel(src, dest);
+            this->copyPixel(src, dest);
     }
 
 
--- dcmtk/ofstd/include/ofoset.h	2010-10-14 17:15:50.000000000 +0400
+++ dcmtk/ofstd/include/ofoset.h	2012-06-08 20:32:10.974296904 +0400
@@ -146,7 +146,7 @@
       {
         // if size equals num, we need more space
         if( this->size == this->num )
-          Resize( this->size * 2 );
+          this->Resize( this->size * 2 );
 
         // copy item
         T *newItem = new T( item );
@@ -189,7 +189,7 @@
         {
           // if size equals num, we need more space
           if( this->size == this->num )
-            Resize( this->size * 2 );
+            this->Resize( this->size * 2 );
 
           // copy item
           T *newItem = new T( item );
--- dcmtk/dcmimgle/include/discalet.h.orig	2006-03-08 10:25:21.000000000 +0100
+++ dcmtk/dcmimgle/include/discalet.h	2012-12-13 10:07:11.000000000 +0100
@@ -201,17 +201,17 @@
                     ofConsole.unlockCerr();
                 }
 #endif
-                fillPixel(dest, value);                                         // ... fill bitmap
+                this->fillPixel(dest, value);                                         // ... fill bitmap
             }
             else if ((this->Src_X == this->Dest_X) && (this->Src_Y == this->Dest_Y))                    // no scaling
             {
                 if ((Left == 0) && (Top == 0) && (Columns == this->Src_X) && (Rows == this->Src_Y))
-                    copyPixel(src, dest);                                       // copying
+                    this->copyPixel(src, dest);                                       // copying
                 else if ((Left >= 0) && (OFstatic_cast(Uint16, Left + this->Src_X) <= Columns) &&
                          (Top >= 0) && (OFstatic_cast(Uint16, Top + this->Src_Y) <= Rows))
-                    clipPixel(src, dest);                                       // clipping
+                    this->clipPixel(src, dest);                                       // clipping
                 else
-                    clipBorderPixel(src, dest, value);                          // clipping (with border)
+                    this->clipBorderPixel(src, dest, value);                          // clipping (with border)
             }
             else if ((interpolate == 1) && (this->Bits <= MAX_INTERPOLATION_BITS))    // interpolation (pbmplus)
                 interpolatePixel(src, dest);
@@ -224,7 +224,7 @@
             else if ((this->Src_X % this->Dest_X == 0) && (this->Src_Y % this->Dest_Y == 0))            // supression
                 suppressPixel(src, dest);
             else                                                                // general scaling
-                scalePixel(src, dest);
+                this->scalePixel(src, dest);
         }
     }
 
