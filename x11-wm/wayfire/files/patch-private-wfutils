wf-utils is untagged and has no other consumers. Keep it private to
wayfire package for now.

--- meson.build.orig	2020-08-04 18:56:17 UTC
+++ meson.build
@@ -41,7 +41,7 @@ if not use_system_wfconfig
   wfconfig = subproject('wf-config').get_variable('wfconfig')
 endif
 
-wfutils = subproject('wf-utils').get_variable('wfutils')
+wfutils = subproject('wf-utils', default_options: ['default_library=static']).get_variable('wfutils')
 
 needs_libinotify = ['freebsd', 'dragonfly'].contains(host_machine.system())
 libinotify       = dependency('libinotify', required: needs_libinotify)
--- subprojects/wf-utils/meson.build.orig	2020-05-11 09:28:45 UTC
+++ subprojects/wf-utils/meson.build
@@ -34,9 +34,10 @@ lib_wfutils = library('wf-utils',
     sources,
     dependencies: [],
     include_directories: wfutils_inc,
-    install: true,
+    install: not meson.is_subproject(),
     version: meson.project_version())
 
+if not meson.is_subproject()
 pkgconfig = import('pkgconfig')
 pkgconfig.generate(
     libraries:    lib_wfutils,
@@ -44,6 +45,7 @@ pkgconfig.generate(
     filebase:     meson.project_name(),
     name:         meson.project_name(),
     description: 'Utilities library for Wayfire')
+endif
 
 install_headers([], subdir: 'wayfire/utils')
 
@@ -85,12 +87,14 @@ headers_root = [
 'wayfire/variant.hpp',
 ]
 
+if not meson.is_subproject()
 install_headers(headers_action, subdir: 'wayfire/action')
 install_headers(headers_condition, subdir: 'wayfire/condition')
 install_headers(headers_lexer, subdir: 'wayfire/lexer')
 install_headers(headers_parser, subdir: 'wayfire/parser')
 install_headers(headers_rule, subdir: 'wayfire/rule')
 install_headers(headers_root, subdir: 'wayfire')
+endif
 
 # -------------------------------------------------------------------------------------------------
 # Unit tests
