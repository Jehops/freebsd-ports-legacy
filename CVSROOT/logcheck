#! /usr/bin/perl -w
#
# $FreeBSD$
# 
# This hack is to sanitise the results of what the user may have
# "done" while editing the commit log message.. :-)   Peter Wemm.
#
# Note: this uses an enhancement to cvs's verifymsg functionality.
# Normally, the check is advisory only, the FreeBSD version reads
# back the file after the verifymsg file so that this script can
# make changes.
#

use strict;


############################################################
#
# Configurable options
#
############################################################

# These are the optional headers that can be filled at the end of
# each commit message.  The associated value is a regular-expression
# that is used to type-check the entered value.  If the match failed
# then the commit is rejected.  (See rcstemplate).
my %HEADERS = (
	"Reviewed by"		=> "",
	"Submitted by"		=> "",
	"Obtained from"		=> "",
	"Approved by"		=> "",
	"PR"			=> "",
	"MFC after"		=> '[\d]+( (days|weeks))?'
);



#############################################################
#
# Main Body
#
############################################################

my $filename = shift;
die "Usage: logcheck filename\n" unless $filename;




# Read the log file in, stripping 'CVS:' lines and removing trailing
# white spaces.
open IN, "< $filename" or
    die "logcheck: Cannot open for reading: $filename: $!\n";
my @log_in = map { s/^(.*?)\s*$/$1/; $1 } grep { !/^CVS:/ } <IN>;
close IN;

# Remove leading, trailing and duplicate blank lines.
my $i = 0;
while ($i < scalar(@log_in)) {
	unless ($log_in[$i] or $log_in[$i + 1]) {
		splice(@log_in, $i, 1);
		next;
        }
        ++$i;
}
shift @log_in unless $log_in[0];

# Filter out blank templated entries, and type check if necessary.
# (looking from the end of the commit message backwards)
my $j = scalar(@log_in) - 1;
while ($j >= 0  and  my $header = $log_in[$j]) {
	--$j;

	if ($header =~ /^(.*?):\s*(.*)$/) {
		my $header = $1;
		my $value = $2;
		my $pattern = $HEADERS{$header};

		# Warn and ignore unrecognised headers.
		unless (defined($pattern)) {
			print "Warning: unrecognised header: $header\n";
			next;
		}

		# Skip the header if it's blank.
		unless ($value) {
			splice(@log_in, $j + 1, 1);
			next;
		}

		# Type check the header
		unless ($value =~ /^$pattern$/) {
			print "Parse error in header ($header)\n";
			exit 1;
		}

	} else {
		print "Malformed line in with headers: $header\n";
		exit 1;
	}
}


# Write the modified log file back out.
my $tmpfile = $filename . "tmp";
open OUT, "> $tmpfile" or
    die "logcheck: Cannot open for writing: $tmpfile: $!\n";
print OUT map { "$_\n" } @log_in;
close OUT;


# Nuke likely editor backups.
unlink "$filename.~";
unlink "$filename.bak";

rename($tmpfile, $filename) or
    die "logcheck: Could not rename $tmpfile to $filename: $!";

exit 0;
