#! /usr/bin/perl -w
#
# $FreeBSD$
# 
# This hack is to sanitise the results of what the user may have
# "done" while editing the commit log message.. :-)   Peter Wemm.
#
# Note: this uses an enhancement to cvs's verifymsg functionality.
# Normally, the check is advisory only, the FreeBSD version reads
# back the file after the verifymsg file so that this script can
# make changes.
#

use strict;

my $filename = shift;
die "Usage: logcheck filename\n" unless $filename;
my $tmpfile = $filename . "tmp";

open(IN, "< $filename") ||
	die "logcheck: Cannot open for reading: $filename: $!\n";

open(OUT, "> $tmpfile") ||
	die "logcheck: Cannot open for writing: $tmpfile: $!\n";



# Read the log file in, stripping 'CVS:' lines and removing trailing
# white spaces.
my @log_in = map { s/^(.*)\s*$/$1/; $1 } grep { !/^CVS:/ } <IN>;

# Remove leading, trailing and duplicate blank lines.
my $i = 0;
while ($i < scalar(@log_in)) {
	unless ($log_in[$i] or $log_in[$i + 1]) {
		splice(@log_in, $i, 1);
		next;
        }
        ++$i;
}
shift @log_in unless $log_in[0];

# Filter out blank templated entries, and type check if necessary.
foreach (@log_in) {
	# Delete if they only have whitespace after them.
	if (/^Reviewed by:$/i ||
	    /^Submitted by:$/i ||
	    /^Obtained from:$/i ||
	    /^Approved by:$/i ||
	    /^PR:$/i) {
		next;
	}

	# Special handling for type checking the 'MFC after' field.
	if (/^MFC after:\s*(.*)$/) {
		# Ignore it if no value was filled in.
		next unless $1;

		unless ($1 =~ /[\d]+ (days?|weeks?)$/) {
			print "Parse error in 'MFC after:'\n";
			exit 1;
		}
	}

	print OUT "$_\n";
}
close IN;
close OUT;

# Nuke likely editor backups.
unlink "$filename.~";
unlink "$filename.bak";

rename("$tmpfile", "$filename") ||
	die "logcheck: Could not rename $tmpfile to $filename: $!";

exit 0;
