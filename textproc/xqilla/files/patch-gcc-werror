--- ./include/xqilla/runtime/ResultImpl.hpp.orig	2011-08-12 09:38:56.000000000 +0200
+++ ./include/xqilla/runtime/ResultImpl.hpp	2011-08-12 09:50:47.000000000 +0200
@@ -58,7 +58,7 @@
   Result *resultPointer_;
 
 private:
-  ResultImpl(const ResultImpl &) {};
+  ResultImpl(const ResultImpl &) : LocationInfo() {};
   ResultImpl &operator=(const ResultImpl &) { return *this; };
 };
 
--- include/xqilla/events/EventSerializer.hpp.orig	2011-08-12 09:54:35.000000000 +0200
+++ include/xqilla/events/EventSerializer.hpp	2011-08-12 09:54:51.000000000 +0200
@@ -37,7 +37,9 @@
                   XERCES_CPP_NAMESPACE_QUALIFIER XMLPlatformUtils::fgMemoryManager);
   ~EventSerializer();
 
-  virtual void setLocationInfo(const LocationInfo *location) {}
+  virtual void setLocationInfo(const LocationInfo *location) {
+	  (void) location;
+  }
 
   virtual void startDocumentEvent(const XMLCh *documentURI, const XMLCh *encoding);
   virtual void endDocumentEvent();
--- ./include/xqilla/simple-api/XQillaConfiguration.hpp.orig	2011-08-12 09:56:32.000000000 +0200
+++ ./include/xqilla/simple-api/XQillaConfiguration.hpp	2011-08-12 09:56:51.000000000 +0200
@@ -52,9 +52,13 @@
 
   virtual URIResolver *createDefaultURIResolver(XERCES_CPP_NAMESPACE_QUALIFIER MemoryManager *memMgr) = 0;
 
-  virtual void populateStaticContext(StaticContext *context) {}
+  virtual void populateStaticContext(StaticContext *context) {
+	  (void) context;
+  }
 
-  virtual void populateDynamicContext(DynamicContext *context) {}
+  virtual void populateDynamicContext(DynamicContext *context) {
+	  (void) context;
+  }
 
   virtual void testInterrupt() {}
 };
--- include/xqilla/events/EventHandler.hpp.orig	2010-01-13 16:40:36.000000000 +0100
+++ include/xqilla/events/EventHandler.hpp	2011-08-12 10:12:55.000000000 +0200
@@ -35,7 +35,9 @@
 
   /** Recieves a LocationInfo object that is owned by the caller, and will be
       updated with the current location information as the parse progresses. */
-  virtual void setLocationInfo(const LocationInfo *location) {}
+  virtual void setLocationInfo(const LocationInfo *location) {
+	  (void) location;
+  }
 
   /** Handles a document node as an event */
   virtual void startDocumentEvent(const XMLCh *documentURI, const XMLCh *encoding) = 0;
@@ -61,7 +63,12 @@
   virtual void namespaceEvent(const XMLCh *prefix, const XMLCh *uri) = 0;
   /** Handles an atomic item as an event */
   virtual void atomicItemEvent(AnyAtomicType::AtomicObjectType type, const XMLCh *value,
-                               const XMLCh *typeURI, const XMLCh *typeName) {}
+                               const XMLCh *typeURI, const XMLCh *typeName) {
+	  (void) type;
+	  (void) value;
+	  (void) typeURI;
+	  (void) typeName;
+  }
   /** Called when all events have been reported */
   virtual void endEvent() = 0;
 };
