--- plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeAnnotationProcessorManager.java.orig	2007-06-26 04:57:46.000000000 +0900
+++ plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeAnnotationProcessorManager.java	2007-08-28 23:33:18.000000000 +0900
@@ -82,7 +82,7 @@
 	 * If this project has a ProcessorPath defined, use it.  Else, construct
 	 * one from the classpath.
 	 */
-	@Override
+	//@Override
 	public ProcessorInfo discoverNextProcessor() {
 		// _processorIter gets initialized the first time through processAnnotations()
 		if (_processorIter.hasNext()) {
@@ -103,7 +103,7 @@
 		return null;
 	}
 
-	@Override
+    //@Override
 	public void reportProcessorException(Processor p, Exception e) {
 		Apt6Plugin.log(e, "Exception thrown by Java annotation processor " + p); //$NON-NLS-1$
 	}

--- plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java.orig	2007-06-26 04:57:27.000000000 +0900
+++ plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java	2007-08-29 05:58:47.000000000 +0900
@@ -57,7 +57,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.ProcessingEnvironment#getLocale()
 	 */
-	@Override
+	//@Override
 	public Locale getLocale() {
 		return Locale.getDefault();
 	}

--- plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java.orig	2007-06-26 04:57:06.000000000 +0900
+++ plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java	2007-08-29 05:59:29.000000000 +0900
@@ -45,7 +45,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#createClassFile(java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public JavaFileObject createClassFile(CharSequence name, Element... originatingElements)
 			throws IOException {
 		//TODO
@@ -55,7 +55,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public FileObject createResource(Location location, CharSequence pkg,
 			CharSequence relativeName, Element... originatingElements) throws IOException {
 		// TODO Auto-generated method stub
@@ -67,7 +67,7 @@
 	 * will be ignored.
 	 * @see javax.annotation.processing.Filer#createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public JavaFileObject createSourceFile(CharSequence name, Element... originatingElements)
 			throws IOException 
 	{
@@ -84,7 +84,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public FileObject getResource(Location location, CharSequence pkg, CharSequence relativeName)
 			throws IOException {
 		// TODO Auto-generated method stub

--- plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaFileObject.java.orig	2007-06-26 04:57:50.000000000 +0900
+++ plugins/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaFileObject.java	2007-08-28 23:32:14.000000000 +0900
@@ -48,7 +48,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.JavaFileObject#getAccessLevel()
 	 */
-	@Override
+	//@Override
 	public Modifier getAccessLevel() {
 		// TODO Auto-generated method stub
 		return null;
@@ -57,7 +57,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.JavaFileObject#getKind()
 	 */
-	@Override
+	//@Override
 	public Kind getKind() {
 		// TODO Auto-generated method stub
 		return null;
@@ -66,7 +66,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.JavaFileObject#getNestingKind()
 	 */
-	@Override
+	//@Override
 	public NestingKind getNestingKind() {
 		// TODO Auto-generated method stub
 		return null;
@@ -75,7 +75,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.JavaFileObject#isNameCompatible(java.lang.String, javax.tools.JavaFileObject.Kind)
 	 */
-	@Override
+	//@Override
 	public boolean isNameCompatible(String simpleName, Kind kind) {
 		// TODO Auto-generated method stub
 		return false;
@@ -84,7 +84,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#delete()
 	 */
-	@Override
+	//@Override
 	public boolean delete() {
 		throw new UnsupportedOperationException();
 	}
@@ -92,7 +92,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#getCharContent(boolean)
 	 */
-	@Override
+	//@Override
 	public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
 		// TODO Auto-generated method stub
 		return null;
@@ -101,7 +101,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#getLastModified()
 	 */
-	@Override
+	//@Override
 	public long getLastModified() {
 		// TODO Auto-generated method stub
 		return 0;
@@ -110,7 +110,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#getName()
 	 */
-	@Override
+	//@Override
 	public String getName() {
 		// TODO Auto-generated method stub
 		return null;
@@ -119,7 +119,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#openInputStream()
 	 */
-	@Override
+	//@Override
 	public InputStream openInputStream() throws IOException {
 		throw new UnsupportedOperationException();
 	}
@@ -127,7 +127,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#openOutputStream()
 	 */
-	@Override
+	//@Override
 	public OutputStream openOutputStream() throws IOException {
 		// TODO Auto-generated method stub
 		return null;
@@ -136,7 +136,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#openReader(boolean)
 	 */
-	@Override
+	//@Override
 	public Reader openReader(boolean ignoreEncodingErrors) throws IOException {
 		throw new UnsupportedOperationException();
 	}
@@ -144,7 +144,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#openWriter()
 	 */
-	@Override
+	//@Override
 	public Writer openWriter() throws IOException {
 		return new IdeJavaSourceFileWriter(_env, _name, _parentFiles);
 	}
@@ -152,7 +152,7 @@
 	/* (non-Javadoc)
 	 * @see javax.tools.FileObject#toUri()
 	 */
-	@Override
+	//@Override
 	public URI toUri() {
 		// TODO Auto-generated method stub
 		return null;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseAnnotationProcessorManager.java.orig	2007-06-26 04:57:21.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseAnnotationProcessorManager.java	2007-08-28 23:42:50.000000000 +0900
@@ -69,7 +69,7 @@
 		throw new UnsupportedOperationException();
 	}
 
-	@Override
+    //@Override
 	public List<ProcessorInfo> getDiscoveredProcessors() {
 		return _processors;
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java.orig	2007-06-26 04:57:25.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java	2007-08-28 23:45:13.000000000 +0900
@@ -85,27 +85,27 @@
 		return result;
 	}
 
-	@Override
+    //@Override
 	public Elements getElementUtils() {
 		return _elementUtils;
 	}
 
-	@Override
+    //@Override
 	public Filer getFiler() {
 		return _filer;
 	}
 
-	@Override
+    //@Override
 	public Messager getMessager() {
 		return _messager;
 	}
 	
-	@Override
+    //@Override
 	public Map<String, String> getOptions() {
 		return _processorOptions;
 	}
 
-	@Override
+    //@Override
 	public Types getTypeUtils() {
 		return _typeUtils;
 	}
@@ -114,7 +114,7 @@
 		return _compiler.lookupEnvironment;
 	}
 
-	@Override
+    //@Override
 	public SourceVersion getSourceVersion() {
 		// As of this writing, RELEASE_6 is the highest level available.
 		// It is also the lowest level for which this code can possibly

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAnnotationProcessorManager.java.orig	2007-06-26 04:57:14.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAnnotationProcessorManager.java	2007-08-28 23:45:44.000000000 +0900
@@ -93,7 +93,7 @@
 		return result;
 	}
 
-	@Override
+    //@Override
 	public ProcessorInfo discoverNextProcessor() {
 		if (null != _setProcessors) {
 			// If setProcessors() was called, use that list until it's empty and then stop.
@@ -149,7 +149,7 @@
 		return null;
 	}
 
-	@Override
+    //@Override
 	public void reportProcessorException(Processor p, Exception e) {
 		// TODO: if (verbose) report the processor
 		throw new AbortCompilation(null, e);

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchFilerImpl.java.orig	2007-06-26 04:57:18.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchFilerImpl.java	2007-08-28 23:46:41.000000000 +0900
@@ -59,7 +59,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#createClassFile(java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public JavaFileObject createClassFile(CharSequence name,
 			Element... originatingElements) throws IOException 
 	{
@@ -78,7 +78,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#createResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public FileObject createResource(Location location, CharSequence pkg,
 			CharSequence relativeName, Element... originatingElements)
 			throws IOException {
@@ -97,7 +97,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#createSourceFile(java.lang.CharSequence, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public JavaFileObject createSourceFile(CharSequence name,
 			Element... originatingElements) throws IOException {
 		//TODO: do we need to check validity of 'name', or can we trust the filemanager to handle that?
@@ -116,7 +116,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Filer#getResource(javax.tools.JavaFileManager.Location, java.lang.CharSequence, java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public FileObject getResource(Location location, CharSequence pkg,
 			CharSequence relativeName) throws IOException {
 		//TODO: do we need to check validity of 'name', or can we trust the filemanager to handle that?

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java.orig	2007-06-26 04:57:13.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java	2007-08-28 23:47:10.000000000 +0900
@@ -37,7 +37,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public void printMessage(Kind kind, CharSequence msg) {
 		printMessage(kind, msg, null, null, null);
 	}
@@ -45,7 +45,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element)
 	 */
-	@Override
+	//@Override
 	public void printMessage(Kind kind, CharSequence msg, Element e) {
 		printMessage(kind, msg, e, null, null);
 	}
@@ -53,7 +53,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror)
 	 */
-	@Override
+	//@Override
 	public void printMessage(Kind kind, CharSequence msg, Element e,
 			AnnotationMirror a) {
 		printMessage(kind, msg, e, a, null);
@@ -63,7 +63,7 @@
 	/* (non-Javadoc)
 	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror, javax.lang.model.element.AnnotationValue)
 	 */
-	@Override
+	//@Override
 	public void printMessage(Kind kind, CharSequence msg, Element e,
 			AnnotationMirror a, AnnotationValue v) {
 		//TODO: we are currently ignoring 'a' and 'v'

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchProcessingEnvImpl.java.orig	2007-06-26 04:57:18.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchProcessingEnvImpl.java	2007-08-28 23:47:35.000000000 +0900
@@ -136,7 +136,7 @@
 		return _fileManager;
 	}
 
-	@Override
+    //@Override
 	public Locale getLocale() {
 		return _compilerOwner.compilerLocale;
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java.orig	2007-06-26 04:57:27.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/RoundEnvImpl.java	2007-08-29 00:25:34.000000000 +0900
@@ -104,7 +104,7 @@
 		return Collections.unmodifiableSet(_annoToUnit.getKeySet());
 	}
 
-	@Override
+    //@Override
 	public boolean errorRaised()
 	{
 		return _processingEnv.errorRaised();
@@ -116,7 +116,7 @@
 	 * annotation, include those elements that inherit the annotation from their superclasses.
 	 * Note that {@link java.lang.annotations.Inherited} only applies to classes (i.e. TypeElements).
 	 */
-	@Override
+	//@Override
 	public Set<? extends Element> getElementsAnnotatedWith(TypeElement a)
 	{
 		if (a.getKind() != ElementKind.ANNOTATION_TYPE) {
@@ -174,7 +174,7 @@
 		return false;
 	}
 	
-	@Override
+    //@Override
 	public Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a)
 	{
 		String canonicalName = a.getCanonicalName();
@@ -186,7 +186,7 @@
 		return getElementsAnnotatedWith(annoType);
 	}
 
-	@Override
+    //@Override
 	public Set<? extends Element> getRootElements()
 	{
 		if (_rootElements == null) {
@@ -216,7 +216,7 @@
 		return _rootElements;
 	}
 
-	@Override
+    //@Override
 	public boolean processingOver()
 	{
 		return _isLastRound;


--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java.orig	2007-06-26 04:57:25.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java	2007-08-28 23:49:24.000000000 +0900
@@ -149,7 +149,7 @@
 	 * <p>
 	 * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
 	 */
-	@Override
+	//@Override
 	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
 	{
 		if (this._binding == null) return null;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java.orig	2007-06-26 04:57:20.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java	2007-08-28 23:49:52.000000000 +0900
@@ -203,7 +203,7 @@
 	}
 
 	@SuppressWarnings("unchecked") // Need to cast Object _value to a List<AnnotationValue>
-	@Override
+	    //@Override
 	public <R, P> R accept(AnnotationValueVisitor<R, P> v, P p) {
 		switch (_kind) {
 		case TypeIds.T_boolean:
@@ -237,7 +237,7 @@
 		}
 	}
 
-	@Override
+    //@Override
 	public Object getValue() {
 		return _value;
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ArrayTypeImpl.java.orig	2007-06-26 04:57:27.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ArrayTypeImpl.java	2007-08-28 23:50:11.000000000 +0900
@@ -32,7 +32,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.ArrayType#getComponentType()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getComponentType() {
 		return _env.getFactory().newTypeMirror(((ArrayBinding)_binding).elementsType());
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java.orig	2007-06-26 04:57:23.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java	2007-08-28 23:51:01.000000000 +0900
@@ -40,13 +40,13 @@
 		super(env, binding);
 	}
 
-	@Override
+    //@Override
 	public Element asElement() {
 		// The JDT compiler does not distinguish between type elements and declared types
 		return _env.getFactory().newElement((ReferenceBinding)_binding);
 	}
 
-	@Override
+    //@Override
 	public TypeMirror getEnclosingType() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		ReferenceBinding enclosingType = binding.enclosingType();
@@ -59,7 +59,7 @@
 	 * @see javax.lang.model.type.DeclaredType#getTypeArguments()
 	 * @see javax.lang.model.element.TypeElement#getTypeParameters().
 	 */
-	@Override
+	//@Override
 	public List<? extends TypeMirror> getTypeArguments() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		if (binding.isParameterizedType()) {

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java.orig	2007-06-26 04:57:16.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java	2007-08-29 00:26:49.000000000 +0900
@@ -45,13 +45,13 @@
 		_binding = binding;
 	}
 
-	@Override
+    //@Override
 	public TypeMirror asType() {
 		return _env.getFactory().newTypeMirror(_binding);
 	}
 
 	@SuppressWarnings("unchecked") // for cast of newProxyInstance() to A
-	@Override
+	    //@Override
 	public <A extends Annotation> A getAnnotation(Class<A> annotationClass) {
 		AnnotationBinding[] annoInstances = getAnnotationBindings();
 		if( annoInstances == null || annoInstances.length == 0 || annotationClass == null ) 
@@ -88,19 +88,19 @@
 	 */
 	protected abstract AnnotationBinding[] getAnnotationBindings();
 
-	@Override
+    //@Override
 	public List<? extends AnnotationMirror> getAnnotationMirrors() {
 		return _env.getFactory().getAnnotationMirrors(getAnnotationBindings());
 	}
 
-	@Override
+    //@Override
 	public Set<Modifier> getModifiers() {
 		// Most subclasses implement this; this default is appropriate for 
 		// PackageElement and TypeParameterElement.
 		return Collections.emptySet();
 	}
 
-	@Override
+    //@Override
 	public Name getSimpleName() {
 		return new NameImpl(_binding.shortReadableName());
 	}
@@ -134,7 +134,7 @@
 		return _binding.toString();
 	}
 
-	@Override
+    //@Override
 	public String getFileName() {
 		// Subclasses should override and return something of value
 		return null;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java.orig	2007-06-26 04:57:25.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementsImpl.java	2007-08-29 00:27:09.000000000 +0900
@@ -82,7 +82,7 @@
 	 * and the annotation is on a class: e.g., annotations are not inherited for interfaces, methods,
 	 * or fields.
 	 */
-	@Override
+	//@Override
 	public List<? extends AnnotationMirror> getAllAnnotationMirrors(Element e) {
 		// if e is a class, walk up its superclass hierarchy looking for @Inherited annotations not already in the list
 		if (e.getKind() == ElementKind.CLASS && e instanceof TypeElementImpl) {
@@ -130,7 +130,7 @@
 	 * superinterfaces, that are not hidden by a name collision.</li>
 	 * </ul>
 	 */
-	@Override
+	//@Override
 	public List<? extends Element> getAllMembers(TypeElement type) {
 		if (null == type || !(type instanceof TypeElementImpl)) {
 			return Collections.emptyList();
@@ -249,7 +249,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#getBinaryName(javax.lang.model.element.TypeElement)
 	 */
-	@Override
+	//@Override
 	public Name getBinaryName(TypeElement type) {
 		TypeElementImpl typeElementImpl = (TypeElementImpl) type;
 		ReferenceBinding referenceBinding = (ReferenceBinding) typeElementImpl._binding;
@@ -260,7 +260,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#getConstantExpression(java.lang.Object)
 	 */
-	@Override
+	//@Override
 	public String getConstantExpression(Object value) {
 		if (!(value instanceof Integer)
 				&& !(value instanceof Byte)
@@ -284,7 +284,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#getDocComment(javax.lang.model.element.Element)
 	 */
-	@Override
+	//@Override
 	public String getDocComment(Element e) {
 		char[] unparsed = getUnparsedDocComment(e);
 		return formatJavadoc(unparsed);
@@ -429,7 +429,7 @@
 	 *         returns the explicitly set values.
 	 * @see javax.lang.model.util.Elements#getElementValuesWithDefaults(javax.lang.model.element.AnnotationMirror)
 	 */
-	@Override
+	//@Override
 	public Map<? extends ExecutableElement, ? extends AnnotationValue> getElementValuesWithDefaults(
 			AnnotationMirror a) {
 		return ((AnnotationMirrorImpl)a).getElementValuesWithDefaults();
@@ -438,12 +438,12 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#getName(java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public Name getName(CharSequence cs) {
 		return new NameImpl(cs);
 	}
 
-	@Override
+    //@Override
 	public PackageElement getPackageElement(CharSequence name) {
 		LookupEnvironment le = _env.getLookupEnvironment();
 		if (name.length() == 0) {
@@ -457,7 +457,7 @@
 		return new PackageElementImpl(_env, packageBinding);
 	}
 
-	@Override
+    //@Override
 	public PackageElement getPackageOf(Element type) {
 		switch(type.getKind()) {
 			case ANNOTATION_TYPE :
@@ -498,7 +498,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#getTypeElement(java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public TypeElement getTypeElement(CharSequence name) {
 		LookupEnvironment le = _env.getLookupEnvironment();
 		final char[][] compoundName = CharOperation.splitOn('.', name.toString().toCharArray());
@@ -538,7 +538,7 @@
 	 * See JLS 8.3 (for hiding of fields), 8.4.8.2 (hiding of class methods), and 8.5 (for hiding of member types).
 	 * @see javax.lang.model.util.Elements#hides(javax.lang.model.element.Element, javax.lang.model.element.Element)
 	 */
-	@Override
+	//@Override
 	public boolean hides(Element hider, Element hidden) {
 		if (hidden == null) {
 			// required by API spec
@@ -550,7 +550,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#isDeprecated(javax.lang.model.element.Element)
 	 */
-	@Override
+	//@Override
 	public boolean isDeprecated(Element e) {
 		if (!(e instanceof ElementImpl)) {
 			return false;
@@ -562,7 +562,7 @@
 	 * See JLS 8.4.8.1 for discussion of hiding of methods
 	 * @see javax.lang.model.util.Elements#overrides(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement, javax.lang.model.element.TypeElement)
 	 */
-	@Override
+	//@Override
 	public boolean overrides(ExecutableElement overrider, ExecutableElement overridden,
 			TypeElement type) {
 		if (overridden == null || type == null) {
@@ -574,7 +574,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.util.Elements#printElements(java.io.Writer, javax.lang.model.element.Element[])
 	 */
-	@Override
+	//@Override
 	public void printElements(Writer w, Element... elements) {
 		String lineSeparator = System.getProperty("line.separator"); //$NON-NLS-1$
 		for (Element element : elements) {

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java.orig	2007-06-26 04:57:18.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java	2007-08-28 23:56:24.000000000 +0900
@@ -53,7 +53,7 @@
 		super(env, binding);
 	}
 
-	@Override
+    //@Override
 	public <R, P> R accept(ElementVisitor<R, P> v, P p)
 	{
 		return v.visitExecutable(this, p);
@@ -65,7 +65,7 @@
 		return ((MethodBinding)_binding).getAnnotations();
 	}
 
-	@Override
+    //@Override
 	public AnnotationValue getDefaultValue() {
 		MethodBinding binding = (MethodBinding)_binding;
 		Object defaultValue = binding.getDefaultValue();
@@ -73,12 +73,12 @@
 		return null;
 	}
 	
-	@Override
+    //@Override
 	public List<? extends Element> getEnclosedElements() {
 		return Collections.emptyList();
 	}
 
-	@Override
+    //@Override
 	public Element getEnclosingElement() {
 		MethodBinding binding = (MethodBinding)_binding;
 		if (null == binding.declaringClass) {
@@ -96,7 +96,7 @@
 		return new String(name);
 	}
 
-	@Override
+    //@Override
 	public ElementKind getKind() {
 		MethodBinding binding = (MethodBinding)_binding;
 		if (binding.isConstructor()) {
@@ -129,7 +129,7 @@
 		return _env.getFactory().newPackageElement(binding.declaringClass.fPackage);
 	}
 
-	@Override
+    //@Override
 	public List<? extends VariableElement> getParameters() {
 		MethodBinding binding = (MethodBinding)_binding;
 		int length = binding.parameters == null ? 0 : binding.parameters.length;
@@ -191,7 +191,7 @@
 		return Collections.emptyList();
 	}
 
-	@Override
+    //@Override
 	public TypeMirror getReturnType() {
 		MethodBinding binding = (MethodBinding)_binding;
 		if (binding.returnType == null) {
@@ -209,7 +209,7 @@
 		return _name;
 	}
 	
-	@Override
+    //@Override
 	public List<? extends TypeMirror> getThrownTypes() {
 		MethodBinding binding = (MethodBinding)_binding;
 		if (binding.thrownExceptions.length == 0) {
@@ -222,7 +222,7 @@
 		return list;
 	}
 
-	@Override
+    //@Override
 	public List<? extends TypeParameterElement> getTypeParameters() {
 		MethodBinding binding = (MethodBinding)_binding;
 		TypeVariableBinding[] variables = binding.typeVariables();
@@ -265,7 +265,7 @@
 		return null != hiderBinding.declaringClass.findSuperTypeWithSameErasure(hiddenBinding.declaringClass); 
 	}
 
-	@Override
+    //@Override
 	public boolean isVarArgs() {
 		return ((MethodBinding) _binding).isVarargs();
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java.orig	2007-06-26 04:57:13.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableTypeImpl.java	2007-08-28 23:57:06.000000000 +0900
@@ -40,7 +40,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.ExecutableType#getParameterTypes()
 	 */
-	@Override
+	//@Override
 	public List<? extends TypeMirror> getParameterTypes() {
 		MethodBinding binding = (MethodBinding) this._binding;
 		TypeBinding[] parameters = binding.parameters;
@@ -72,7 +72,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.ExecutableType#getReturnType()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getReturnType() {
 		return _env.getFactory().newTypeMirror(((MethodBinding) this._binding).returnType);
 	}
@@ -80,7 +80,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.ExecutableType#getThrownTypes()
 	 */
-	@Override
+	//@Override
 	public List<? extends TypeMirror> getThrownTypes() {
 		ArrayList<TypeMirror> list = new ArrayList<TypeMirror>();
 		ReferenceBinding[] thrownExceptions = ((MethodBinding) this._binding).thrownExceptions;
@@ -95,7 +95,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.ExecutableType#getTypeVariables()
 	 */
-	@Override
+	//@Override
 	public List<? extends TypeVariable> getTypeVariables() {
 		ArrayList<TypeVariable> list = new ArrayList<TypeVariable>();
 		TypeVariableBinding[] typeVariables = ((MethodBinding) this._binding).typeVariables();

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NameImpl.java.orig	2007-06-26 04:57:04.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NameImpl.java	2007-08-28 23:57:47.000000000 +0900
@@ -41,7 +41,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.element.Name#contentEquals(java.lang.CharSequence)
 	 */
-	@Override
+	//@Override
 	public boolean contentEquals(CharSequence cs) {
 		return _name.equals(cs.toString());
 	}
@@ -49,7 +49,7 @@
 	/* (non-Javadoc)
 	 * @see java.lang.CharSequence#charAt(int)
 	 */
-	@Override
+	//@Override
 	public char charAt(int index) {
 		return _name.charAt(index);
 	}
@@ -57,7 +57,7 @@
 	/* (non-Javadoc)
 	 * @see java.lang.CharSequence#length()
 	 */
-	@Override
+	//@Override
 	public int length() {
 		return _name.length();
 	}
@@ -65,7 +65,7 @@
 	/* (non-Javadoc)
 	 * @see java.lang.CharSequence#subSequence(int, int)
 	 */
-	@Override
+	//@Override
 	public CharSequence subSequence(int start, int end) {
 		return _name.subSequence(start, end);
 	}

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java.orig	2007-06-26 04:57:03.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java	2007-08-28 23:58:09.000000000 +0900
@@ -33,7 +33,7 @@
 		_kind = kind;
 	}
 
-	@Override
+    //@Override
 	public <R, P> R accept(TypeVisitor<R, P> v, P p)
 	{
 		switch(this.getKind())
@@ -45,7 +45,7 @@
 		}
 	}
 
-	@Override
+    //@Override
 	public TypeKind getKind()
 	{
 		return _kind;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/PackageElementImpl.java.orig	2007-06-26 04:57:20.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/PackageElementImpl.java	2007-08-28 23:59:06.000000000 +0900
@@ -42,7 +42,7 @@
 		super(env, binding);
 	}
 	
-	@Override
+    //@Override
 	public <R, P> R accept(ElementVisitor<R, P> v, P p)
 	{
 		return v.visitPackage(this, p);
@@ -61,7 +61,7 @@
 		return annotations;
 	}
 
-	@Override
+    //@Override
 	public List<? extends Element> getEnclosedElements() {
 		PackageBinding binding = (PackageBinding)_binding;
 		LookupEnvironment environment = binding.environment;
@@ -84,13 +84,13 @@
 		return Collections.unmodifiableList(list);
 	}
 
-	@Override
+    //@Override
 	public Element getEnclosingElement() {
 		// packages have no enclosing element
 		return null;
 	}
 
-	@Override
+    //@Override
 	public ElementKind getKind() {
 		return ElementKind.PACKAGE;
 	}
@@ -111,12 +111,12 @@
 		return new NameImpl(compoundName[length - 1]);
 	}
 
-	@Override
+    //@Override
 	public Name getQualifiedName() {
 		return new NameImpl(CharOperation.concatWith(((PackageBinding)_binding).compoundName, '.'));
 	}
 
-	@Override
+    //@Override
 	public boolean isUnnamed() {
 		PackageBinding binding = (PackageBinding)_binding;
 		return binding.compoundName == CharOperation.NO_CHAR_CHAR;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java.orig	2007-06-26 04:57:11.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeElementImpl.java	2007-08-29 00:27:50.000000000 +0900
@@ -50,7 +50,7 @@
 		super(env, binding);
 	}
 	
-	@Override
+    //@Override
 	public <R, P> R accept(ElementVisitor<R, P> v, P p)
 	{
 		return v.visitType(this, p);
@@ -62,7 +62,7 @@
 		return ((ReferenceBinding)_binding).getAnnotations();
 	}
 
-	@Override
+    //@Override
 	public List<? extends Element> getEnclosedElements() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		List<Element> enclosed = new ArrayList<Element>(binding.fieldCount() + binding.methods().length);
@@ -84,7 +84,7 @@
 		return Collections.unmodifiableList(enclosed);
 	}
 
-	@Override
+    //@Override
 	public Element getEnclosingElement() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		ReferenceBinding enclosingType = binding.enclosingType();
@@ -105,7 +105,7 @@
 		return new String(name);
 	}
 	
-	@Override
+    //@Override
 	public List<? extends TypeMirror> getInterfaces() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		if (null == binding.superInterfaces() || binding.superInterfaces().length == 0) {
@@ -119,7 +119,7 @@
 		return Collections.unmodifiableList(interfaces);
 	}
 
-	@Override
+    //@Override
 	public ElementKind getKind() {
 		ReferenceBinding refBinding = (ReferenceBinding)_binding;
 		// The order of these comparisons is important: e.g., enum is subset of class
@@ -152,7 +152,7 @@
 		return Factory.getModifiers(modifiers, getKind(), refBinding.isBinaryBinding());
 	}
 
-	@Override
+    //@Override
 	public NestingKind getNestingKind() {
 		ReferenceBinding refBinding = (ReferenceBinding)_binding;
 		if (refBinding.isAnonymousType()) {
@@ -172,7 +172,7 @@
 		return _env.getFactory().newPackageElement((PackageBinding)binding.fPackage);
 	}
 
-	@Override
+    //@Override
 	public Name getQualifiedName() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		char[] qName;
@@ -197,7 +197,7 @@
 		return new NameImpl(binding.sourceName());
 	}
 
-	@Override
+    //@Override
 	public TypeMirror getSuperclass() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		ReferenceBinding superBinding = binding.superclass();
@@ -208,7 +208,7 @@
 		return _env.getFactory().newDeclaredType(superBinding);
 	}
 	
-	@Override
+    //@Override
 	public List<? extends TypeParameterElement> getTypeParameters() {
 		ReferenceBinding binding = (ReferenceBinding)_binding;
 		TypeVariableBinding[] variables = binding.typeVariables();

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java.orig	2007-06-26 04:57:01.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java	2007-08-29 00:01:06.000000000 +0900
@@ -42,7 +42,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.TypeMirror#accept(javax.lang.model.type.TypeVisitor, java.lang.Object)
 	 */
-	@Override
+	//@Override
 	public <R, P> R accept(TypeVisitor<R, P> v, P p) {
 		return v.visit(this, p);
 	}
@@ -50,7 +50,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.TypeMirror#getKind()
 	 */
-	@Override
+	//@Override
 	public TypeKind getKind() {
 		switch (_binding.kind()) {
 		// case Binding.TYPE: 

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeParameterElementImpl.java.orig	2007-06-26 04:57:16.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeParameterElementImpl.java	2007-08-29 00:02:15.000000000 +0900
@@ -49,7 +49,7 @@
 		_declaringElement = _env.getFactory().newElement(binding.declaringElement);
 	}
 
-	@Override
+    //@Override
 	public List<? extends TypeMirror> getBounds()
 	{
 		if (null == _bounds) {
@@ -104,13 +104,13 @@
 		return Collections.unmodifiableList(typeBounds);
 	}
 
-	@Override
+    //@Override
 	public Element getGenericElement()
 	{
 		return _declaringElement;
 	}
 
-	@Override
+    //@Override
 	public <R, P> R accept(ElementVisitor<R, P> v, P p)
 	{
 		return v.visitTypeParameter(this, p);
@@ -132,7 +132,7 @@
 	 * Always return an empty list; type parameters do not enclose other elements.
 	 * @see javax.lang.model.element.Element#getEnclosedElements()
 	 */
-	@Override
+	//@Override
 	public List<? extends Element> getEnclosedElements()
 	{
 		return Collections.emptyList();
@@ -143,13 +143,13 @@
 	 * Always return null.
 	 * @see javax.lang.model.element.Element#getEnclosingElement()
 	 */
-	@Override
+	//@Override
 	public Element getEnclosingElement()
 	{
 		return null;
 	}
 
-	@Override
+    //@Override
 	public ElementKind getKind()
 	{
 		return ElementKind.TYPE_PARAMETER;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeVariableImpl.java.orig	2007-06-26 04:57:03.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeVariableImpl.java	2007-08-29 00:02:53.000000000 +0900
@@ -34,7 +34,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.TypeVariable#asElement()
 	 */
-	@Override
+	//@Override
 	public Element asElement() {
 		return _env.getFactory().newElement(this._binding);
 	}
@@ -42,7 +42,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.TypeVariable#getLowerBound()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getLowerBound() {
 		// TODO might be more complex than this
 		return this._env.getFactory().getNullType();
@@ -51,7 +51,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.TypeVariable#getUpperBound()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getUpperBound() {
 		TypeVariableBinding typeVariableBinding = (TypeVariableBinding) this._binding;
 		TypeBinding firstBound = typeVariableBinding.firstBound;

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java.orig	2007-06-26 04:57:13.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java	2007-08-29 00:28:18.000000000 +0900
@@ -59,7 +59,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#asElement(javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public Element asElement(TypeMirror t) {
         switch(t.getKind()) {
             case DECLARED :
@@ -72,7 +72,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#asMemberOf(javax.lang.model.type.DeclaredType, javax.lang.model.element.Element)
      */
-    @Override
+    //@Override
     public TypeMirror asMemberOf(DeclaredType containing, Element element) {
         // TODO Auto-generated method stub
 //        throw new UnsupportedOperationException("NYI: TypesImpl.asMemberOf(" + containing + ", " + element + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
@@ -126,7 +126,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#boxedClass(javax.lang.model.type.PrimitiveType)
      */
-    @Override
+    //@Override
     public TypeElement boxedClass(PrimitiveType p) {
         PrimitiveTypeImpl primitiveTypeImpl = (PrimitiveTypeImpl) p;
         BaseTypeBinding baseTypeBinding = (BaseTypeBinding)primitiveTypeImpl._binding;
@@ -137,7 +137,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#capture(javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public TypeMirror capture(TypeMirror t) {
         // TODO Auto-generated method stub
         throw new UnsupportedOperationException("NYI: TypesImpl.capture(...)"); //$NON-NLS-1$
@@ -146,7 +146,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#contains(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public boolean contains(TypeMirror t1, TypeMirror t2) {
     	switch(t1.getKind()) {
     		case EXECUTABLE :
@@ -165,7 +165,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#directSupertypes(javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public List<? extends TypeMirror> directSupertypes(TypeMirror t) {
         switch(t.getKind()) {
             case PACKAGE :
@@ -192,7 +192,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#erasure(javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public TypeMirror erasure(TypeMirror t) {
         TypeMirrorImpl typeMirrorImpl = (TypeMirrorImpl) t;
         Binding binding = typeMirrorImpl._binding;
@@ -206,7 +206,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getArrayType(javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public ArrayType getArrayType(TypeMirror componentType) {
         TypeMirrorImpl typeMirrorImpl = (TypeMirrorImpl) componentType;
         TypeBinding typeBinding = (TypeBinding) typeMirrorImpl._binding;
@@ -218,7 +218,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror[])
      */
-    @Override
+    //@Override
     public DeclaredType getDeclaredType(TypeElement typeElem, TypeMirror... typeArgs) {
         int typeArgsLength = typeArgs.length;
         TypeElementImpl typeElementImpl = (TypeElementImpl) typeElem;
@@ -250,7 +250,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getDeclaredType(javax.lang.model.type.DeclaredType, javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror[])
      */
-    @Override
+    //@Override
     public DeclaredType getDeclaredType(DeclaredType containing, TypeElement typeElem,
             TypeMirror... typeArgs) {
         int typeArgsLength = typeArgs.length;
@@ -283,7 +283,7 @@
                 this._env.getLookupEnvironment().createParameterizedType(referenceBinding, typeArguments, enclosingType));
     }
 
-    @Override
+    //@Override
     public NoType getNoType(TypeKind kind) {
         return _env.getFactory().getNoType(kind);
     }
@@ -291,7 +291,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getNullType()
      */
-    @Override
+    //@Override
     public NullType getNullType() {
         return _env.getFactory().getNullType();
     }
@@ -299,7 +299,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getPrimitiveType(javax.lang.model.type.TypeKind)
      */
-    @Override
+    //@Override
     public PrimitiveType getPrimitiveType(TypeKind kind) {
         return _env.getFactory().getPrimitiveType(kind);
     }
@@ -307,7 +307,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#getWildcardType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public WildcardType getWildcardType(TypeMirror extendsBound, TypeMirror superBound) {
         if (extendsBound != null && superBound != null) {
             throw new IllegalArgumentException("Extends and super bounds cannot be set at the same time"); //$NON-NLS-1$
@@ -343,7 +343,7 @@
     /**
      * @return true if a value of type t1 can be assigned to a variable of type t2, i.e., t2 = t1.
      */
-    @Override
+    //@Override
     public boolean isAssignable(TypeMirror t1, TypeMirror t2) {
         if (!(t1 instanceof TypeMirrorImpl) || !(t2 instanceof TypeMirrorImpl)) {
             return false;
@@ -365,7 +365,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#isSameType(javax.lang.model.type.TypeMirror, javax.lang.model.type.TypeMirror)
      */
-    @Override
+    //@Override
     public boolean isSameType(TypeMirror t1, TypeMirror t2) {
     	if (t1.getKind() == TypeKind.WILDCARD || t2.getKind() == TypeKind.WILDCARD) {
     		return false;
@@ -385,7 +385,7 @@
     /* (non-Javadoc)
      * @see javax.lang.model.util.Types#isSubsignature(javax.lang.model.type.ExecutableType, javax.lang.model.type.ExecutableType)
      */
-    @Override
+    //@Override
     public boolean isSubsignature(ExecutableType m1, ExecutableType m2) {
 		MethodBinding methodBinding1 = (MethodBinding) ((ExecutableTypeImpl) m1)._binding;
 		MethodBinding methodBinding2 = (MethodBinding) ((ExecutableTypeImpl) m2)._binding;
@@ -397,7 +397,7 @@
     /**
      * @return true if t1 is a subtype of t2, or if t1 == t2.
      */
-    @Override
+    //@Override
     public boolean isSubtype(TypeMirror t1, TypeMirror t2) {
     	if (t1 instanceof NoTypeImpl) {
     		if (t2 instanceof NoTypeImpl) {
@@ -435,7 +435,7 @@
         throw new UnsupportedOperationException("NYI: TypesImpl.isSubtype(TypeMirror, TypeMirror) for array and reference types"); //$NON-NLS-1$
     }
 
-    @Override
+    //@Override
     public PrimitiveType unboxedType(TypeMirror t) {
         if (!(((TypeMirrorImpl)t)._binding instanceof ReferenceBinding)) {
             // Not an unboxable type - could be primitive, array, not a type at all, etc.

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java.orig	2007-06-26 04:57:16.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java	2007-08-29 00:06:50.000000000 +0900
@@ -48,7 +48,7 @@
 		super(env, binding);
 	}
 	
-	@Override
+    //@Override
 	public <R, P> R accept(ElementVisitor<R, P> v, P p)
 	{
 		return v.visitVariable(this, p);
@@ -60,7 +60,7 @@
 		return ((VariableBinding)_binding).getAnnotations();
 	}
 
-	@Override
+    //@Override
 	public Object getConstantValue() {
 		VariableBinding variableBinding = (VariableBinding) _binding;
 		Constant constant = variableBinding.constant();
@@ -89,12 +89,12 @@
 		return null;
 	}
 	
-	@Override
+    //@Override
 	public List<? extends Element> getEnclosedElements() {
 		return Collections.emptyList();
 	}
 
-	@Override
+    //@Override
 	public Element getEnclosingElement() {
 		if (_binding instanceof FieldBinding) {
 			return _env.getFactory().newElement(((FieldBinding)_binding).declaringClass);
@@ -106,7 +106,7 @@
 		return null;
 	}
 
-	@Override
+    //@Override
 	public ElementKind getKind() {
 		if (_binding instanceof FieldBinding) {
 			if (((FieldBinding)_binding).declaringClass.isEnum()) {

--- plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/WildcardTypeImpl.java.orig	2007-06-26 04:57:27.000000000 +0900
+++ plugins/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/WildcardTypeImpl.java	2007-08-29 00:07:12.000000000 +0900
@@ -33,7 +33,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.WildcardType#getExtendsBound()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getExtendsBound() {
 		WildcardBinding wildcardBinding = (WildcardBinding) this._binding;
 		if (wildcardBinding.boundKind != Wildcard.EXTENDS) return null;
@@ -52,7 +52,7 @@
 	/* (non-Javadoc)
 	 * @see javax.lang.model.type.WildcardType#getSuperBound()
 	 */
-	@Override
+	//@Override
 	public TypeMirror getSuperBound() {
 		WildcardBinding wildcardBinding = (WildcardBinding) this._binding;
 		if (wildcardBinding.boundKind != Wildcard.SUPER) return null;
