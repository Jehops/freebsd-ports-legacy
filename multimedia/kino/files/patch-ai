--- src/ieee1394io.cc.orig	Sat Aug 21 06:55:56 2004
+++ src/ieee1394io.cc	Sun Oct 10 19:43:02 2004
@@ -62,11 +62,13 @@
 #include <sys/poll.h>
 #include <errno.h>
 
+#if 0
 #include <libraw1394/raw1394.h>
 #include <libraw1394/csr.h>
 #include <libavc1394/avc1394.h>
 #include <libavc1394/avc1394_vcr.h>
 #include <libavc1394/rom1394.h>
+#endif
 
 #include "ieee1394io.h"
 #include "preferences.h"
@@ -261,7 +263,7 @@
 raw1394Reader::raw1394Reader( int p, int c, int bufSize ) :
 		IEEE1394Reader( c, bufSize ), port( p )
 {
-	handle = NULL;
+	//handle = NULL;
 	cerr << ">>> Using raw1394 capture" << endl;
 }
 
@@ -332,7 +334,8 @@
 
 bool raw1394Reader::Open()
 {
-	bool success;
+	bool success = false;
+#if 0
 	int numcards;
 	struct raw1394_portinfo pinf[ 16 ];
 	iso_handler_t oldhandler;
@@ -365,6 +368,7 @@
 		cerr << exc << endl;
 		success = false;
 	}
+#endif
 	return success;
 }
 
@@ -375,11 +379,13 @@
 
 void raw1394Reader::Close()
 {
+#if 0
 	if ( handle != NULL )
 	{
 		raw1394_destroy_handle( handle );
 		handle = NULL;
 	}
+#endif
 }
 
 bool raw1394Reader::StartReceive()
@@ -389,7 +395,7 @@
 	/* Starting iso receive */
 	try
 	{
-		fail_neg( raw1394_start_iso_rcv( handle, channel ) );
+//		fail_neg( raw1394_start_iso_rcv( handle, channel ) );
 		success = true;
 	}
 	catch ( string exc )
@@ -403,8 +409,8 @@
 
 void raw1394Reader::StopReceive()
 {
-	if ( handle != NULL )
-		raw1394_stop_iso_rcv( handle, channel );
+//	if ( handle != NULL )
+//		raw1394_stop_iso_rcv( handle, channel );
 }
 
 
@@ -440,6 +446,7 @@
  
 */
 
+#if 0
 int raw1394Reader::HandlerProxy( raw1394handle_t handle, int channel, size_t length, quadlet_t *data )
 {
 	raw1394Reader *self = static_cast< raw1394Reader* >( raw1394_get_userdata( handle ) );
@@ -551,6 +558,7 @@
 
 	return 0;
 }
+#endif
 
 
 /** The thread responsible for polling the raw1394 interface.
@@ -570,6 +578,7 @@
 	struct pollfd raw1394_poll;
 	int result;
 		
+#if 0
 	raw1394_poll.fd = raw1394_get_fd( handle );
 	raw1394_poll.events = POLLIN | POLLERR | POLLHUP | POLLPRI;
 
@@ -587,6 +596,7 @@
 		        || ( raw1394_poll.revents & POLLPRI ) ) )
 			result = raw1394_loop_iterate( handle );
 	}
+#endif
 	return NULL;
 }
 
@@ -673,6 +683,7 @@
 
 bool dv1394Reader::Open()
 {
+#if 0
 	int n_frames = DV1394_MAX_FRAMES / 4;
 	struct dv1394_init init =
 	    {
@@ -706,6 +717,8 @@
 	}
 
 	return true;
+#endif
+	return false;
 }
 
 
@@ -714,6 +727,7 @@
 */
 void dv1394Reader::Close()
 {
+#if 0
 	if ( m_dv1394_fd != -1 )
 	{
 		if ( m_dv1394_map != NULL )
@@ -722,11 +736,13 @@
 		m_dv1394_map = NULL;
 		m_dv1394_fd = -1;
 	}
+#endif
 }
 
 
 bool dv1394Reader::StartReceive()
 {
+#if 0
 	/* Starting iso receive */
 	if ( ioctl( m_dv1394_fd, DV1394_START_RECEIVE, NULL ) )
 	{
@@ -734,6 +750,8 @@
 		return false;
 	}
 	return true;
+#endif
+	return false;
 }
 
 
@@ -742,6 +760,7 @@
 
 bool dv1394Reader::Handler( int handle )
 {
+#if 0
 	struct dv1394_status dvst;
 	struct pollfd pol;
 	int result;
@@ -828,6 +847,8 @@
 
 	}
 	return true;
+#endif
+	return false;
 }
 
 
@@ -863,6 +884,7 @@
 
 AVC::AVC( int p ) : port( p )
 {
+#if 0
 	pthread_mutex_init( &avc_mutex, NULL );
 	avc_handle = NULL;
 	int numcards;
@@ -894,6 +916,7 @@
 		cerr << exc << endl;
 	}
 	return ;
+#endif
 }
 
 
@@ -903,6 +926,7 @@
 
 AVC::~AVC()
 {
+#if 0
 	if ( avc_handle != NULL )
 	{
 		pthread_mutex_lock( &avc_mutex );
@@ -910,11 +934,13 @@
 		avc_handle = NULL;
 		pthread_mutex_unlock( &avc_mutex );
 	}
+#endif
 }
 
 
 extern KinoCommon *common;
 
+#if 0
 int AVC::ResetHandler( raw1394handle_t handle, unsigned int generation )
 {
 	cerr << "Reset Handler received" << endl;
@@ -922,7 +948,7 @@
 	common->getPageCapture() ->driver_locked = true;
 	return 0;
 }
-
+#endif
 
 /** See if a node_id is still valid and pointing to an AV/C Recorder.
  
@@ -938,6 +964,7 @@
 int AVC::isPhyIDValid( int phyID )
 {
 	int value = -1;
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -980,6 +1007,7 @@
 		}
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return value;
 }
 
@@ -988,6 +1016,7 @@
 */
 void AVC::Noop( void )
 {
+#if 0
 	struct pollfd raw1394_poll;
 	raw1394_poll.fd = raw1394_get_fd( avc_handle );
 	raw1394_poll.events = POLLIN | POLLPRI;
@@ -998,11 +1027,13 @@
 		        || ( raw1394_poll.revents & POLLPRI ) )
 			raw1394_loop_iterate( avc_handle );
 	}
+#endif
 }
 
 
 int AVC::Play( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1014,12 +1045,14 @@
 		}
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 
 int AVC::Pause( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1036,12 +1069,14 @@
 	    };
 	nanosleep( &t, NULL );
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 
 int AVC::Stop( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1054,12 +1089,14 @@
 	    };
 	nanosleep( &t, NULL );
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 
 int AVC::Rewind( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1067,12 +1104,14 @@
 			avc1394_vcr_rewind( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 
 int AVC::FastForward( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1080,11 +1119,13 @@
 			avc1394_vcr_forward( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::Forward( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1092,11 +1133,13 @@
 			avc1394_vcr_next( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::Back( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1104,11 +1147,13 @@
 			avc1394_vcr_previous( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::NextScene( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1116,11 +1161,13 @@
 			avc1394_vcr_next_index( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::PreviousScene( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1128,11 +1175,13 @@
 			avc1394_vcr_previous_index( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::Record( int phyID )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1140,11 +1189,13 @@
 			avc1394_vcr_record( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 int AVC::Shuttle( int phyID, int speed )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1152,12 +1203,14 @@
 			avc1394_vcr_trick_play( avc_handle, phyID, speed );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return 0;
 }
 
 unsigned int AVC::TransportStatus( int phyID )
 {
 	quadlet_t val = 0;
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1165,11 +1218,13 @@
 			val = avc1394_vcr_status( avc_handle, phyID );
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return val;
 }
 
 bool AVC::Timecode( int phyID, char* timecode )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1198,10 +1253,13 @@
 	}
 	pthread_mutex_unlock( &avc_mutex );
 	return true;
+#endif
+	return false;
 }
 
 int AVC::getNodeId( const char *guid )
 {
+#if 0
 	pthread_mutex_lock( &avc_mutex );
 	if ( avc_handle != NULL )
 	{
@@ -1224,6 +1282,7 @@
 		}
 	}
 	pthread_mutex_unlock( &avc_mutex );
+#endif
 	return -1;
 }
 
@@ -1231,6 +1290,7 @@
 dv1394Writer::dv1394Writer( string device, unsigned int channel, unsigned int nBuffers,
                             unsigned int cip_n, unsigned int cip_d, unsigned int syt_offset ) : isInitialised( false )
 {
+#if 0
 	m_fd = -1;
 	m_deviceName = device;
 	m_channel = channel;
@@ -1240,6 +1300,7 @@
 	m_syt_offset = syt_offset;
 
 	m_fd = open( m_deviceName.c_str(), O_RDWR );
+#endif
 }
 
 
@@ -1255,6 +1316,7 @@
 
 void dv1394Writer::SendFrame( Frame &frame )
 {
+#if 0
 	bool isPAL = frame.IsPAL();
 
 	if ( !isInitialised )
@@ -1279,4 +1341,5 @@
 	}
 
 	write( m_fd, frame.data, ( isPAL ? DV1394_PAL_FRAME_SIZE : DV1394_NTSC_FRAME_SIZE ) );
+#endif
 }
