--- build/umakecf/freebsd.cf.orig	Sun Jul 18 20:43:14 2004
+++ build/umakecf/freebsd.cf	Sun Sep 12 19:24:00 2004
@@ -1,9 +1,9 @@
-# 
+#
 # ***** BEGIN LICENSE BLOCK *****
 # Source last modified: $Id: freebsd.cf,v 1.3 2004/07/18 18:43:14 dcollins Exp $
-# 
+#
 # Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
-# 
+#
 # The contents of this file, and the files included with this file,
 # are subject to the current version of the RealNetworks Public
 # Source License (the "RPSL") available at
@@ -17,7 +17,7 @@
 # to this file, the RCSL.  Please see the applicable RPSL or RCSL for
 # the rights, obligations and limitations governing use of the
 # contents of the file.
-# 
+#
 # Alternatively, the contents of this file may be used under the
 # terms of the GNU General Public License Version 2 or later (the
 # "GPL") in which case the provisions of the GPL are applicable
@@ -29,25 +29,25 @@
 # the GPL. If you do not delete the provisions above, a recipient may
 # use your version of this file under the terms of any one of the
 # RPSL, the RCSL or the GPL.
-# 
+#
 # This file is part of the Helix DNA Technology. RealNetworks is the
 # developer of the Original Code and owns the copyrights in the
 # portions it created.
-# 
+#
 # This file, and the files included with this file, is distributed
 # and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
 # KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
 # ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
 # OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
 # ENJOYMENT OR NON-INFRINGEMENT.
-# 
+#
 # Technology Compatibility Kit Test Suite(s) Location:
 #    http://www.helixcommunity.org/content/tck
-# 
+#
 # Contributor(s):
-# 
+#
 # ***** END LICENSE BLOCK *****
-# 
+#
 """Basic FreeBSD cf file, inherited by other freebsd-x.y-z.cf files."""
 
 exec_config_file('unix.cf')
@@ -57,6 +57,7 @@
 platform.pcf_prefix_list = ['unix', 'freebsd']
 
 project.AddDefines("_FREEBSD")
+# project.AddBuildOption("release")
 
 make_toc = platform.make_toc
 make_toc.cmd = 'ranlib'
@@ -66,8 +67,8 @@
 make_lib.cmd = 'ar cr '
 make_lib.make_var = 'MAKE_LIB'
 make_lib.make_flags = 'MAKE_LIB_FLAGS'
-platform.cc.args['default']  = '-pipe -fsigned-char'
-platform.cxx.args['default'] = '-pipe -fsigned-char'
+platform.cc.args['default']  = '%%CFLAGS%% -fsigned-char %%PTHREAD_CFLAGS%%'
+platform.cxx.args['default'] = '%%CXXFLAGS%% -fsigned-char %%PTHREAD_CFLAGS%%'
 DisableRTTIIfNecessary()
 
 
@@ -80,7 +81,7 @@
 
     def add_argument(self, arg):
         self.extra_arguments.append(arg)
-    
+
     def link_paths(self):
         return string.join(platform.system_paths +
                            project.system_paths)
@@ -91,7 +92,7 @@
     def armerge_lib_path(self):
         libname = "%s_libs.%s" % (project.target_name, platform.library_suffix)
         return os.path.join(project.output_dir, libname)
-    
+
     def armerge_tmp_path(self):
         return os.path.join(project.object_dir, "lib")
 
@@ -99,7 +100,7 @@
         ## if there are no exported functions, die here
         if len(project.exported_func) == 0:
             umake_lib.fatal("dll target without exported functions") 
-        
+
         ## create a gcc link script
         fil = open(path, "w")
         fil.write("VERSION\n")
@@ -118,7 +119,7 @@
 
     def LinkLIB(self, target_path, objects):
         cmd_list = []
-        
+
         cmd = "%s %s %s" % (make_lib.cmd, target_path, objects)
         cmd_list.append(cmd)
 
@@ -147,7 +148,7 @@
         else:
             undefinedSymbols=""
 
-        cmd = "g++ -shared %s -o %s %s %s %s %s %s -lgcc" % (
+        cmd = "%%CXX%% -shared %s -o %s %s %s %s %s %s" % (
             lspath, target_path,
             undefinedSymbols,
             objects, libpath,
@@ -175,8 +176,8 @@
         cmd = "%s -d %s %s %s" % (armerge_cmd, tmp_path, libpath, static_libs)
         cmd_list.append(cmd)
 
-        # Link using g++ for proper handling of C++
-        cmd = "g++ -Wl,-export-dynamic -o %s %s %s %s %s" % (
+        # Link using %%CXX%% for proper handling of C++
+        cmd = "%%CXX%% -Wl,-export-dynamic -o %s %s %s %s %s" % (
             target_path, objects, libpath, self.link_paths(), dynamic_libs)
         cmd_list.append(cmd)
 
@@ -184,21 +185,24 @@
         cmd_list.append(cmd)
 
         return cmd_list
-    
+
     def CleanEXE(self, target_path):
         list = []
         list.append(target_path)
         list.append(self.armerge_tmp_path())
         list.append(self.armerge_lib_path())
         return list
-    
+
     def make_lib_static(self, lib):
         return "-Wl,-Bstatic %s -Wl,-Bdynamic" % lib
-    
+
 
 platform.link = FreeBSDLinker()
-platform.link.ldargs = '-L/usr/X11R6/lib --export-dynamic'
+platform.link.ldargs = '-L/usr/X11R6/lib -L/usr/local/lib --export-dynamic  %%PTHREAD_LIBS%%'
+project.includes.append('../../../../datatype/image/common/pub')
 project.includes.append('/usr/X11R6/include')
+project.includes.append('/usr/local/include')
+project.AddSystemPaths('-L/usr/X11R6/lib')
 
 
 ## LessTif/Motif root defined with environment variable XMROOT
