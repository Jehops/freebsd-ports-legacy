--- src/disku.c	2011-03-17 00:53:37.000000000 +0100
+++ src/disku.c	2011-03-17 00:17:34.000000000 +0100
@@ -75,25 +75,34 @@
 #else
 	struct disklabel	loclab;
 	u_int    u;
+	off_t	 o; /* total disk size */
 
 	if (ioctl(d->d_fd, DIOCGFWSECTORS, &u) == 0)
-		loclab.d_nsectors = u;
+		g.d_s = u;
 	else
-		loclab.d_nsectors = 63;
+		pr(FATAL, EM_IOCTLFAILED, "DIOCGFWSECTORS", strerror(errno));
+		// loclab.d_nsectors = 63;
 	if (ioctl(d->d_fd, DIOCGFWHEADS, &u) == 0)
-		loclab.d_ntracks = u;
+		g.d_h = u;
+	else
+		pr(FATAL, EM_IOCTLFAILED, "DIOCGFWHEADS", strerror(errno));
+#if 0
 	else if (loclab.d_secperunit <= 63*1*1024)
 		loclab.d_ntracks = 1;
 	else if (loclab.d_secperunit <= 63*16*1024)
 		loclab.d_ntracks = 16;
 	else
 		loclab.d_ntracks = 255;
+#endif
+	if (ioctl(d->d_fd, DIOCGSECTORSIZE, &u) == 0)
+		if (u != 512)
+		    pr(FATAL, "sector size not a multiple of 512");
+	if (ioctl(d->d_fd, DIOCGMEDIASIZE, &o))
+		pr(FATAL, EM_IOCTLFAILED, "DIOCGMEDIASIZE", strerror(errno));
 	loclab.d_secpercyl = loclab.d_ntracks * loclab.d_nsectors;
 	loclab.d_ncylinders = loclab.d_secperunit / loclab.d_secpercyl;
 
-        g.d_c = loclab.d_ncylinders;
-	g.d_h = loclab.d_ntracks;
-	g.d_s = loclab.d_nsectors;
+	g.d_c = o / u / g.d_h / g.d_s; // loclab.d_ncylinders;
 #endif
 #endif
 
--- src/gm_bsddl.h	2000-12-13 23:54:31.000000000 +0100
+++ src/gm_bsddl.h	2011-03-17 00:38:12.000000000 +0100
@@ -28,7 +28,7 @@
 
 #define BBSIZE		8192	/* size of boot area, with label */
 
-#ifdef __i386__
+#if defined(__i386__) || defined(__amd64__)
 #define LABELSECTOR	1			/* sector containing label */
 #define LABELOFFSET	0			/* offset of label in sector */
 #endif
--- src/gpart.h	2001-01-31 00:07:29.000000000 +0100
+++ src/gpart.h	2011-03-17 00:35:27.000000000 +0100
@@ -22,8 +22,9 @@
 
 #define PROGRAM		"gpart"
 
+#include <stdint.h>
 
-typedef unsigned char byte_t;
+typedef uint8_t byte_t;
 
 
 
@@ -31,7 +32,7 @@
  * endianness (incomplete, later)
  */
 
-#if defined(__i386__) || defined(__alpha__)
+#if defined(__i386__) || defined(__amd64__) || defined(__alpha__)
 #	define le16(x)	(x)		/* x as little endian */
 #	define be16(x)	((((x)&0xff00)>>8)			| \
 			(((x)&0x00ff)<<8))
@@ -112,8 +113,8 @@
 	byte_t		p_ehd;		/* end head */
 	byte_t		p_esect;	/* end sector */
 	byte_t		p_ecyl;		/* end cylinder */
-	unsigned long	p_start;	/* start sector (absolute) */
-	unsigned long	p_size;		/* # of sectors */
+	uint32_t	p_start;	/* start sector (absolute) */
+	uint32_t	p_size;		/* # of sectors */
 } dos_part_entry;
 
 
@@ -123,7 +124,7 @@
 	byte_t		_align[2];
 	byte_t		t_boot[DOSPARTOFF];
 	dos_part_entry	t_parts[NDOSPARTS];
-	unsigned short	t_magic;	/* DOSPTMAGIC */
+	uint16_t	t_magic;	/* DOSPTMAGIC */
 } dos_part_table;
 
 
