--- include/fxdefs.h.orig	2013-09-18 15:26:29.000000000 +0200
+++ include/fxdefs.h	2013-09-18 15:26:48.000000000 +0200
@@ -131,7 +131,7 @@
 
 
 // Restrict aliasing on pointers
-#if defined(__GNUC__)
+#if defined(__GNUC__) && !defined(__restrict)
 #define __restrict __restrict__
 #else
 #define __restrict
--- lib/FXFileList.cpp.orig	2013-09-18 15:41:48.000000000 +0200
+++ lib/FXFileList.cpp	2013-09-18 15:42:11.000000000 +0200
@@ -1474,7 +1474,7 @@
           }
 
         // Update item information
-        label.format("%s\t%s\t%lld\t%s\t%s\t%s\t%s\t%s",name.text(),extension.text(),newitem->size,modtm.text(),usrid.text(),grpid.text(),attrs.text(),lnknm.text());
+        label.format("%s\t%s\t%lld\t%s\t%s\t%s\t%s\t%s",name.text(),extension.text(),static_cast<long long>(newitem->size),modtm.text(),usrid.text(),grpid.text(),attrs.text(),lnknm.text());
 
         // New label
         newitem->setText(label);
--- pathfinder/PathFinder.cpp.orig	2013-09-18 16:59:43.000000000 +0200
+++ pathfinder/PathFinder.cpp	2013-09-18 17:10:58.000000000 +0200
@@ -1051,7 +1051,7 @@
   selectedModeBits[15]+=FXBIT(mode,15); // SVTX
   selectedSpace+=size;
   selectedCount+=1;
-  FXTRACE((10,"selected  : %3d %7lld [%3d %7lld] %s\n",index,size,selectedCount,selectedSpace,filelist->getItemFilename(index).text()));
+  FXTRACE((10,"selected  : %3d %7lld [%3d %7lld] %s\n",index,static_cast<long long>(size),selectedCount,static_cast<long long>(selectedSpace),filelist->getItemFilename(index).text()));
   return 1;
   }
 
@@ -1075,7 +1075,7 @@
   selectedModeBits[15]-=FXBIT(mode,15); // SVTX
   selectedSpace-=size;
   selectedCount-=1;
-  FXTRACE((10,"deselected: %3d %7lld [%3d %7lld] %s\n",index,size,selectedCount,selectedSpace,filelist->getItemFilename(index).text()));
+  FXTRACE((10,"deselected: %3d %7lld [%3d %7lld] %s\n",index,static_cast<long long>(size),selectedCount,static_cast<long long>(selectedSpace),filelist->getItemFilename(index).text()));
   return 1;
   }
 
@@ -1088,7 +1088,7 @@
     }
   totalSpace+=filelist->getItemSize(index);
   totalCount+=1;
-  FXTRACE((10,"inserted  : %3d %7lld [%3d %7lld] %s\n",index,filelist->getItemSize(index),totalCount,totalSpace,filelist->getItemFilename(index).text()));
+  FXTRACE((10,"inserted  : %3d %7lld [%3d %7lld] %s\n",index,static_cast<long long>(filelist->getItemSize(index)),totalCount,static_cast<long long>(totalSpace),filelist->getItemFilename(index).text()));
   return 1;
   }
 
@@ -1101,7 +1101,7 @@
     }
   totalSpace-=filelist->getItemSize(index);
   totalCount-=1;
-  FXTRACE((10,"deleted   : %3d %7lld [%3d %7lld] %s\n",index,filelist->getItemSize(index),totalCount,totalSpace,filelist->getItemFilename(index).text()));
+  FXTRACE((10,"deleted   : %3d %7lld [%3d %7lld] %s\n",index,static_cast<long long>(filelist->getItemSize(index)),totalCount,static_cast<long long>(totalSpace),filelist->getItemFilename(index).text()));
   return 1;
   }
 
@@ -1368,15 +1368,15 @@
         info.format(tr("File \"%s\" -> \"%s\"."),filelist->getItemFilename(currentitem).text(),filelist->getItemText(currentitem).section('\t',7).text());
         }
       else{
-        info.format(tr("File \"%s\" [%s] (%lld bytes)."),filelist->getItemFilename(currentitem).text(),filelist->getItemText(currentitem).section('\t',1).text(),filelist->getItemSize(currentitem));
+        info.format(tr("File \"%s\" [%s] (%lld bytes)."),filelist->getItemFilename(currentitem).text(),filelist->getItemText(currentitem).section('\t',1).text(),static_cast<long long>(filelist->getItemSize(currentitem)));
         }
       }
     }
   else if(1<=selectedCount){
-    info.format(tr("Selected %d items (%lld bytes)."),selectedCount,selectedSpace);
+    info.format(tr("Selected %d items (%lld bytes)."),selectedCount,static_cast<long long>(selectedSpace));
     }
   else{
-    info.format(tr("Total %d items (%lld bytes)."),totalCount,totalSpace);
+    info.format(tr("Total %d items (%lld bytes)."),totalCount,static_cast<long long>(totalSpace));
     }
   sender->handle(this,FXSEL(SEL_COMMAND,ID_SETSTRINGVALUE),(void*)&info);
   return 1;
--- tests/parallel.cpp.orig	2013-09-18 16:31:08.000000000 +0200
+++ tests/parallel.cpp	2013-09-18 16:55:25.000000000 +0200
@@ -60,8 +59,8 @@
   fxmessage("%p: npull=%ld\n",self(),npull);
   fxmessage("%p: ncros=%ld\n",self(),ncros);
   fxmessage("%p: niter=%ld\n",self(),niter);
-  fxmessage("%p: avg=%lld\n",self(),tot/npush);
-  fxmessage("%p: ticks=%lld (%.16lfs) tick/push=%.2lf push/s=%.2lf\n",self(),tot,FXdouble(tot)*0.33333333333333E-9,FXdouble(tot)/FXdouble(npush),FXdouble(npush)/(FXdouble(tot)*0.33333333333333E-9));
+  fxmessage("%p: avg=%lld\n",self(),static_cast<long long>(tot/npush));
+  fxmessage("%p: ticks=%lld (%.16lfs) tick/push=%.2lf push/s=%.2lf\n",self(),static_cast<long long>(tot),FXdouble(tot)*0.33333333333333E-9,FXdouble(tot)/FXdouble(npush),FXdouble(npush)/(FXdouble(tot)*0.33333333333333E-9));
   return 0;
   }
 
@@ -70,18 +69,18 @@
 // Churn cpu for a random while, then return
 void churn(){
   FXRandom random(fxgetticks());
-  fxmessage("Churn start th %p core %d/%d\n",FXThread::current(),FXThread::processor(),FXThread::processors());
+  fxmessage("Churn start th %08lx core %d/%d\n",FXThread::current(),FXThread::processor(),FXThread::processors());
   while(random.randDouble()<0.99999999){ }
-  fxmessage("Churn done  th %p code %d/%d\n",FXThread::current(),FXThread::processor(),FXThread::processors());
+  fxmessage("Churn done  th %08lx code %d/%d\n",FXThread::current(),FXThread::processor(),FXThread::processors());
   }
 
 
 // Loop through index range
 void looping(FXint i){
   FXRandom random(fxgetticks());
-  fxmessage("Looping %03d start th %p\n",i,FXThread::current());
+  fxmessage("Looping %03d start th %08lx\n",i,FXThread::current());
   while(random.randDouble()<0.9999999){ }
-  fxmessage("Looping %03d done  th %p\n",i,FXThread::current());
+  fxmessage("Looping %03d done  th %08lx\n",i,FXThread::current());
   }
 
 
@@ -278,7 +278,7 @@
 
     fxmessage("running: %d!\n",pool.getRunningThreads());
 
-    fxmessage("main thread %p\n",FXThread::current());
+    fxmessage("main thread %lx\n",FXThread::current());
 
 
     // 8-way parallelism if you got the cores
--- tests/codecs.cpp.orig	2013-09-18 17:56:47.000000000 +0200
+++ tests/codecs.cpp	2013-09-18 16:26:21.000000000 +0200
@@ -44,7 +44,7 @@
 // Test roundtrip for codec
 void roundtriptest(FXTextCodec *codec){
   FXchar dst[32],src[32];
-  FXint c,n,i,j;
+  FXint i,j;
   FXwchar wc;
   printf("Roundtrip test for: %s..\n",codec->name());
   for(i=0; i<256; i++){
@@ -61,8 +61,7 @@
 // Test utf8 roundtrip for codec
 void utf8roundtriptest(FXTextCodec *codec){
   FXchar dst[32],src[32];
-  FXint c,n,i,j;
-  FXwchar wc;
+  FXint n,i,j;
   printf("UTF8 Roundtrip test for: %s..\n",codec->name());
   for(i=0; i<256; i++){
     src[0]=i;
@@ -100,7 +99,7 @@
     if(w1!=w2 || m!=4 || n!=1) printf("%06X: Problem: %06X\n",w1,w2);
     }
   end=fxgetticks();
-  printf("4-Byte case: %lld ticks/character\n",(end-beg)/(0x110000-0x10000));
+  printf("4-Byte case: %lld ticks/character\n",static_cast<long long>((end-beg)/(0x110000-0x10000)));
 
   // Test utf for codes of 3 bytes
   beg=fxgetticks();
@@ -110,7 +109,7 @@
     if(w1!=w2 || m!=3 || n!=1) printf("%06X: Problem: %06X\n",w1,w2);
     }
   end=fxgetticks();
-  printf("3-Byte case: %lld ticks/character\n",(end-beg)/(0x10000-0x800));
+  printf("3-Byte case: %lld ticks/character\n",static_cast<long long>((end-beg)/(0x10000-0x800)));
 
   // Test utf for codes of 2 bytes
   beg=fxgetticks();
@@ -120,7 +119,7 @@
     if(w1!=w2 || m!=2 || n!=1) printf("%06X: Problem: %06X\n",w1,w2);
     }
   end=fxgetticks();
-  printf("2-Byte case: %lld ticks/character\n",(end-beg)/(0x800-0x80));
+  printf("2-Byte case: %lld ticks/character\n",static_cast<long long>((end-beg)/(0x800-0x80)));
 
   // Test utf for codes of 1 byte
   beg=fxgetticks();
@@ -130,7 +129,7 @@
     if(w1!=w2 || m!=1 || n!=1) printf("%06X: Problem: %06X\n",w1,w2);
     }
   end=fxgetticks();
-  printf("1-Byte case: %lld ticks/character\n",(end-beg)/0x80);
+  printf("1-Byte case: %lld ticks/character\n",static_cast<long long>((end-beg)/0x80));
 
 /*
 
