--- lib/fxxpmio.cpp.orig	2013-09-18 16:02:08.000000000 +0200
+++ lib/fxxpmio.cpp	2013-09-18 16:07:33.000000000 +0200
@@ -128,13 +128,14 @@
   FXchar  lookuptable[1024][8],name[100],word[100],flag,best;
   FXColor colortable[16384],*pix,color;
   const FXchar *src,*line;
-  FXint   i,j,ncolors,cpp,c;
+  FXint   i,j,ncolors,cpp,c,nchar;
 
   // Null out
   data=NULL;
   width=0;
   height=0;
   color=0;
+  nchar=0;
 
   // NULL pointer passed in
   if(!pixels) return false;
@@ -172,7 +173,7 @@
       flag=word[0];
       name[0]=0;
       while(nextword(src,word) && !iskey(word)){
-        strncat(name,word,sizeof(name));
+        nchar += snprintf(name+nchar,sizeof(name)-nchar,"%s",word);
         }
       if(flag<best){                    // c < g < m < s
         color=colorFromName(name);
@@ -227,13 +228,14 @@
   FXchar lookuptable[1024][8],line[100],name[100],word[100],flag,best,ch;
   FXColor colortable[16384],*pix,color;
   const FXchar *src;
-  FXint i,j,ncolors,cpp,c;
+  FXint i,j,ncolors,cpp,c,nchar;
 
   // Null out
   data=NULL;
   width=0;
   height=0;
   color=0;
+  nchar=0;
 
   // Read header line
   readline(store,name,sizeof(name));
@@ -269,7 +271,7 @@
       flag=word[0];
       name[0]=0;
       while(nextword(src,word) && !iskey(word)){
-        strncat(name,word,sizeof(name));
+        nchar += snprintf(name+nchar,sizeof(name)-nchar,"%s",word);
         }
       if(flag<best){                    // c < g < m < s
         color=colorFromName(name);
--- lib/FXFont.cpp.orig	2013-09-18 15:42:34.000000000 +0200
+++ lib/FXFont.cpp	2013-09-18 15:47:14.000000000 +0200
@@ -2180,6 +2180,7 @@
   FXString     family;
   FXString     foundry;
   double       points;
+  size_t       famlen;
 
   fonts=NULL;
   numfonts=0;
@@ -2243,11 +2244,10 @@
             // Get full face name
             fullname[0]=0;
             if(FcPatternGetString(p,FC_FAMILY,0,&fam)==FcResultMatch){
+              famlen = strlen((const char *)fam);  
               strncpy(fullname,(const char*)fam,sizeof(fullname));
               if(FcPatternGetString(p,FC_FOUNDRY,0,&fdy)==FcResultMatch){
-                strncat(fullname," [",sizeof(fullname));
-                strncat(fullname,(const char*)fdy,sizeof(fullname));
-                strncat(fullname,"]",sizeof(fullname));
+                snprintf(fullname+famlen, sizeof(fullname)-famlen, " [%s]", (const char *)fdy);
                 }
               }
 
--- lib/FXApp.cpp.orig	2013-09-18 15:31:42.000000000 +0200
+++ lib/FXApp.cpp	2013-09-18 15:33:59.000000000 +0200
@@ -1495,8 +1495,7 @@
     if(XSupportsLocale()){
       FXchar mods[100]="";
       if(inputmethod[0]){
-        strncpy(mods,"@im=",sizeof(mods));
-        strncat(mods,inputmethod,sizeof(mods));
+        snprintf(mods, sizeof(mods), "@im=%s", inputmethod);
         }
       if(!XSetLocaleModifiers(mods)){
         if(!XSetLocaleModifiers("")){
--- tests/minheritance.cpp.orig	2013-09-18 16:26:29.000000000 +0200
+++ tests/minheritance.cpp	2013-09-18 16:27:36.000000000 +0200
@@ -161,7 +161,7 @@
 /*******************************************************************************/
 
 Base1::Base1(){
-  FXTRACE((100,"Base1::Base1 at %08p\n",this));
+  FXTRACE((100,"Base1::Base1 at %p\n",this));
   a=1;
   }
 
@@ -180,12 +180,12 @@
 FXIMPLEMENT(Base2,FXObject,Base2Map,ARRAYNUMBER(Base2Map))
 
 Base2::Base2(){
-  FXTRACE((100,"Base2::Base2 at %08p\n",this));
+  FXTRACE((100,"Base2::Base2 at %p\n",this));
   b=2;
   }
 
 long Base2::onCmdBase2(FXObject*,FXSelector,void*){
-  FXTRACE((100,"Base2::onCmdBase2 at %08p b=%d\n",this,b));
+  FXTRACE((100,"Base2::onCmdBase2 at %p b=%d\n",this,b));
   return 1;
   }
 
@@ -198,7 +198,7 @@
 
 
 Base3::Base3(){
-  FXTRACE((100,"Base3::Base3 at %08p\n",this));
+  FXTRACE((100,"Base3::Base3 at %p\n",this));
   c=3;
   }
 
@@ -219,12 +219,12 @@
 FXIMPLEMENT(TwoBaseOne,Base2,TwoBaseOneMap,ARRAYNUMBER(TwoBaseOneMap))
 
 TwoBaseOne::TwoBaseOne(){
-  FXTRACE((100,"TwoBaseOne::TwoBaseOne at %08p\n",this));
+  FXTRACE((100,"TwoBaseOne::TwoBaseOne at %p\n",this));
   d=4;
   }
 
 long TwoBaseOne::onCmdTwoBaseOne(FXObject*,FXSelector,void*){
-  FXTRACE((100,"TwoBaseOne::onCmdTwoBaseOne at %08p d=%d\n",this,d));
+  FXTRACE((100,"TwoBaseOne::onCmdTwoBaseOne at %p d=%d\n",this,d));
   return 1;
   }
 
@@ -242,12 +242,12 @@
 FXIMPLEMENT(TwoBaseTwo,Base2,TwoBaseTwoMap,ARRAYNUMBER(TwoBaseTwoMap))
 
 TwoBaseTwo::TwoBaseTwo(){
-  FXTRACE((100,"TwoBaseTwo::TwoBaseTwo at %08p\n",this));
+  FXTRACE((100,"TwoBaseTwo::TwoBaseTwo at %p\n",this));
   e=4;
   }
 
 long TwoBaseTwo::onCmdTwoBaseTwo(FXObject*,FXSelector,void*){
-  FXTRACE((100,"TwoBaseTwo::onCmdTwoBaseTwo at %08p e=%d\n",this,e));
+  FXTRACE((100,"TwoBaseTwo::onCmdTwoBaseTwo at %p e=%d\n",this,e));
   return 1;
   }
 
@@ -268,12 +268,12 @@
 FXIMPLEMENT(ThreeBase,TwoBaseOne,ThreeBaseMap,ARRAYNUMBER(ThreeBaseMap))
 
 ThreeBase::ThreeBase(){
-  FXTRACE((100,"ThreeBase::ThreeBase at %08p\n",this));
+  FXTRACE((100,"ThreeBase::ThreeBase at %p\n",this));
   f=5;
   }
 
 long ThreeBase::onCmdThreeBase(FXObject*,FXSelector,void*){
-  FXTRACE((100,"ThreeBase::onCmdThreeBase at %08p f=%d\n",this,f));
+  FXTRACE((100,"ThreeBase::onCmdThreeBase at %p f=%d\n",this,f));
   return 1;
   }
 
--- lib/FXDebugTarget.cpp.orig	2013-09-18 15:36:13.000000000 +0200
+++ lib/FXDebugTarget.cpp	2013-09-18 15:40:25.000000000 +0200
@@ -169,7 +169,7 @@
   FXuint msid=FXSELID(sel);
   FXASSERT(ARRAYNUMBER(messageTypeName)==SEL_LAST);
   if(sender!=lastsender || sel!=lastsel){
-    fxmessage("\nTYPE:%-23s ID:%-5d SENDER: %-15s PTR: 0x%08p #%-4d",type<SEL_LAST?messageTypeName[type]:"ILLEGAL",msid,sender?sender->getClassName():"NULL",ptr,1);
+    fxmessage("\nTYPE:%-23s ID:%-5d SENDER: %-15s PTR: %p #%-4d",type<SEL_LAST?messageTypeName[type]:"ILLEGAL",msid,sender?sender->getClassName():"NULL",ptr,1);
     lastsender=sender;
     lastsel=sel;
     count=1;
--- tests/thread.cpp.orig	2013-09-18 16:13:12.000000000 +0200
+++ tests/thread.cpp	2013-09-18 16:20:51.000000000 +0200
@@ -61,7 +61,7 @@
 // Generate jobs
 FXint Producer::run(){
   FXint job=0;
-  fxmessage("producer start on cpus: %llb\n",affinity());
+  fxmessage("producer start on cpus: %lx\n",affinity());
   FXuint seed=1013904223u;
   for(FXint g=0; g<groups; ++g){
     for(FXint c=0; c<count; c++){
--- adie/FindInFiles.cpp.orig	2013-09-18 16:55:45.000000000 +0200
+++ adie/FindInFiles.cpp	2013-09-18 16:57:42.000000000 +0200
@@ -434,7 +434,7 @@
 
 // File list double clicked
 long FindInFiles::onCmdFileDblClicked(FXObject*,FXSelector,void* ptr){
-  FXint index=(FXint)(FXival)ptr;
+  index=(FXint)(FXival)ptr;
   return 1;
   }
   
--- tests/parallel.cpp.orig	2013-09-18 16:31:08.000000000 +0200
+++ tests/parallel.cpp	2013-09-18 16:55:25.000000000 +0200
@@ -146,6 +145,7 @@
   FXuint njobs=0;
   FXuint test=2;
   FXuint wait=0;
+  char *endptr;
 
   // Grab a few arguments
   for(FXint arg=1; arg<argc; ++arg){
@@ -155,18 +155,18 @@
       }
     else if(strcmp(argv[arg],"--threads")==0){
       if(++arg>=argc){ fxmessage("Missing threads number argument.\n"); exit(1); }
-      nthreads=strtoul(argv[arg],NULL,0);
-      if(nthreads<0){ fxmessage("Value for threads (%d) too small.\n",nthreads); exit(1); }
+      nthreads=strtoul(argv[arg],&endptr,0);
+      if(*endptr!='\0'){ fxmessage("Value for threads (%d) too small.\n",nthreads); exit(1); }
       }
     else if(strcmp(argv[arg],"--minimum")==0){
       if(++arg>=argc){ fxmessage("Missing threads number argument.\n"); exit(1); }
-      minimum=strtoul(argv[arg],NULL,0);
-      if(minimum<0){ fxmessage("Value for minimum number of threads (%d) too small.\n",minimum); exit(1); }
+      minimum=strtoul(argv[arg],&endptr,0);
+      if(*endptr!='\0'){ fxmessage("Value for minimum number of threads (%d) too small.\n",minimum); exit(1); }
       }
     else if(strcmp(argv[arg],"--maximum")==0){
       if(++arg>=argc){ fxmessage("Missing threads number argument.\n"); exit(1); }
-      maximum=strtoul(argv[arg],NULL,0);
-      if(maximum<0){ fxmessage("Value for maximum number of threads (%d) too small.\n",minimum); exit(1); }
+      maximum=strtoul(argv[arg],&endptr,0);
+      if(*endptr!='\0'){ fxmessage("Value for maximum number of threads (%d) too small.\n",minimum); exit(1); }
       }
     else if(strcmp(argv[arg],"--size")==0){
       if(++arg>=argc){ fxmessage("Missing size argument.\n"); exit(1); }
@@ -176,8 +176,8 @@
       }
     else if(strcmp(argv[arg],"--jobs")==0){
       if(++arg>=argc){ fxmessage("Missing jobs count argument.\n"); exit(1); }
-      njobs=strtoul(argv[arg],NULL,0);
-      if(njobs<0){ fxmessage("Value for njobs (%d) too small.\n",njobs); exit(1); }
+      njobs=strtoul(argv[arg],&endptr,0);
+      if(*endptr!='\0'){ fxmessage("Value for njobs (%d) too small.\n",njobs); exit(1); }
       }
     else if(strcmp(argv[arg],"-W")==0 || strcmp(argv[arg],"--wait")==0){
       wait=1;
@@ -198,7 +198,7 @@
       }
     }
 
-  fxmessage("main thread %p\n",FXThread::current());
+  fxmessage("main thread %lx\n",FXThread::current());
 
   nthreads=minimum;
 
