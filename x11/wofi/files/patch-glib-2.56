Partially revert https://hg.sr.ht/~scoopta/wofi/rev/6343e02e2478 until
devel/glib20 is updated to 2.60 or later.

ld: error: undefined symbol: g_app_info_launch_uris_async
>>> referenced by drun.c
>>>               wofi@exe/modes_drun.c.o:(wofi_drun_exec)

ld: error: undefined symbol: g_app_info_launch_uris_finish
>>> referenced by drun.c
>>>               wofi@exe/modes_drun.c.o:(launch_done)

--- modes/drun.c.orig	2020-07-28 23:18:44 UTC
+++ modes/drun.c
@@ -19,6 +19,7 @@
 #include <libgen.h>
 
 #include <sys/stat.h>
+#include <errno.h>
 
 #include <map.h>
 #include <utils.h>
@@ -373,6 +374,7 @@ struct widget* wofi_drun_get_widget(void) {
 	return NULL;
 }
 
+#if GLIB_CHECK_VERSION(2, 60, 0)
 static void launch_done(GObject* obj, GAsyncResult* result, gpointer data) {
 	GError* err = NULL;
 	if(g_app_info_launch_uris_finish(G_APP_INFO(obj), result, &err)) {
@@ -387,6 +389,7 @@ static void launch_done(GObject* obj, GAsyncResult* re
 	}
 	exit(1);
 }
+#endif
 
 static void set_dri_prime(GDesktopAppInfo* info) {
 	bool dri_prime = g_desktop_app_info_get_boolean(info, "PrefersNonDefaultGPU");
@@ -404,7 +407,14 @@ void wofi_drun_exec(const gchar* cmd) {
 			exit(0);
 		} else {
 			set_dri_prime(info);
+#if GLIB_CHECK_VERSION(2, 60, 0)
 			g_app_info_launch_uris_async(G_APP_INFO(info), NULL, NULL, NULL, launch_done, (gchar*) cmd);
+#else
+			const char* exec = g_app_info_get_executable(G_APP_INFO(info));
+			execlp(exec, exec, NULL);
+			fprintf(stderr, "%s cannot be executed\n", exec);
+			exit(errno);
+#endif
 		}
 	} else if(strrchr(cmd, ' ') != NULL) {
 		char* space = strrchr(cmd, ' ');
