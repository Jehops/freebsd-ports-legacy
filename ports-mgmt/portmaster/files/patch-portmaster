--- portmaster.orig	2017-12-21 09:02:44 UTC
+++ portmaster
@@ -51,9 +51,8 @@ fi
 #=============== Begin functions we always want to have ===============
 
 version () {
-	local pkgname="%%PKGNAME%%"
+	local pkgname="portmaster-3.18_6"
 	echo '' ; echo "===>>> Version ${pkgname##*-}"
-	#svn='$FreeBSD: user/dougb/portmaster/portmaster 241090 2012-10-01 08:32:05Z dougb $'
 }
 
 fail () {
@@ -113,13 +112,13 @@ kill_bad_children () {
 		[ "$pid" -gt 25 ] || continue
 		case "$ppid" in
 		1)	case "$command" in
-			*" progcmd "*) pm_kill $pid ;;
+			*" $progcmd "*) pm_kill $pid ;;
 			*'make -DBATCH checksum'*|*'/fetch '*|\[sh\]) pm_kill -9 $pid ;;
 			esac ;;
 		*)	[ $pgid -eq $mypgid ] || continue
 			[ $pid -eq $PM_PARENT_PID ] && continue
 			case "$command" in
-			*" progcmd "*) pm_kill $pid ;;
+			*" $progcmd "*) pm_kill $pid ;;
 			*'make -DBATCH checksum'*|*'/fetch '*|\[sh\]) pm_kill $pid ;;
 			esac ;;
 		esac
@@ -333,9 +332,8 @@ pm_mktemp () {
 		fail "mktemp for $1 failed:\n       ${pm_mktemp_file#mktemp: }"
 }
 pm_unlink () { [ -e "$1" ] && /bin/unlink $1; }
-pm_islocked	() { [ -n "$1" ] || return 1;
-			[ -e "$pdb/$1/+IGNOREME" ] && pkg info -e "$1" ||
-			[ `pkg query %k "$1"` -eq "1" ]; }
+pm_islocked	() { local locked; [ -n "$1" ] && locked=`pkg query %k "$1"` &&
+			[ "$locked" = 1 -o -e "$pdb/$1/+IGNOREME" ]; }
 
 # Superuser versions for commands that need root privileges
 
@@ -412,7 +410,7 @@ usage () {
 	echo "    [[[--packages|-P]|[--packages-only|-PP]] | [--packages-build]]"
 	echo "    [--packages-if-newer] [--delete-build-only] [--always-fetch]"
 	echo "    [--local-packagedir=<path>] [--packages-local] [--delete-packages]"
-	echo "    [--no-confirm] [--no-term-title] [--no-index-fetch]"
+	echo "    [--backup-format=<fmt>] [--no-confirm] [--no-term-title] [--no-index-fetch]"
 	echo "    [--index|--index-first|--index-only] [-m <arguments for make>]"
 	echo "    [-x <glob pattern to exclude from building>]"
 	echo "$progname [Common flags] <full name of port directory in $pdb>"
@@ -653,6 +651,10 @@ for var in "$@" ; do
 				export LOCAL_PACKAGEDIR ;;
 	--delete-packages)	PM_DELETE_PACKAGES=pm_delete_packages
 				export PM_DELETE_PACKAGES ;;
+	--backup-format=*)	BACKUP_FORMAT=${var#--backup-format=}
+				export BACKUP_FORMAT ;;
+	--package-format=*)	PACKAGE_FORMAT=${var#--package-format=}
+				export PACKAGE_FORMAT ;;
 #	--flavor=*)		PM_FLAVOR=${var#--flavor=} ;;
 	--update-if-newer)	PM_UPDATE_IF_NEWER=pm_update_if_newer
 				export PM_UPDATE_IF_NEWER ;;
@@ -1589,25 +1591,28 @@ init_packages () {
 }
 
 pm_pkg_create () {
-	local pkgdir backup
+	local pkgdir backup format_option
 
 	init_packages
 
+	[ -z "$BACKUP_FORMAT" -a -n "$PACKAGE_FORMAT" ] && export BACKUP_FORMAT=$PACKAGE_FORMAT
 	if [ "$1" = "$PACKAGES" ]; then
 		for pkgdir in All Latest ${portdir%/*}; do
 			pm_mkdir_s ${PACKAGES}/${pkgdir} ||
 				fail "Cannot mkdir -p ${PACKAGES}/${pkgdir}"
 		done
 		pkgdir=${PACKAGES}/All
+		format_option=${PACKAGE_FORMAT:+-f $PACKAGE_FORMAT}
 		echo "===>>> Creating a package for new version $2"
 	else
 		pkgdir=$1 ; echo ''
+		format_option=${BACKUP_FORMAT:+-f $BACKUP_FORMAT}
 		echo "===>>> Creating a backup package for old version $2"
 		backup=backup
 	fi
 
 	pm_cd $pkgdir || fail "Cannot cd into $pkgdir to create a package"
-	if $PM_SU_CMD pkg create $2; then
+	if $PM_SU_CMD pkg create $format_option $2; then
 		if [ "$1" = "$pbu" ]; then
 			if [ -n "$BACKUP" ]; then
 				echo "	===>>> Package saved to $1" ; echo ''
@@ -1616,15 +1621,14 @@ pm_pkg_create () {
 				NB_DELETE="${NB_DELETE}${pkg} "
 			fi
 		elif [ "$1" = "$PACKAGES" ]; then
-			local pkg ; pkg=`echo $2.*`
+			local pkg ; pkg=$2.txz
 
 			if [ -z "$PM_INDEX_ONLY" ]; then
-				local latest_link
+				local pkg_latest_file
 
 				pm_cd_pd $portdir
-				latest_link=`pm_make -V LATEST_LINK`
-				cd ${1}/Latest
-				$PM_SU_CMD ln -sf ../All/$pkg ${latest_link}.txz
+				pkg_latest_file=`pm_make -V PKGLATESTFILE`
+				$PM_SU_CMD install -lr $1/All/$pkg ${pkg_latest_file}
 			fi
 
 			cd ${1}/${portdir%/*}
@@ -1665,7 +1669,7 @@ find_dl_distfiles () {
 	else
 		# Old method, for now
 		if pm_cd $pd/$1; then
-			dist_list=`pm_make_b -V OPTIONSFILE`
+			dist_list=`pm_make_b -V OPTIONS_FILE`
 			dist_list="${dist_list%options}distfiles"
 		else
 			# The port might have moved, etc.; so take a stab at it,
@@ -1803,6 +1807,7 @@ set_distfiles_and_subdir () {
 }
 
 delete_stale_distfiles () {
+	[ -n "$DISTDIR" ] || return # DISTDIR not set because of PM_PACKAGES
 	# Global: distfiles_checked
 	local file answer
 
@@ -1849,6 +1854,7 @@ delete_stale_distfiles () {
 }
 
 delete_all_distfiles () {
+	[ -n "$DISTDIR" ] || return # DISTDIR not set because of PM_PACKAGES
 	# Global: delete_all DISTDIR
 	local origin rc delete_current
 
@@ -2264,12 +2270,14 @@ make_dep_list () {
 
 	for dep_type in $*; do
 		case $dep_type in
-		all-depends-list)
-			var_opt="$var_opt -V BUILD_DEPENDS -V LIB_DEPENDS -V RUN_DEPENDS" ;;
-		build-depends-list)
-			var_opt="$var_opt -V BUILD_DEPENDS -V LIB_DEPENDS" ;;
+		all-depends-list|build-depends-list)
+			var_opt="$var_opt -V PKG_DEPENDS -V EXTRACT_DEPENDS \
+				-V PATCH_DEPENDS -V FETCH_DEPENDS -V BUILD_DEPENDS -V LIB_DEPENDS"
+			[ "$dep_type" = all-depends-list ] && var_opt="$var_opt -V RUN_DEPENDS" ;;
 		run-depends-list)
- 			var_opt="$var_opt -V RUN_DEPENDS -V LIB_DEPENDS" ;;
+			var_opt="$var_opt -V RUN_DEPENDS -V LIB_DEPENDS" ;;
+		test-depends-list)
+			var_opt="$var_opt -V TEST_DEPENDS" ;;
 		*)
 			fail "make_dep_list: Unsupported option '$dep_type'"
 		esac
@@ -3302,7 +3310,7 @@ pm_cd_pd $portdir
 
 if [ -n "$PM_BUILD_ONLY_LIST" ]; then
 	case "$build_only_dl_g" in
-	*" $pd/$portdir "*)
+	*" $pd/$portdir "*|*" $portdir "*)
 		[ -n "$PM_PACKAGES_BUILD" ] && PM_PACKAGES_BUILD=doing_build_only_dep
 		[ -n "$PM_DEL_BUILD_ONLY" ] && PM_DEL_BUILD_ONLY=doing_build_only_dep ;;
 	*)	[ -n "$PM_PACKAGES_BUILD" ] && PM_PACKAGES_BUILD=pmp_build
@@ -3402,31 +3410,19 @@ fetch_package () {
 }
 	if [ -z "$PACKAGESITE" -a -z "$PM_PACKAGES_LOCAL" ]; then
 		release=`uname -r`
+		major_rel=${release%.*}
+		arch=`uname -p`
 
-		case "$release" in
-		[789]\.[0-9]-STABLE|[789]\.[0-9]-PRERELEASE)
-				release=packages-${release%%\.*}-stable ;;
-		[789]\.[0-9]-RELEASE*)
-				release=packages-${release%-RELEASE*}-release ;;
-		9\.0-CURRENT*)	release=packages-9-current ;;
-		10\.0-CURRENT*)	release=packages-10-current ;;
-		11\.0-CURRENT*)	release=packages-11-current ;;
-		12\.0-CURRENT*)	release=packages-12-current ;;
-		*RC[0-9]*)	release=${release%-RC[0-9]*}
-				release=packages-${release}-release ;;
-		*BETA[0-9]*)	release=${release%-BETA[0-9]*}
-				release=packages-${release}-release ;;
-		esac
 
-		sitepath="${PACKAGEROOT:-"http://ftp.freebsd.org"}/pub/FreeBSD/ports/`uname -p`/${release}/"
-		unset release
+		sitepath="${PACKAGEROOT:-"http://pkg.freebsd.org"}/FreeBSD:$major_rel:$arch/latest/All/"
+		unset release major_rel arch
 	else
 		sitepath="${PACKAGESITE%/}"
 		sitepath="${sitepath%Latest}"
 		sitepath="${sitepath%All}"
 	fi
 
-	sitepath="${sitepath%/}/${portdir%/*}/"
+#	sitepath="${sitepath%/}/${portdir%/*}/" # may be required for local packages
 
 	echo "===>>> Checking package repository for latest available version"
 
@@ -3437,11 +3433,12 @@ fetch_package () {
 			latest_pv=${local_package##*/}
 		fi
 		if [ -z "$latest_pv" -a -z "$PM_INDEX_ONLY" ]; then
-			s=`pm_make -V LATEST_LINK`
-			echo "===>>> ... checking: ${LOCAL_PACKAGEDIR}/Latest/${s}.txz"
-			if [ -r "${LOCAL_PACKAGEDIR}/Latest/${s}.txz" ]; then
-				local_package=${LOCAL_PACKAGEDIR}/Latest/${s}.txz
-				latest_pv=`readlink ${LOCAL_PACKAGEDIR}/Latest/${s}.txz`
+			s=`pm_make -V PKGLATESTFILE`
+
+			echo "===>>> ... checking: ${s}"
+			if [ -r "${s}" ]; then
+				local_package=${s}
+				latest_pv=`readlink ${s}`
 				latest_pv=${latest_pv##*/}
 			else
 				pm_v "===>>> No local package for ${new_port}, attempting fetch"
@@ -3753,6 +3750,7 @@ if [ -z "$use_package" ]; then
 	unset np_orphan
 	# Defining NO_DEPENDS ensures that we will control the installation
 	# of the depends, not bsd.port.mk.
+#	export_flavor $(flavor_part "$portdir")
 	eval pm_make_s -DNO_DEPENDS install $port_log_args || install_failed $new_port
 else
 	[ -n "$local_package" ] && ppd=${LOCAL_PACKAGEDIR}/All
@@ -3850,7 +3848,7 @@ fi
 if [ -n "$MAKE_PACKAGE" ]; then
 	if [ -z "$use_package" ]; then
 		echo "===>>> Creating a package for new version $new_port"
-		pm_make_s -D_OPTIONS_OK package >/dev/null || fail "Package creation of $new_port failed"
+		pm_make_s -D_OPTIONS_OK ${PACKAGE_FORMAT:+PKG_SUFX=.$PACKAGE_FORMAT} package >/dev/null || fail "Package creation of $new_port failed"
 		echo "	===>>> Package saved to $PACKAGES/All" ; echo ''
 	else
 		pm_pkg_create $PACKAGES $new_port
@@ -3858,6 +3856,7 @@ if [ -n "$MAKE_PACKAGE" ]; then
 fi
 
 if [ -z "$use_package" -a -z "$DONT_POST_CLEAN" ]; then
+#	export_flavor $(flavor_part $portdir)
 	pm_v "===>>> Running 'make clean' in the background"
 	(pm_make_s clean NOCLEANDEPENDS=ncd2 >/dev/null)&
 	pm_v
