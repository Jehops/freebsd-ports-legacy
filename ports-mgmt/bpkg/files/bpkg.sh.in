#!/bin/sh
# $FreeBSD$

#  Copyright (c) 2007 Andy Kosela <andy.kosela@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.

trap trap_exit 2

pkg=$@

root() {
	if [ `id -u` != 0 ]; then
		echo "Access denied. Root privileges required."
		exit 0
	fi
}

trap_exit() {
	echo -e "\n*** SIGINT detected ***"
	exit 1
}

missing() {
	echo "It seems you typed the port which is not available in /usr/ports/"
	echo "Check your port's name and try again."
	exit 0
}

main() {
	root
	if [ -z "$pkg" ]; then
		echo "bpkg: you didn't specify any package to install/upgrade."
		exit 0
	fi
	
	for e in $pkg; do
		[ -z "`cd /usr/ports && make search path=/$e[0-9]*$`" ] && missing
	done

	echo "Available in ports:"
	for e in $pkg; do
		cd /usr/ports && make search path=/$e[0-9]*$ | awk '/Port/ /Path/ { print $0 "\n" }' 
	done

	for z in $pkg; do
		pkg_install=`cd /usr/ports && make search path=/$z[0-9]*$ | grep Path | cut -d/ -f4,5`

		for e in $pkg_install; do
			e_stripped=`echo $e | cut -d/ -f2`
			e_installed=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5`

			if [ -z "$e_installed" ]; then
				e_install=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
				echo -n "Do you want to install new $e_install? [y] "
			else
				echo -n "Do you want to upgrade installed $e_installed? [y] "
			fi
			read key
			case $key in
				n) ;;
				*) echo -n "Fetch binary package? [y] "
				read key

				if [ ! -z "$e_installed" ]; then
					echo ""
					echo "*** Creating backup package in /usr/tmp/$e_installed.tbz ***"
					cd /usr/tmp/ && pkg_create -b $e_installed
					echo "Done."
				fi

				case $key in

					# Install from port (source)

					n) echo ""
					if [ ! -z "$e_installed" ]; then
						echo "Upgrading installed port:"
						pkg_delete -fi $e_installed
						if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
							echo "*** cannot proceed without first removing the package ***"
							exit 0
						fi
					else
						echo "Installing new port:"
					fi

					echo -n "Do you want to explicitly set config options now? [n] "
					read key2
					case $key2 in
						y) echo -n "Recursive? [n] "
						read key
						case $key in
							y) cd /usr/ports/$e_install && make config-recursive
							cd /usr/ports/$e_install && make install clean
							exit 0;;
							*) cd /usr/ports/$e_install && make config
							cd /usr/ports/$e_install && make install clean
							exit 0;;
						esac;;

						*) cd /usr/ports/$e_install && make install clean
						exit 0;;
					esac
	   				exit 0;;

					# Fetch and install binary package

					*) echo ""
					if [ ! -z "$e_installed" ]; then
						echo "Upgrading installed package:"
						pkg_delete -fi $e_installed
						if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
							echo "*** cannot proceed without first removing the package ***"
							exit 0
						fi
						pkg_add -r $e_stripped
						exit 0
					else
						echo "Installing new package:"
						pkg_add -r $e_stripped
						exit 0
					fi;;
				esac
			esac
		done
	done
}

simulation() {
	root
	if [ -z "$pkg" ]; then
		echo "bpkg: you didn't specify any package to install/upgrade."
		exit 0
	fi
	
	for e in $pkg; do
		[ -z "`cd /usr/ports && make search name=$e-[0-9]`" ] && missing
	done

	echo "Available in ports:"
	for e in $pkg; do
		cd /usr/ports && make search path=/$e[0-9]*$ | awk '/Port/ /Path/ { print $0 "\n" }' 
	done

	for z in $pkg; do
		pkg_install=`cd /usr/ports && make search path=/$z[0-9]*$ | grep Path | cut -d/ -f4,5`

		for e in $pkg_install; do
			e_install=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			e_stripped=`echo $e | cut -d/ -f2`
			e_installed=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5`

			if [ -z "$e_installed" ]; then
				echo -n "Do you want to install new $e_install? [y] "
			else
				echo -n "Do you want to upgrade installed $e_installed? [y] "
			fi
			read key
			case $key in
				n) ;;
				*) echo -n "Fetch binary package? [y] "
				read key

				if [ ! -z "$e_installed" ]; then
					echo ""
					echo "*** Creating backup package in /usr/tmp/$e_installed.tbz ***"
					echo "Done."
				fi

				case $key in

					# Install from port (source)

					n) echo ""
					if [ ! -z "$e_installed" ]; then
						echo "Upgrading installed port:"
						pkg_delete -in $e_installed
						if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
							echo "*** cannot proceed without first removing the package ***"
							exit 0
						fi
					else
						echo "Installing new port:"
					fi

					echo -n "Do you want to explicitly set config options now? [n] "
					read key2
					case $key2 in
						y) echo -n "Recursive? [n] "
						read key
						case $key in
							y) exit 0;;
							*) exit 0;;
						esac;;

						*) exit 0;;
					esac
	   				exit 0;;

					# Fetch and install binary package

					*) echo ""
					if [ ! -z "$e_installed" ]; then
						echo "Upgrading installed package:"
						pkg_delete -in $e_installed
						if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
							echo "*** cannot proceed without first removing the package ***"
							exit 0
						fi
						pkg_add -rn $e_stripped
						exit 0
					else
						echo "Installing new package:"
						pkg_add -rn $e_stripped
						exit 0
					fi;;
				esac
			esac
		done
	done
}

non-interactive() {
	root
	if [ -z "$pkg" ]; then
		echo "bpkg: you didn't specify any package to install/upgrade."
		exit 0
	fi
	
	for e in $pkg; do
		[ -z "`cd /usr/ports && make search name=$e-[0-9]`" ] && missing
	done

	echo "Available in ports:"
	for e in $pkg; do
		cd /usr/ports && make search path=/$e[0-9]*$ | awk '/Port/ /Path/ { print $0 "\n" }' 
	done

	for z in $pkg; do
		pkg_install=`cd /usr/ports && make search path=/$z[0-9]*$ | grep Path | cut -d/ -f4,5`

		for e in $pkg_install; do
			e_install=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			e_stripped=`echo $e | cut -d/ -f2`
			e_installed=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5`

			if [ -z "$e_installed" ]; then
				echo -n "Do you want to install new $e_install? [y] "
			else
				echo -n "Do you want to upgrade installed $e_installed? [y] "
			fi
			read key
			case $key in
				n) ;;
				*) 
				if [ ! -z "$e_installed" ]; then
					echo ""
					echo "*** Creating backup package in /usr/tmp/$e_installed.tbz ***"
					cd /usr/tmp/ && pkg_create -b $e_installed
					echo "Done."
				fi

				# Fetch and install binary package

				echo ""
				if [ ! -z "$e_installed" ]; then
					echo "Upgrading installed package:"
					pkg_delete -f $e_installed
					if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
						echo "*** cannot proceed without first removing the package ***"
						exit 0
					fi
					pkg_add -r $e_stripped
					exit 0
				else
					echo "Installing new package:"
					pkg_add -r $e_stripped
					exit 0
				fi;;
			esac
		done
	done
}

all() {
	root
	echo ""
	echo -n "Do you want to upgrade all installed packages using binary packages? (interactive mode) [y] "
	read key

	case $key in
		n) echo "Upgrading all ports:"
		pkg_delete -ifa 
	   	for e in `pkg_info -aoq`; do
	   		cd /usr/ports/$e && make install clean
	   	done
	   	exit 0;;
		*) echo "Upgrading all packages:"
	   	all=`ls -l /var/db/pkg/ | awk '{print $9}' | sed 's/\(.*\)-.*/\1/g' | awk '{ORS=" " ;print}'`
	   	pkg_delete -ifa && pkg_add -r $all
	   	exit 0;;
	esac
}

all_non-interactive() {
	root
	echo ""
	echo -n "Do you want to upgrade all installed packages using binary packages? (non-interactive mode) [y] "
	read key

	case $key in
		n) echo "Upgrading all ports:"
		pkg_delete -fa
	   	for e in `pkg_info -aoq $pkg`; do
	   		cd /usr/ports/$e && make install clean
	   	done
	   	exit 0;;
		*) echo "Upgrading all packages:"
	   	all=`ls -l /var/db/pkg/ | awk '{print $9}' | sed 's/\(.*\)-.*/\1/g' | awk '{ORS=" " ;print}'`
	   	pkg_delete -fa && pkg_add -r $all
	   	exit 0;;
	esac
}

pkg_info-xI() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			pkg_info -I $info 
			echo ""
		fi
	done
	exit 0
}

pkg_info-xL() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`

		if [ ! -z "$info" ]; then
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -L `echo $info | cut -d/ -f1` 
		else
			echo -e "bpkg: no installed packages match $e\n"
		fi
	done
	exit 0
}

pkg_inf() {
	echo -e "\033[33m*** installed ***\033[0m"
	pkg_info 
	echo ""
	echo "***`pkg_info | wc -l` packages installed     ***"
	exit 0
}

pkg_info-xs() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`

		if [ ! -z "$info" ]; then
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -s `echo $info | cut -d/ -f1` 
		else
			echo -e "bpkg: no installed packages match $e\n"
		fi
	done
	exit 0
}

pkg_info-xr() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo "Information in ports for `echo $i | cut -d/ -f2`:"
				echo ""
				cd /usr/ports && make search path=/$i$ | grep .*-deps
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			echo "Information in ports for `echo $info | cut -d/ -f1 | sed 's/\(.*\)-.*/\1/g'`:"
			echo ""
			cd /usr/ports && make search path=/`echo $info | cut -d: -f3`$ | grep .*-deps
			echo ""
			pkg_info -rR `echo $info | cut -d/ -f1`
		fi
	done
	exit 0
}

pkg_info-xg() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`

		if [ ! -z "$info" ]; then
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -g `echo $info | cut -d/ -f1` 
		else
			echo -e "bpkg: no installed packages match $e\n"
		fi
	done
	exit 0
}

pkg_info-xf() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo "Packing list:"
				cat /usr/ports/$i/pkg-plist
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -f `echo $info | cut -d/ -f1`
		fi
	done
	exit 0
}

pkg_info-xk() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`

		if [ ! -z "$info" ]; then
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -k `echo $info | cut -d/ -f1` 
		else
			echo -e "bpkg: no installed packages match $e\n"
		fi
	done
	exit 0
}

pkg_info-xD() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`

		if [ ! -z "$info" ]; then
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info -D `echo $info | cut -d/ -f1` 
		else
			echo -e "bpkg: no installed packages match $e\n"
		fi
	done
	exit 0
}

pkg_info-x() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo "Description:"
				echo "`cat /usr/ports/$i/pkg-descr`"
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			pkg_info `echo $info | cut -d/ -f1` 
		fi
	done
	exit 0
}

pkg_ver() {
	echo -e "\033[33m*** installed ***\033[0m"
	pkg_version -Iv
	echo ""
	echo "***`pkg_info | wc -l` packages installed     ***"
	exit 0
}

pkg_path() {
	path=`cd /usr/ports && make search path=/$pkg | grep Path | cut -d/ -f4,5`
	for e in $path; do
		path2=`cd /usr/ports && make search path=$e$ | grep Path | cut -d/ -f4,5`
		if [ ! -z "$path2" ]; then
			echo "$path2" ; cat /usr/ports/$path2/Makefile | grep COMMENT | cut -d= -f2
		fi
	done
	exit 0
}

pkg_makefile() {
	path=`cd /usr/ports && make search path=/$pkg$ | grep Path | cut -d/ -f4,5`
	[ -z "$path" ] && missing

	less /usr/ports/$path/Makefile 2>/dev/null
	exit 0
}

make_search() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				cd /usr/ports && make search path=/$i$
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			cd /usr/ports && make search path=/`echo $info | cut -d: -f3`$
		fi
	done
	exit 0
}

make_search_S() {
	for e in $pkg; do
		cd /usr/ports && make search path=$e
	done
	exit 0
}

pkg_find() {
	arch=`uname -m`
	sys=`uname -r | cut -d- -f1,2 | tr '[:upper:]' '[:lower:]'`

	for e in $pkg; do
		echo "ls $e*" >> /tmp/bpkg.tmp
	done
	ftp -4Va ftp://ftp.freebsd.org/pub/FreeBSD/ports/$arch/packages-$sys/Latest/ < /tmp/bpkg.tmp
	rm /tmp/bpkg.tmp
	exit 0
}

pkg_delete-xr() {
	root
	z=`pkg_info -xoQ $pkg 2>/dev/null`

	if [ -z "$z" ]; then
        	echo "bpkg: no installed packages match pattern(s)"
		exit 0
	fi

	pkg_info -xoQ $pkg | awk -F: '{OFS=": " ; print $2, $1}'
	echo ""
	echo -e "\033[33m*** installed ***\033[0m"
	echo -n "Do you want to use recursive removal? [n] "
	read key

	case $key in
        	y) echo -n "Do you want to use force removal? [n] "
		read key2
		case $key2 in
			y) pkg_delete -xrfi $pkg
			exit 0;;
			*) pkg_delete -xri $pkg
			exit 0;;
		esac;;
		*) echo -n "Do you want to use force removal? [n] "
		read key2
		case $key2 in
			y) pkg_delete -xf $pkg
			exit 0;;
			*) pkg_delete -x $pkg
			exit 0;;
		esac;;
	esac
}

pkg_clean() {
	root
	echo "Cleaning /usr/ports/distfiles/*"
	rm -rf /usr/ports/distfiles/* 1>/dev/null 2>&1
	echo "Done."
	exit 0
}

pkg_clean2() {
	root
	echo "Cleaning /usr/ports/distfiles/* and /usr/ports/*/*/work/"
	rm -rf /usr/ports/distfiles/* 1>/dev/null 2>&1 ; rm -rf /usr/ports/*/*/work/ 1>/dev/null 2>&1
	echo "Done."
	exit 0
}

pkg_which-() {
	grep "$pkg"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
	sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
	awk -F: '{ print $1 ":\t" $2 }'
	exit 0
}

pkg_backup() {
	root
	z=`pkg_info -xoQ $pkg 2>/dev/null`

	if [ -z "$z" ]; then
        	echo "bpkg: no installed packages match pattern(s)"
		exit 0
	fi

	pkg_install=`pkg_info -xoQ $pkg | cut -d: -f1 | awk '{ORS=" " ; print}'`
	echo "Creating backup package(s) "$pkg_install"in /usr/tmp/"
	for e in `pkg_info -xoq $pkg`; do
		cd /usr/tmp/ && pkg_create -xb $e
	done
	echo "Done."
	exit 0
}	

pkg_time() {
	echo "Packages (date of installation):"
	echo ""
	/bin/ls -lTt /var/db/pkg/*/+CONTENTS | awk -F' ' '{ print $6,$7,$8,$9,$10 }' | cut -d/ -f1,5 
	echo ""
	echo "***`pkg_info | wc -l` packages installed     ***"
	exit 0
}

make_showc() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo -n "Do you want to display config options recursively? [n] "
				read key
				case $key in
					y) cd /usr/ports/$i && make showconfig-recursive;;
					*) cd /usr/ports/$i && make showconfig;; 
				esac
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			echo -n "Do you want to display config options recursively? [n] "
			read key
			case $key in
				y) cd /usr/ports/`echo $info | cut -d: -f3` && make showconfig-recursive;;
				*) cd /usr/ports/`echo $info | cut -d: -f3` && make showconfig;; 
			esac
			echo ""
		fi
	done
	exit 0
}

make_rmc() {
	root
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo -n "Do you want to remove config options recursively? [n] "
				read key
				case $key in
					y) cd /usr/ports/$i && make rmconfig-recursive;;
					*) cd /usr/ports/$i && make rmconfig;; 
				esac
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			echo -n "Do you want to remove config options recursively? [n] "
			read key
			case $key in
				y) cd /usr/ports/`echo $info | cut -d: -f3` && make rmconfig-recursive;;
				*) cd /usr/ports/`echo $info | cut -d: -f3` && make rmconfig;; 
			esac
			echo ""
		fi
	done
	exit 0
}

make_config() {
	root
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			path=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
			for i in $path; do
				echo -e "\033[33m*** not installed ***\033[0m"
				echo "$i: `cat /usr/ports/$i/Makefile | grep COMMENT | cut -d= -f2`"
				echo ""
				echo -n "Do you want to set config options recursively? [n] "
				read key
				case $key in
					y) cd /usr/ports/$i && make config-recursive;;
					*) cd /usr/ports/$i && make config;; 
				esac
				echo ""
			done
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			echo -n "Do you want to set config options recursively? [n] "
			read key
			case $key in
				y) cd /usr/ports/`echo $info | cut -d: -f3` && make config-recursive;;
				*) cd /usr/ports/`echo $info | cut -d: -f3` && make config;; 
			esac
			echo ""
		fi
	done
	exit 0
}

make_depends() {
	for e in $pkg; do
		[ -z "`cd /usr/ports && make search path=/$e[0-9]*$`" ] && missing
	done

	echo "Available in ports:"
	for e in $pkg; do
		cd /usr/ports && make search path=/$e[0-9]*$ | awk '/Port/ /Path/ { print $0 "\n" }' 
	done

	for z in $pkg; do
		pkg_install=`cd /usr/ports && make search path=/$z[0-9]*$ | grep Path | cut -d/ -f4,5`

		for e in $pkg_install; do
			e_stripped=`echo $e | cut -d/ -f2`
			e_installed=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5`

			if [ -z "$e_installed" ]; then
				e_install=`cd /usr/ports && make search path=/$e[0-9]*$ | grep Path | cut -d/ -f4,5`
				echo -n "Do you want to install new $e_install? [y] "
			else
				echo -n "Do you want to upgrade installed $e_installed? [y] "
			fi
			read key
			case $key in
				n) ;;
				*) 
				if [ ! -z "$e_installed" ]; then
					echo ""
					echo "*** Creating backup package in /usr/tmp/$e_installed.tbz ***"
					cd /usr/tmp/ && pkg_create -b $e_installed
					echo "Done."
				fi

				echo ""
				if [ ! -z "$e_installed" ]; then
					echo "Upgrading installed port and all dependencies:"
					pkg_delete -fi $e_installed
					if [ ! -z `pkg_info -oq $e_installed 2>/dev/null` ]; then
						echo "*** cannot proceed without first removing the package ***"
						exit 0
					fi
				else
					echo "Installing new port and all dependencies:"
				fi

				echo -n "Do you want to explicitly set config options now? [n] "
				read key2
				case $key2 in
					y) echo -n "Recursive? [n] "
					read key
					case $key in
						y) cd /usr/ports/$e_install && make config-recursive
						cd /usr/ports/$e_install && make depends && make install clean
						exit 0;;
						*) cd /usr/ports/$e_install && make config
						cd /usr/ports/$e_install && make depends && make install clean
						exit 0;;
					esac;;

					*) cd /usr/ports/$e_install && make depends && make install clean
					exit 0;;
				esac
	   			exit 0;;
			esac
		done
	done
}

make_ldd() {
	for e in $pkg; do
		info=`grep $e /var/db/pkg/*/+CONTENTS | grep -w ORIGIN | cut -d/ -f5,6,7`
	
		if [ -z "$info" ]; then
			echo "bpkg: no installed packages match pattern(s)"
		else
			echo -e "\033[33m*** installed ***\033[0m"
			echo "`echo $info | cut -d: -f3`: `echo $info | cut -d/ -f1`" 
			echo ""
			echo "List of dynamic object dependencies:"
			echo ""
			pkg=`echo $info | cut -d/ -f1`
			bin=`pkg_info -L $pkg | awk '/\/usr\/local\/bin/ /\/usr\/local\/sbin/'`
			for i in $bin; do
				/usr/bin/ldd -a $i
			done
			echo ""
		fi
	done
	exit 0
}

make_ldd_all() {
	echo ""
	echo "List of all missing dynamic object dependencies:"
	echo ""

	for e in `/bin/ls -l /bin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /bin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /sbin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /sbin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/bin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/bin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/games/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/games/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/libexec/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/libexec/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/sbin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/sbin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/local/bin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/local/bin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/local/libexec/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/local/libexec/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/local/sbin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/local/sbin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/X11R6/bin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/X11R6/bin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/X11R6/libexec/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/X11R6/libexec/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	for e in `/bin/ls -l /usr/X11R6/sbin/ 2>/dev/null | awk -F' ' '{print $9}'`; do 
		libs=`/usr/bin/ldd -a /usr/X11R6/sbin/$e 2>/dev/null | grep found`
		if [ ! -z "$libs" ]; then 
			grep "$e"$ /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
			sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
			awk -F: '{ print $1 ":\t" $2 }'
			echo "$libs"
			for i in `echo $libs | cut -d' ' -f1 | cut -d. -f1,2`; do
				grep "$i". /var/db/pkg/*/+CONTENTS | awk -F 'pkg/' '{ print $2 }' | \
				sed '/@dirrm/ d ; /@unexec/ d ; /@comment/ d ; s/\/+CONTENTS//g ; s/:@comment .*ORIGIN//g' | \
				awk -F: '{ print $2 "\t [" $1 "]" }'
			done
			echo ""
		fi
	done
	exit 0
}

help() {
	echo "bpkg version `pkg_info -xI bpkg | cut -d- -f2 | cut -d' ' -f1`" 
	echo ""
	echo "Usage: bpkg [-bdDeEfFgiIkLmMnNoOprsSwz] pkg-name ..."
	echo "       bpkg [-aAcChltvZ]"
	echo ""
	echo "Please see the bpkg(8) man page for more information"
	echo ""
	exit 0
}

# End of functions
################################################################################

while getopts b:d:D:e:E:f:F:g:i:I:k:L:m:M:n:N:o:O:p:r:s:S:w:z:aAcChltvZ opts; do
	case $opts in
		b) pkg=$OPTARG
		   pkg_backup;;	
		d) pkg=$OPTARG
		   pkg_delete-xr;;
		D) pkg=$OPTARG
		   pkg_info-x;;
		e) pkg=$OPTARG
		   make_config;;
		E) pkg=$OPTARG
		   make_depends;;
		f) pkg=$OPTARG
		   pkg_info-xf;;
		F) pkg=$OPTARG
		   pkg_find;;
		g) pkg=$OPTARG
		   pkg_info-xg;;
		i) pkg=$OPTARG
		   make_search;;
		I) pkg=$OPTARG
		   pkg_info-xI;;
		k) pkg=$OPTARG
		   pkg_info-xk;;
		L) pkg=$OPTARG
		   pkg_info-xL;;
		m) pkg=$OPTARG
		   pkg_makefile;;
		M) pkg=$OPTARG
		   pkg_info-xD;;
		n) pkg=$OPTARG
		   simulation;;
		N) pkg=$OPTARG
		   non-interactive;;
		o) pkg=$OPTARG
		   make_showc;;
		O) pkg=$OPTARG
		   make_rmc;;
		p) pkg=$OPTARG
		   pkg_path;;
		r) pkg=$OPTARG
		   pkg_info-xr;;
		s) pkg=$OPTARG
		   pkg_info-xs;;
		S) pkg=$OPTARG
		   make_search_S;;
		w) pkg=$OPTARG
		   pkg_which-;;
		z) pkg=$OPTARG
		   make_ldd;;
		a) all;;
		A) all_non-interactive;;
		c) pkg_clean;;
		C) pkg_clean2;;
		h) help;;
		l) pkg_inf;;
		t) pkg_time;;
		v) pkg_ver;;
		Z) make_ldd_all;;
		*) help;;
	esac
done

main
