*** src/ftpd.c.bak	Mon Jan 20 08:05:11 1997
--- src/ftpd.c	Thu Jan 30 17:46:16 1997
***************
*** 235,246 ****
  int logging = 0;
  int log_commands = 0;
  
- #ifdef SKEY			/* H* add-on.  Not as elegant as Wietse's */
- #include "skey.h"		/* logdaemon package, but does the job.   */
- struct skey skey_blk;
- char chbuff[80];
- #endif
- 
  #ifdef SECUREOSF
  #define SecureWare
  #include <prot.h>
--- 235,240 ----
***************
*** 1201,1212 ****
              acl_setfunctions();
  
  #ifdef SKEY
! /* 0 means we found the user and the skeykeys file is open for update. */
!     if (skeychallenge (&skey_blk, name, chbuff) == 0)
! 	reply (331, "[%s] required for %s.", chbuff, name);
!     else
! #endif
      reply(331, "Password required for %s.", name);
      askpasswd = 1;
      /* Delay before reading passwd after first failed attempt to slow down
       * passwd-guessing programs. */
--- 1195,1205 ----
              acl_setfunctions();
  
  #ifdef SKEY
!     pwok = skeyaccess(name, NULL, remotehost, remoteaddr);
!     reply(331, "%s", skey_challenge(name, pw, pwok));
! #else
      reply(331, "Password required for %s.", name);
+ #endif
      askpasswd = 1;
      /* Delay before reading passwd after first failed attempt to slow down
       * passwd-guessing programs. */
***************
*** 1378,1389 ****
          xpasswd = crypt(passwd, salt);
  #endif
  #endif
- #endif
- #ifdef SKEY
- /* comment the next line if you REALLY want to allow replayable passwds. */
- 	strcpy (xpasswd, "wrongo:spazmoid");  /* disable regular passwds */
- 	if (skeyverify (&skey_blk, passwd) == 0)
- 	    strcpy (xpasswd, pw->pw_passwd);	/* do it the sleazy way */
  #endif
  #ifdef ULTRIX_AUTH
          if ((numfails = ultrix_check_pass(passwd, xpasswd)) < 0) {
--- 1371,1376 ----
