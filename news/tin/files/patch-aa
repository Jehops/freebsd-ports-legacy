*** src/art.c.orig	Fri Nov  1 19:48:33 1996
--- src/art.c	Fri Nov  8 07:34:06 1996
***************
*** 594,602 ****
  	ptr = buf;
  
  	forever {
! 		for (ptrline = ptr; *ptr && (*ptr != '\n' || (isspace(*(ptr+1)) && *(ptr+1) != '\n')); ptr++) {
  			if (((*ptr) & 0xFF) < ' ') {
! 				if (*ptr == '\n' && isspace(*(ptr+1)) && *(ptr+1) !='\n')
  					*ptr=1;
  				else
  					*ptr = ' ';
--- 594,602 ----
  	ptr = buf;
  
  	forever {
! 		for (ptrline = ptr; *ptr && (*ptr != '\n' || (isspace((unsigned char)*(ptr+1)) && *(ptr+1) != '\n')); ptr++) {
  			if (((*ptr) & 0xFF) < ' ') {
! 				if (*ptr == '\n' && isspace((unsigned char)*(ptr+1)) && *(ptr+1) !='\n')
  					*ptr=1;
  				else
  					*ptr = ' ';
***************
*** 940,946 ****
  		 */
  		q = strchr (p, '\t');
  		if (q == (char *) 0) {
! 			if (!*p || (!isdigit(*p))) {
  #ifdef DEBUG
  				error_message ("Bad overview record (Lines) [%s]", p);
  				debug_nntp ("iReadNovFile", "Bad overview record (Lines)");
--- 940,946 ----
  		 */
  		q = strchr (p, '\t');
  		if (q == (char *) 0) {
! 			if (!*p || (!isdigit((unsigned char)*p))) {
  #ifdef DEBUG
  				error_message ("Bad overview record (Lines) [%s]", p);
  				debug_nntp ("iReadNovFile", "Bad overview record (Lines)");
***************
*** 951,957 ****
  		} else {
  			*q = '\0';
  		}
! 		if(isdigit(*p))
  		  arts[top].lines = atoi (p);
  		else
  		  arts[top].lines = -1;
--- 951,957 ----
  		} else {
  			*q = '\0';
  		}
! 		if(isdigit((unsigned char)*p))
  		  arts[top].lines = atoi (p);
  		else
  		  arts[top].lines = -1;
*** src/charset.c.orig	Sat Oct 26 22:57:29 1996
--- src/charset.c	Fri Nov  8 07:34:06 1996
***************
*** 280,293 ****
  		while (line[i++] == ' ')
  			;  /* search for first non blank */
  		i--;
! 		if (!isalnum(line[i])) {
  			continue;  /*quoting char */
  		}
  
  		len = strlen (line) - 1;
  		for (i = 1; i < len; i++) {
  			if (((line[i] == '\\') || (line[i] == '\"')) &&
! 			    (isalnum(line[i-1])) && (isalnum(line[i+1]))) {
  				fclose (fp);
  				return TRUE;
  			}
--- 280,293 ----
  		while (line[i++] == ' ')
  			;  /* search for first non blank */
  		i--;
! 		if (!isalnum((unsigned char)line[i])) {
  			continue;  /*quoting char */
  		}
  
  		len = strlen (line) - 1;
  		for (i = 1; i < len; i++) {
  			if (((line[i] == '\\') || (line[i] == '\"')) &&
! 			    (isalnum((unsigned char)line[i-1])) && (isalnum((unsigned char)line[i+1]))) {
  				fclose (fp);
  				return TRUE;
  			}
*** src/misc.c.orig	Sat Oct 26 22:57:32 1996
--- src/misc.c	Fri Nov  8 07:34:07 1996
***************
*** 540,546 ****
  	int use_base;
  {
  #ifndef HAVE_STRTOL
! #define DIGIT(x) (isdigit(x)? ((x)-'0'): (10+tolower(x)-'a'))
  #define MBASE 36
  
  	long	val;
--- 540,546 ----
  	int use_base;
  {
  #ifndef HAVE_STRTOL
! #define DIGIT(x) (isdigit((unsigned char)x)? ((x)-'0'): (10+tolower(x)-'a'))
  #define MBASE 36
  
  	long	val;
***************
*** 551,557 ****
  
  	if (use_base < 0 || use_base > MBASE)
  		goto OUT;
! 	while (isspace (*str))
  		++str;
  	if (*str == '-') {
  		++str;
--- 551,557 ----
  
  	if (use_base < 0 || use_base > MBASE)
  		goto OUT;
! 	while (isspace ((unsigned char)*str))
  		++str;
  	if (*str == '-') {
  		++str;
***************
*** 575,581 ****
  		 * for any base > 10, the digits incrementally following
  		 * 9 are assumed to be "abc...z" or "ABC...Z"
  		 */
! 		while (isalnum (*str) && (xx = DIGIT (*str)) < use_base) {
  			/* accumulate neg avoids surprises near maxint */
  			val = use_base * val - xx;
  			++str;
--- 575,581 ----
  		 * for any base > 10, the digits incrementally following
  		 * 9 are assumed to be "abc...z" or "ABC...Z"
  		 */
! 		while (isalnum ((unsigned char)*str) && (xx = DIGIT (*str)) < use_base) {
  			/* accumulate neg avoids surprises near maxint */
  			val = use_base * val - xx;
  			++str;
***************
*** 1047,1053 ****
  		switch (state) {
  
  		case 'A':
! 			if (isspace(*from_line)) /* Found first non-blank? */
  				break;		 /* No --> keep looking */
  
  			nonblank = from_line;
--- 1047,1053 ----
  		switch (state) {
  
  		case 'A':
! 			if (isspace((unsigned char)*from_line)) /* Found first non-blank? */
  				break;		 /* No --> keep looking */
  
  			nonblank = from_line;
***************
*** 1087,1093 ****
  
  			default:
  				newstate = state; /* stay in this state */
! 				if (!isspace(*from_line))
  					*addrptr++ = *from_line;
  			}  /* switch(*from_line) */
  			break;
--- 1087,1093 ----
  
  			default:
  				newstate = state; /* stay in this state */
! 				if (!isspace((unsigned char)*from_line))
  					*addrptr++ = *from_line;
  			}  /* switch(*from_line) */
  			break;
***************
*** 1095,1101 ****
  		case '<':
  			if (*from_line == '>')
  				newstate = '>';
! 			else if (isspace(*from_line))
  				*nameptr++ = *from_line;
  			else
  				*addrptr++ = *from_line;
--- 1095,1101 ----
  		case '<':
  			if (*from_line == '>')
  				newstate = '>';
! 			else if (isspace((unsigned char)*from_line))
  				*nameptr++ = *from_line;
  			else
  				*addrptr++ = *from_line;
***************
*** 1152,1158 ****
  		strcpy(fname, "");
  	else {
  		while (--nameptr >= name) {
! 			if (isspace(*nameptr) || (*nameptr == '"'))
  				*nameptr = '\0';
  			else
  				break;
--- 1152,1158 ----
  		strcpy(fname, "");
  	else {
  		while (--nameptr >= name) {
! 			if (isspace((unsigned char)*nameptr) || (*nameptr == '"'))
  				*nameptr = '\0';
  			else
  				break;
***************
*** 1162,1168 ****
  
  		nameptr = name;
  		while (*(nameptr) != '\0') {
! 			if (!(isspace(*nameptr) || (*nameptr == '"')))
  				break;
  			else
  				nameptr++;
--- 1162,1168 ----
  
  		nameptr = name;
  		while (*(nameptr) != '\0') {
! 			if (!(isspace((unsigned char)*nameptr) || (*nameptr == '"')))
  				break;
  			else
  				nameptr++;
***************
*** 1255,1261 ****
  				s += 3;
  			else if (*(s+2) == ' ' && *(s+3) == ':')
  				s += 4;
! 			else if (*(s+2) == '^' && isdigit(*(s+3)) && *(s+4) == ':')
  				s += 5; 		/* hurray nn */
  			else
  				break;
--- 1255,1261 ----
  				s += 3;
  			else if (*(s+2) == ' ' && *(s+3) == ':')
  				s += 4;
! 			else if (*(s+2) == '^' && isdigit((unsigned char)*(s+3)) && *(s+4) == ':')
  				s += 5; 		/* hurray nn */
  			else
  				break;
***************
*** 1268,1274 ****
  		for (e = s; *e; e++)	/* NULL out trailing whitespace */
  			;
  
! 		while (e-- > s && isspace(*e)) {
  			*e = '\0';
  		}
  	}
--- 1268,1274 ----
  		for (e = s; *e; e++)	/* NULL out trailing whitespace */
  			;
  
! 		while (e-- > s && isspace((unsigned char)*e)) {
  			*e = '\0';
  		}
  	}
*** src/nntplib.c.orig	Sat Oct 26 22:57:33 1996
--- src/nntplib.c	Fri Nov  8 07:34:07 1996
***************
*** 339,345 ****
  	memset((char *) &sock_in, '\0', sizeof (sock_in));
  	sock_in.sin_family = AF_INET;
  	sock_in.sin_port = htons (port);
! 	if (!isdigit(*machine) ||
  	    (long)(sock_in.sin_addr.s_addr = inet_addr (machine)) == -1) {
  		if ((hp = gethostbyname (machine)) == NULL) {
  			fprintf (stderr, "gethostbyname: %s: host unknown\n", machine);
--- 339,345 ----
  	memset((char *) &sock_in, '\0', sizeof (sock_in));
  	sock_in.sin_family = AF_INET;
  	sock_in.sin_port = htons (port);
! 	if (!isdigit((unsigned char)*machine) ||
  	    (long)(sock_in.sin_addr.s_addr = inet_addr (machine)) == -1) {
  		if ((hp = gethostbyname (machine)) == NULL) {
  			fprintf (stderr, "gethostbyname: %s: host unknown\n", machine);
***************
*** 415,421 ****
      sp->s_port = htons (IPPORT_NNTP);
  #endif
  	/* If not a raw ip address, try nameserver */
! 	if (!isdigit(*machine) ||
  	    (long)(defaddr.s_addr = (long) inet_addr (machine)) == -1) {
  		hp = gethostbyname (machine);
  	} else {
--- 415,421 ----
      sp->s_port = htons (IPPORT_NNTP);
  #endif
  	/* If not a raw ip address, try nameserver */
! 	if (!isdigit((unsigned char)*machine) ||
  	    (long)(defaddr.s_addr = (long) inet_addr (machine)) == -1) {
  		hp = gethostbyname (machine);
  	} else {
*** src/nntpw32.c.orig	Sun Oct 27 18:42:55 1996
--- src/nntpw32.c	Fri Nov  8 07:34:07 1996
***************
*** 470,476 ****
  		return (-1);
  	}
  	/* If not a raw ip address, try nameserver */
! 	if (! isdigit(*machine) ||
  	    (long)(defaddr.s_addr = (long) inet_addr (machine)) == -1) {
  		hp = gethostbyname (machine);
  	} else {
--- 470,476 ----
  		return (-1);
  	}
  	/* If not a raw ip address, try nameserver */
! 	if (! isdigit((unsigned char)*machine) ||
  	    (long)(defaddr.s_addr = (long) inet_addr (machine)) == -1) {
  		hp = gethostbyname (machine);
  	} else {
*** src/open.c.orig	Fri Nov  1 19:30:47 1996
--- src/open.c	Fri Nov  8 07:25:08 1996
***************
*** 499,508 ****
  			}
  			if (atoi (buf) == OK_NOTEXT) {
  				ptr = buf;
! 				while (isspace(*ptr)) {
  					ptr++;
  				}
! 				while (isdigit(*ptr)) {
  					ptr++;
  				}
  				head_next = atoi (ptr);
--- 499,508 ----
  			}
  			if (atoi (buf) == OK_NOTEXT) {
  				ptr = buf;
! 				while (isspace((unsigned char)*ptr)) {
  					ptr++;
  				}
! 				while (isdigit((unsigned char)*ptr)) {
  					ptr++;
  				}
  				head_next = atoi (ptr);
*** src/post.c.orig	Tue Oct 29 03:20:45 1996
--- src/post.c	Fri Nov  8 07:25:08 1996
***************
*** 1057,1063 ****
  		(*what)++;
  	if (**what) {
  		while (**what && **what != '>'
! 		       && !isspace (**what))
  			*(*where)++ = *(*what)++;
  		if (**what != '>')
  			*where = oldpos;
--- 1057,1063 ----
  		(*what)++;
  	if (**what) {
  		while (**what && **what != '>'
! 		       && !isspace ((unsigned char)**what))
  			*(*where)++ = *(*what)++;
  		if (**what != '>')
  			*where = oldpos;
***************
*** 1091,1100 ****
  skip_id (id)
  	char **id;
  {
! 	while (**id && isspace (**id))
  		(*id)++;
  	if (**id) {
! 		while (**id && !isspace (**id))
  			(*id)++;
  	}
  }
--- 1091,1100 ----
  skip_id (id)
  	char **id;
  {
! 	while (**id && isspace ((unsigned char)**id))
  		(*id)++;
  	if (**id) {
! 		while (**id && !isspace ((unsigned char)**id))
  			(*id)++;
  	}
  }
***************
*** 1103,1109 ****
  damaged_id (id)
  	char *id;
  {
! 	while (*id && isspace (*id))
  		id++;
  	if (*id != '<')
  		return 1;
--- 1103,1109 ----
  damaged_id (id)
  	char *id;
  {
! 	while (*id && isspace ((unsigned char)*id))
  		id++;
  	if (*id != '<')
  		return 1;
*** src/rfc1521.c.orig	Sat Oct 26 22:57:06 1996
--- src/rfc1521.c	Fri Nov  8 07:25:08 1996
***************
*** 270,280 ****
  		}
  		b = buffer;
  		while (*line) {
! 			if (isspace (*line) && *line != '\n') {
  				char *l = line + 1;
  
  				while (*l) {
! 					if (!isspace (*l)) {	/* it's not trailing whitespace, no encoding needed */
  						*b++ = *line++;
  						xpos++;
  						break;
--- 270,280 ----
  		}
  		b = buffer;
  		while (*line) {
! 			if (isspace ((unsigned char)*line) && *line != '\n') {
  				char *l = line + 1;
  
  				while (*l) {
! 					if (!isspace ((unsigned char)*l)) {    /* it's not trailing whitespace, no encoding needed */
  						*b++ = *line++;
  						xpos++;
  						break;
*** src/rfc1522.c.orig	Sat Oct 26 22:57:06 1996
--- src/rfc1522.c	Fri Nov  8 07:25:09 1996
***************
*** 225,235 ****
  	t = buffer;
  	while (*c && t - buffer < 2048) {
  		if (*c != '=') {
! 			if (adjacentflag && isspace (*c)) {
  				char *dd;
  
  				dd = c + 1;
! 				while (isspace (*dd))
  					dd++;
  				if (*dd == '=') {	/* brute hack, makes mistakes under certain circumstances comp. 6.2 */
  					c++;
--- 225,235 ----
  	t = buffer;
  	while (*c && t - buffer < 2048) {
  		if (*c != '=') {
! 			if (adjacentflag && isspace ((unsigned char)*c)) {
  				char *dd;
  
  				dd = c + 1;
! 				while (isspace ((unsigned char)*dd))
  					dd++;
  				if (*dd == '=') {	/* brute hack, makes mistakes under certain circumstances comp. 6.2 */
  					c++;
***************
*** 297,303 ****
  	int nonprint = 0;
  
  	/* first skip all leading whitespaces */
! 	while (*w && isspace (*w))
  		w++;
  
  	/* then check the next word */
--- 297,303 ----
  	int nonprint = 0;
  
  	/* first skip all leading whitespaces */
! 	while (*w && isspace ((unsigned char)*w))
  		w++;
  
  	/* then check the next word */
***************
*** 332,340 ****
  	char *x;
  
  	x = w;
! 	while (*x && isspace (*x))
  		x++;
! 	while (*x && !isspace (*x))
  		x++;
  	return x - w;
  }
--- 332,340 ----
  	char *x;
  
  	x = w;
! 	while (*x && isspace ((unsigned char)*x))
  		x++;
! 	while (*x && !isspace ((unsigned char)*x))
  		x++;
  	return x - w;
  }
***************
*** 474,480 ****
  				quoting = 0;
  			} else {
  				/* process whitespace in-between by quoting it properly */
! 				while (*what && isspace (*what)) {
  					if (*what == 32 /* not ' ', compare chapter 4!*/) {
  						*t++ = '_';
  						ewsize++;
--- 474,480 ----
  				quoting = 0;
  			} else {
  				/* process whitespace in-between by quoting it properly */
! 				while (*what && isspace ((unsigned char)*what)) {
  					if (*what == 32 /* not ' ', compare chapter 4!*/) {
  						*t++ = '_';
  						ewsize++;
***************
*** 507,513 ****
  				   word one (well, just assume an empty
  				   word). */
  		while (*c) {
! 			if (isspace (*c)) {
  				/* According to rfc1522, header lines
  				 * containing encoded words are limited to 76
  				 * chars, but if the first line is too long
--- 507,513 ----
  				   word one (well, just assume an empty
  				   word). */
  		while (*c) {
! 			if (isspace ((unsigned char)*c)) {
  				/* According to rfc1522, header lines
  				 * containing encoded words are limited to 76
  				 * chars, but if the first line is too long
***************
*** 522,534 ****
  					*((*where)++) = '\n';
  					column = 0;
  				}
! 				if (c > buf && !isspace (*(c - 1))) {
  					word_cnt++;
  				}
  				*((*where)++) = *c++;
  				column++;
  			} else
! 				while (*c && !isspace (*c)) {
  					*((*where)++) = *c++;
  					column++;
  				}
--- 522,534 ----
  					*((*where)++) = '\n';
  					column = 0;
  				}
! 				if (c > buf && !isspace ((unsigned char)*(c - 1))) {
  					word_cnt++;
  				}
  				*((*where)++) = *c++;
  				column++;
  			} else
! 				while (*c && !isspace ((unsigned char)*c)) {
  					*((*where)++) = *c++;
  					column++;
  				}
***************
*** 592,598 ****
  		buffer_to_network(buffer);
  #endif
  		if (header[0]
! 		    && (!isspace (buffer[0]) || isreturn(buffer[0]))) {
                          if (allow_8bit_header)
                             fputs(header,g);
                          else
--- 592,598 ----
  		buffer_to_network(buffer);
  #endif
  		if (header[0]
! 		    && (!isspace ((unsigned char)buffer[0]) || isreturn(buffer[0]))) {
                          if (allow_8bit_header)
                             fputs(header,g);
                          else
*** src/vms.c.orig	Sun Oct 27 18:43:06 1996
--- src/vms.c	Fri Nov  8 07:34:07 1996
***************
*** 98,111 ****
    while (*q) {
      if (cc > 0) {
        if (cc > 1 && *(q-1) == 'c' && *(q-2) == 'M') {
! 	if (islower(*q))
  	  *q = toupper(*q);
        } else
! 	if (isupper(*q))
  	  *q = tolower(*q);
      } else
        if (cc == 0)
! 	if (islower(*q))
  	  *q = toupper(*q);
      if (*q == '_' || *q == ' ') {
        *q = ' ';
--- 98,111 ----
    while (*q) {
      if (cc > 0) {
        if (cc > 1 && *(q-1) == 'c' && *(q-2) == 'M') {
! 	if (islower((unsigned char)*q))
  	  *q = toupper(*q);
        } else
! 	if (isupper((unsigned char)*q))
  	  *q = tolower(*q);
      } else
        if (cc == 0)
! 	if (islower((unsigned char)*q))
  	  *q = toupper(*q);
      if (*q == '_' || *q == ' ') {
        *q = ' ';
