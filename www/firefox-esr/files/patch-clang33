--- js/src/jspropertycacheinlines.h~
+++ js/src/jspropertycacheinlines.h
@@ -31,7 +31,7 @@ JS_ALWAYS_INLINE void
 js::PropertyCache::test(JSContext *cx, jsbytecode *pc, JSObject *&obj,
                         JSObject *&pobj, PropertyCacheEntry *&entry, PropertyName *&name)
 {
-    AssertRootingUnnecessary assert(cx);
+    js::AssertRootingUnnecessary assert(cx);
 
     JS_ASSERT(this == &JS_PROPERTY_CACHE(cx));
 
--- js/src/vm/ObjectImpl-inl.h~
+++ js/src/vm/ObjectImpl-inl.h
@@ -176,9 +176,9 @@ js::ObjectImpl::initializeSlotRange(uint
     JSCompartment *comp = compartment();
     uint32_t offset = start;
     for (HeapSlot *sp = fixedStart; sp < fixedEnd; sp++)
-        sp->init(comp, this->asObjectPtr(), offset++, UndefinedValue());
+        sp->init(comp, this->asObjectPtr(), offset++, js::UndefinedValue());
     for (HeapSlot *sp = slotsStart; sp < slotsEnd; sp++)
-        sp->init(comp, this->asObjectPtr(), offset++, UndefinedValue());
+        sp->init(comp, this->asObjectPtr(), offset++, js::UndefinedValue());
 }
 
 inline bool
