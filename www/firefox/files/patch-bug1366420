commit dfe9efffb57b
Author: Marco Bonardo <mbonardo@mozilla.com>
Date:   Wed Oct 4 11:13:19 2017 +0200

    Bug 1366420. r=standard8, a=ritu
    
    MozReview-Commit-ID: FOIqr5RdRjz
    
    --HG--
    extra : source : 08312cdfb2304264e6871357fe2e6e7831272d21
---
 toolkit/components/places/BookmarkHTMLUtils.jsm    |  2 +-
 .../unit/test_bookmarks_html_escape_entities.js    | 81 ++++++++++++++++++++++
 toolkit/components/places/tests/unit/xpcshell.ini  |  1 +
 3 files changed, 83 insertions(+), 1 deletion(-)

diff --git toolkit/components/places/BookmarkHTMLUtils.jsm toolkit/components/places/BookmarkHTMLUtils.jsm
index 653e29fc5875..f4c1e7495d32 100644
--- toolkit/components/places/BookmarkHTMLUtils.jsm
+++ toolkit/components/places/BookmarkHTMLUtils.jsm
@@ -1143,7 +1143,7 @@ BookmarkExporter.prototype = {
     if (aItem.charset)
       this._writeAttribute("LAST_CHARSET", escapeHtmlEntities(aItem.charset));
     if (aItem.tags)
-      this._writeAttribute("TAGS", aItem.tags);
+      this._writeAttribute("TAGS", escapeHtmlEntities(aItem.tags));
     this._writeLine(">" + escapeHtmlEntities(aItem.title) + "</A>");
     this._writeDescription(aItem, aIndent);
   },
diff --git toolkit/components/places/tests/unit/test_bookmarks_html_escape_entities.js toolkit/components/places/tests/unit/test_bookmarks_html_escape_entities.js
new file mode 100644
index 000000000000..73c5e0e0744d
--- /dev/null
+++ toolkit/components/places/tests/unit/test_bookmarks_html_escape_entities.js
@@ -0,0 +1,81 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+// Checks that html entities are escaped in bookmarks.html files.
+
+const DESCRIPTION_ANNO = "bookmarkProperties/description";
+
+add_task(async function() {
+  // Removes bookmarks.html if the file already exists.
+  let HTMLFile = OS.Path.join(OS.Constants.Path.profileDir, "bookmarks.html");
+  if ((await OS.File.exists(HTMLFile))) {
+    await OS.File.remove(HTMLFile);
+  }
+
+  let unescaped = '<unescaped="test">';
+  // Adds bookmarks and tags to the database.
+  const url = 'http://www.google.it/"/';
+  let bm = await PlacesUtils.bookmarks.insert({
+    parentGuid: PlacesUtils.bookmarks.unfiledGuid,
+    url,
+    title: unescaped
+  });
+  await PlacesUtils.keywords.insert({ url, keyword: unescaped, postData: unescaped })
+  let uri = Services.io.newURI(url);
+  PlacesUtils.tagging.tagURI(uri, [unescaped]);
+  await PlacesUtils.setCharsetForURI(uri, unescaped);
+  PlacesUtils.annotations.setItemAnnotation(
+    await PlacesUtils.promiseItemId(bm.guid),
+    DESCRIPTION_ANNO, unescaped, 0, PlacesUtils.annotations.EXPIRE_NEVER);
+
+  // Exports the bookmarks as a HTML file.
+  await BookmarkHTMLUtils.exportToFile(HTMLFile);
+  await PlacesUtils.bookmarks.remove(bm);
+
+  // Check there are no unescaped entities in the html file.
+  let xml = await new Promise((resolve, reject) => {
+    let xhr = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"]
+                .createInstance(Ci.nsIXMLHttpRequest);
+    xhr.onload = () => {
+      try {
+        resolve(xhr.responseXML);
+      } catch (e) {
+        reject(e);
+      }
+    };
+    xhr.onabort = xhr.onerror = xhr.ontimeout = () => {
+      reject(new Error("xmlhttprequest failed"));
+    };
+    xhr.open("GET", OS.Path.toFileURI(HTMLFile));
+    xhr.responseType = "document";
+    xhr.overrideMimeType("text/html");
+    xhr.send();
+  });
+
+  let checksCount = 6;
+  for (let current = xml; current;
+    current = current.firstChild || current.nextSibling || current.parentNode.nextSibling) {
+    switch (current.nodeType) {
+      case Ci.nsIDOMNode.ELEMENT_NODE:
+        for (let {name, value} of current.attributes) {
+          do_print("Found attribute: " + name);
+          // Check tags, keyword, postData and charSet.
+          if (["tags", "last_charset", "shortcuturl", "post_data"].includes(name)) {
+            Assert.equal(value, unescaped, `Attribute ${name} should be complete`);
+            checksCount--;
+          }
+        }
+        break;
+      case Ci.nsIDOMNode.TEXT_NODE:
+        // Check Title and description.
+        if (!current.data.startsWith("\n") && !current.data.includes("Bookmarks")) {
+          Assert.equal(current.data.trim(), unescaped, "Text node should be complete");
+          checksCount--;
+        }
+        break;
+    }
+  }
+  Assert.equal(checksCount, 0, "All the checks ran")
+});
diff --git toolkit/components/places/tests/unit/xpcshell.ini toolkit/components/places/tests/unit/xpcshell.ini
index 6952e4158753..776e7e548f92 100644
--- toolkit/components/places/tests/unit/xpcshell.ini
+++ toolkit/components/places/tests/unit/xpcshell.ini
@@ -67,6 +67,7 @@ skip-if = (os == "win" && os_version == "5.1") # Bug 1158887
 [test_bookmarks_json.js]
 [test_bookmarks_html.js]
 [test_bookmarks_html_corrupt.js]
+[test_bookmarks_html_escape_entities.js]
 [test_bookmarks_html_import_tags.js]
 [test_bookmarks_html_singleframe.js]
 [test_bookmarks_restore_notification.js]
