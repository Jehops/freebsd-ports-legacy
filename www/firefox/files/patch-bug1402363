commit 3b1474dc71b8
Author: Christoph Kerschbaumer <ckerschb@christophkerschbaumer.com>
Date:   Mon Oct 2 09:11:57 2017 +0200

    Bug 1402363 - Explicitly cancel channel after mixed content redirect. r=honza, r=kate, a=ritu
    
    --HG--
    extra : source : 2773796df8a337e5de31811acb4662ce67955f93
---
 dom/security/nsMixedContentBlocker.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git dom/security/nsMixedContentBlocker.cpp dom/security/nsMixedContentBlocker.cpp
index 46760e69cb91..28740da9efca 100644
--- dom/security/nsMixedContentBlocker.cpp
+++ dom/security/nsMixedContentBlocker.cpp
@@ -394,7 +394,11 @@ nsMixedContentBlocker::AsyncOnChannelRedirect(nsIChannel* aOldChannel,
                   nullptr,              // aExtra
                   requestingPrincipal,
                   &decision);
-  NS_ENSURE_SUCCESS(rv, rv);
+  if (NS_FAILED(rv)) {
+    autoCallback.DontCallback();
+    aOldChannel->Cancel(NS_ERROR_DOM_BAD_URI);
+    return NS_BINDING_FAILED;
+  }
 
   if (nsMixedContentBlocker::sSendHSTSPriming) {
     // The LoadInfo passed in is for the original channel, HSTS priming needs to
@@ -419,6 +423,7 @@ nsMixedContentBlocker::AsyncOnChannelRedirect(nsIChannel* aOldChannel,
   // If the channel is about to load mixed content, abort the channel
   if (!NS_CP_ACCEPTED(decision)) {
     autoCallback.DontCallback();
+    aOldChannel->Cancel(NS_ERROR_DOM_BAD_URI);
     return NS_BINDING_FAILED;
   }
 

commit a709f413ebbd (tag: FIREFOX_57_0b5_RELEASE, tag: FIREFOX_57_0b5_BUILD1)
Author: Christoph Kerschbaumer <ckerschb@christophkerschbaumer.com>
Date:   Mon Oct 2 09:12:12 2017 +0200

    Bug 1402363 - Test Mixed Content Redirect Blocking. r=tanvi, r=kate, a=ritu
    
    --HG--
    extra : source : fcefba24074f60e2d3296996e20a8dd8bc6bebe0
---
 .../test/mixedcontentblocker/file_redirect.html    | 31 ++++++++++++++
 .../mixedcontentblocker/file_redirect_handler.sjs  | 29 +++++++++++++
 .../test/mixedcontentblocker/mochitest.ini         |  3 ++
 .../test/mixedcontentblocker/test_redirect.html    | 50 ++++++++++++++++++++++
 4 files changed, 113 insertions(+)

diff --git dom/security/test/mixedcontentblocker/file_redirect.html dom/security/test/mixedcontentblocker/file_redirect.html
new file mode 100644
index 000000000000..99e187379139
--- /dev/null
+++ dom/security/test/mixedcontentblocker/file_redirect.html
@@ -0,0 +1,31 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug1402363: Test mixed content redirects</title>
+</head>
+<body>
+
+<script type="text/javascript">
+  const PATH = "https://example.com/tests/dom/security/test/mixedcontentblocker/";
+
+  // check a fetch redirect from https to https (should be allowed)
+  fetch(PATH + "file_redirect_handler.sjs?https-to-https-redirect", {
+    method: 'get'
+  }).then(function(response) {
+    window.parent.postMessage("https-to-https-loaded", "*");
+  }).catch(function(err) {
+    window.parent.postMessage("https-to-https-blocked", "*");
+  });
+
+  // check a fetch redirect from https to http (should be blocked)
+  fetch(PATH + "file_redirect_handler.sjs?https-to-http-redirect", {
+    method: 'get'
+  }).then(function(response) {
+    window.parent.postMessage("https-to-http-loaded", "*");
+  }).catch(function(err) {
+    window.parent.postMessage("https-to-http-blocked", "*");
+  });
+
+</script>
+</body>
+</html>
diff --git dom/security/test/mixedcontentblocker/file_redirect_handler.sjs dom/security/test/mixedcontentblocker/file_redirect_handler.sjs
new file mode 100644
index 000000000000..88dc849fe9a7
--- /dev/null
+++ dom/security/test/mixedcontentblocker/file_redirect_handler.sjs
@@ -0,0 +1,29 @@
+// custom *.sjs file for
+// Bug 1402363: Test Mixed Content Redirect Blocking.
+
+const URL_PATH = "example.com/tests/dom/security/test/mixedcontentblocker/";
+
+function handleRequest(request, response) {
+  response.setHeader("Cache-Control", "no-cache", false);
+  let queryStr = request.queryString;
+
+  if (queryStr === "https-to-https-redirect") {
+    response.setStatusLine("1.1", 302, "Found");
+    response.setHeader("Location",
+      "https://" + URL_PATH + "file_redirect_handler.sjs?load", false);
+    return;
+  }
+
+  if (queryStr === "https-to-http-redirect") {
+    response.setStatusLine("1.1", 302, "Found");
+    response.setHeader("Location",
+      "http://" + URL_PATH + "file_redirect_handler.sjs?load", false);
+    return;
+  }
+
+  if (queryStr === "load") {
+    response.setHeader("Content-Type", "text/html", false);
+    response.write("foo");
+    return;
+  }
+}
diff --git dom/security/test/mixedcontentblocker/mochitest.ini dom/security/test/mixedcontentblocker/mochitest.ini
index 7eed89effbce..9daf1f0ae73b 100644
--- dom/security/test/mixedcontentblocker/mochitest.ini
+++ dom/security/test/mixedcontentblocker/mochitest.ini
@@ -14,6 +14,8 @@ support-files =
   file_server.sjs
   !/dom/media/test/320x240.ogv
   !/image/test/mochitest/blue.png
+  file_redirect.html
+  file_redirect_handler.sjs
 
 [test_main.html]
 skip-if = toolkit == 'android' #TIMED_OUT
@@ -21,3 +23,4 @@ skip-if = toolkit == 'android' #TIMED_OUT
 skip-if = toolkit == 'android' || (os=='linux' && bits==32) #Android: TIMED_OUT; Linux32:bug 1324870
 [test_frameNavigation.html]
 skip-if = toolkit == 'android' #TIMED_OUT
+[test_redirect.html]
diff --git dom/security/test/mixedcontentblocker/test_redirect.html dom/security/test/mixedcontentblocker/test_redirect.html
new file mode 100644
index 000000000000..f4aeef3d9895
--- /dev/null
+++ dom/security/test/mixedcontentblocker/test_redirect.html
@@ -0,0 +1,50 @@
+<!DOCTYPE HTML>
+<html>
+<head>
+  <title>Bug1402363: Test mixed content redirects</title>
+  <script type="text/javascript" src="/tests/SimpleTest/SimpleTest.js"></script>
+  <link rel="stylesheet" type="text/css" href="/tests/SimpleTest/test.css" />
+</head>
+
+<body onload='startTest()'>
+<iframe style="width:100%;height:300px;" id="testframe"></iframe>
+
+<script class="testbody" type="text/javascript">
+
+SimpleTest.waitForExplicitFinish();
+
+const PATH = "https://example.com/tests/dom/security/test/mixedcontentblocker/";
+let testcounter = 0;
+
+window.addEventListener("message", receiveMessage);
+function receiveMessage(event) {
+  if (event.data === "https-to-https-loaded") {
+    ok(true, "https to https fetch redirect should be allowed");
+  }
+  else if (event.data === "https-to-http-blocked") {
+    ok(true, "https to http fetch redirect should be blocked");
+  }
+  else {
+    ok(false, "sanity: we should never enter that branch (" + event.data + ")");
+  }
+  testcounter++;
+  if (testcounter < 2) {
+    return;
+  }
+  window.removeEventListener("message", receiveMessage);
+  SimpleTest.finish();
+}
+
+function startTest() {
+  SpecialPowers.pushPrefEnv({
+  	'set': [["security.mixed_content.use_hsts", false],
+            ["security.mixed_content.send_hsts_priming", false]]
+  }, function () {
+    let testframe = document.getElementById("testframe");
+    testframe.src = PATH + "file_redirect.html";
+  });
+}
+
+</script>
+</body>
+</html>
