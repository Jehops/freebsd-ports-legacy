--- js/src/jspropertycacheinlines.h~
+++ js/src/jspropertycacheinlines.h
@@ -32,7 +32,7 @@ JS_ALWAYS_INLINE void
 js::PropertyCache::test(JSContext *cx, jsbytecode *pc, JSObject **obj,
                         JSObject **pobj, PropertyCacheEntry **entry, PropertyName **name)
 {
-    AutoAssertNoGC nogc;
+    js::AutoAssertNoGC nogc;
 
     JS_ASSERT(this == &cx->propertyCache());
 
@@ -65,7 +65,7 @@ JS_ALWAYS_INLINE bool
 js::PropertyCache::testForSet(JSContext *cx, jsbytecode *pc, JSObject *obj,
                               PropertyCacheEntry **entryp, JSObject **obj2p, PropertyName **namep)
 {
-    AutoAssertNoGC nogc;
+    js::AutoAssertNoGC nogc;
 
     JS_ASSERT(this == &cx->propertyCache());
 
--- js/src/vm/ObjectImpl-inl.h.orig	2013-03-26 23:17:49.000000000 +0100
+++ js/src/vm/ObjectImpl-inl.h	2013-04-15 13:24:59.885671177 +0200
@@ -212,9 +212,9 @@
     JSCompartment *comp = compartment();
     uint32_t offset = start;
     for (HeapSlot *sp = fixedStart; sp < fixedEnd; sp++)
-        sp->init(comp, this->asObjectPtr(), offset++, UndefinedValue());
+        sp->init(comp, this->asObjectPtr(), offset++, js::UndefinedValue());
     for (HeapSlot *sp = slotsStart; sp < slotsEnd; sp++)
-        sp->init(comp, this->asObjectPtr(), offset++, UndefinedValue());
+        sp->init(comp, this->asObjectPtr(), offset++, js::UndefinedValue());
 }
 
 inline bool
