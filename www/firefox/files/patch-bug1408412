commit 81f184512a09
Author: Jan de Mooij <jdemooij@mozilla.com>
Date:   Wed Oct 25 11:30:17 2017 +0200

    Bug 1408412 - Use ARGS_LENGTH_MAX as upper bound in MArgumentsLength::computeRange. r=nbp, a=lizzard
    
    --HG--
    extra : source : aaf54dce048a85806833529a5d53ecc46156ef47
---
 js/src/jit/RangeAnalysis.cpp | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git js/src/jit/RangeAnalysis.cpp js/src/jit/RangeAnalysis.cpp
index a3daefa848a7..19715ccc250a 100644
--- js/src/jit/RangeAnalysis.cpp
+++ js/src/jit/RangeAnalysis.cpp
@@ -15,6 +15,7 @@
 #include "jit/MIRGenerator.h"
 #include "jit/MIRGraph.h"
 #include "js/Conversions.h"
+#include "vm/ArgumentsObject.h"
 #include "vm/TypedArrayObject.h"
 
 #include "jsopcodeinlines.h"
@@ -1845,9 +1846,9 @@ MArgumentsLength::computeRange(TempAllocator& alloc)
 {
     // This is is a conservative upper bound on what |TooManyActualArguments|
     // checks.  If exceeded, Ion will not be entered in the first place.
-    MOZ_ASSERT(JitOptions.maxStackArgs <= UINT32_MAX,
-               "NewUInt32Range requires a uint32 value");
-    setRange(Range::NewUInt32Range(alloc, 0, JitOptions.maxStackArgs));
+    static_assert(ARGS_LENGTH_MAX <= UINT32_MAX,
+                  "NewUInt32Range requires a uint32 value");
+    setRange(Range::NewUInt32Range(alloc, 0, ARGS_LENGTH_MAX));
 }
 
 void
