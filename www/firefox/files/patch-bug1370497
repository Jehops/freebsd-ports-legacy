commit c79086d4c25c
Author: Jonathan Kew <jkew@mozilla.com>
Date:   Wed Sep 27 11:16:35 2017 +0100

    Bug 1370497 - Check ScriptExtensions property of combining marks when available. r=valentin, a=ritu
    
    --HG--
    extra : source : 6bd2d96c0c3d952b205e1bb2f6915cbc820a61a1
    extra : amend_source : b0c6b6fbea0bf77c8d1527e131d3773b4d959ea0
---
 netwerk/dns/nsIDNService.cpp       | 45 ++++++++++++++++++++++++++++++++------
 netwerk/test/unit/test_idn_urls.js |  5 +++++
 2 files changed, 43 insertions(+), 7 deletions(-)

diff --git netwerk/dns/nsIDNService.cpp netwerk/dns/nsIDNService.cpp
index 4c45a2d52e45..e07910a7e70d 100644
--- netwerk/dns/nsIDNService.cpp
+++ netwerk/dns/nsIDNService.cpp
@@ -26,6 +26,7 @@
 const bool kIDNA2008_TransitionalProcessing = false;
 
 #include "ICUUtils.h"
+#include "unicode/uscript.h"
 #endif
 
 using namespace mozilla::unicode;
@@ -900,8 +901,8 @@ bool nsIDNService::isLabelSafe(const nsAString &label)
     }
 
     // Check for mixed numbering systems
-    if (GetGeneralCategory(ch) ==
-        HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER) {
+    auto genCat = GetGeneralCategory(ch);
+    if (genCat == HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER) {
       uint32_t zeroCharacter = ch - GetNumericValue(ch);
       if (savedNumberingSystem == 0) {
         // If we encounter a decimal number, save the zero character from that
@@ -912,11 +913,41 @@ bool nsIDNService::isLabelSafe(const nsAString &label)
       }
     }
 
-    // Check for consecutive non-spacing marks
-    if (previousChar != 0 &&
-        previousChar == ch &&
-        GetGeneralCategory(ch) == HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK) {
-      return false;
+    if (genCat == HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK) {
+      // Check for consecutive non-spacing marks.
+      if (previousChar != 0 && previousChar == ch) {
+        return false;
+      }
+      // Check for marks whose expected script doesn't match the base script.
+      if (lastScript != Script::INVALID) {
+        const size_t kMaxScripts = 32; // more than ample for current values
+                                       // of ScriptExtensions property
+        UScriptCode scripts[kMaxScripts];
+        UErrorCode errorCode = U_ZERO_ERROR;
+        int nScripts = uscript_getScriptExtensions(ch, scripts, kMaxScripts,
+                                                   &errorCode);
+        MOZ_ASSERT(U_SUCCESS(errorCode), "uscript_getScriptExtensions failed");
+        if (U_FAILURE(errorCode)) {
+          return false;
+        }
+        // nScripts will always be >= 1, because even for undefined characters
+        // uscript_getScriptExtensions will return Script::INVALID.
+        // If the mark just has script=COMMON or INHERITED, we can't check any
+        // more carefully, but if it has specific scriptExtension codes, then
+        // assume those are the only valid scripts to use it with.
+        if (nScripts > 1 ||
+            (Script(scripts[0]) != Script::COMMON &&
+             Script(scripts[0]) != Script::INHERITED)) {
+          while (--nScripts >= 0) {
+            if (Script(scripts[nScripts]) == lastScript) {
+              break;
+            }
+          }
+          if (nScripts == -1) {
+            return false;
+          }
+        }
+      }
     }
 
     // Simplified/Traditional Chinese check temporarily disabled -- bug 857481
diff --git netwerk/test/unit/test_idn_urls.js netwerk/test/unit/test_idn_urls.js
index 0d8cf3216293..f39a9650a13b 100644
--- netwerk/test/unit/test_idn_urls.js
+++ netwerk/test/unit/test_idn_urls.js
@@ -295,6 +295,11 @@ const testcases = [
     ["䕮䕵䕶䕱.中国123", "xn--google.xn--123-u68dy61b",           false, true,  true],
     ["xn--accountlogin.䕮䕵䕶䕱", "xn--accountlogin.xn--google", false, true,  true],
     ["䕮䕵䕶䕱.xn--accountlogin", "xn--google.xn--accountlogin", false, true,  true],
+
+    // Arabic diacritic not allowed in Latin text (bug 1370497)
+    ["goo\u0650gle", "xn--google-yri", false, false, false],
+    // ...but Arabic diacritics are allowed on Arabic text
+    ["العَرَبِي", "xn--mgbc0a5a6cxbzabt", false, true, true],
 ];
 
 const profiles = ["ASCII", "high", "moderate"];
