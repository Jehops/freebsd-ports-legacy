commit 99ad73e4743d
Author: Jonathan Kew <jkew@mozilla.com>
Date:   Sat Sep 16 11:49:47 2017 +0100

    Bug 1399540 - patch 1 - Failure to decode an individual label within the IDN should not block decoding of other valid punycode labels. r=valentin
---
 netwerk/dns/nsIDNService.cpp | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git netwerk/dns/nsIDNService.cpp netwerk/dns/nsIDNService.cpp
index 9cc8fdcf6fa1..3adcddf654e1 100644
--- netwerk/dns/nsIDNService.cpp
+++ netwerk/dns/nsIDNService.cpp
@@ -300,6 +300,10 @@ nsresult nsIDNService::ACEtoUTF8(const nsACString & input, nsACString & _retval,
   // RFC 3490 - 4.2 ToUnicode
   // ToUnicode never fails.  If any step fails, then the original input
   // sequence is returned immediately in that step.
+  //
+  // Note that this refers to the decoding of a single label.
+  // ACEtoUTF8 may be called with a sequence of labels separated by dots;
+  // this test applies individually to each label.
 
   uint32_t len = 0, offset = 0;
   nsAutoCString decodedBuf;
@@ -313,13 +317,15 @@ nsresult nsIDNService::ACEtoUTF8(const nsACString & input, nsACString & _retval,
   while (start != end) {
     len++;
     if (*start++ == '.') {
-      if (NS_FAILED(decodeACE(Substring(input, offset, len - 1), decodedBuf,
-                              flag))) {
-        _retval.Assign(input);
-        return NS_OK;
+      nsDependentCSubstring origLabel(input, offset, len - 1);
+      if (NS_FAILED(decodeACE(origLabel, decodedBuf, flag))) {
+        // If decoding failed, use the original input sequence
+        // for this label.
+        _retval.Append(origLabel);
+      } else {
+        _retval.Append(decodedBuf);
       }
 
-      _retval.Append(decodedBuf);
       _retval.Append('.');
       offset += len;
       len = 0;
@@ -327,11 +333,12 @@ nsresult nsIDNService::ACEtoUTF8(const nsACString & input, nsACString & _retval,
   }
   // decode the last node
   if (len) {
-    if (NS_FAILED(decodeACE(Substring(input, offset, len), decodedBuf,
-                            flag)))
-      _retval.Assign(input);
-    else
+    nsDependentCSubstring origLabel(input, offset, len);
+    if (NS_FAILED(decodeACE(origLabel, decodedBuf, flag))) {
+      _retval.Append(origLabel);
+    } else {
       _retval.Append(decodedBuf);
+    }
   }
 
   return NS_OK;

commit eddd7a4f4eae
Author: Jonathan Kew <jkew@mozilla.com>
Date:   Sat Sep 16 11:49:56 2017 +0100

    Bug 1399540 - patch 2 - Handle invalid punycode better in stringPrep to avoid mangling display of fake-punycode labels. r=valentin
---
 netwerk/dns/nsIDNService.cpp | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git netwerk/dns/nsIDNService.cpp netwerk/dns/nsIDNService.cpp
index 3adcddf654e1..4c45a2d52e45 100644
--- netwerk/dns/nsIDNService.cpp
+++ netwerk/dns/nsIDNService.cpp
@@ -222,7 +222,15 @@ nsIDNService::IDNA2008StringPrep(const nsAString& input,
   }
   NS_ENSURE_SUCCESS(rv, rv);
 
-  // Output the result of nameToUnicode even if there were errors
+  // Output the result of nameToUnicode even if there were errors.
+  // But in the case of invalid punycode, the uidna_labelToUnicode result
+  // appears to get an appended U+FFFD REPLACEMENT CHARACTER, which will
+  // confuse our subsequent processing, so we drop that.
+  // (https://bugzilla.mozilla.org/show_bug.cgi?id=1399540#c9)
+  if ((info.errors & UIDNA_ERROR_PUNYCODE) &&
+      outLen > 0 && outputBuffer[outLen - 1] == 0xfffd) {
+    --outLen;
+  }
   ICUUtils::AssignUCharArrayToString(outputBuffer, outLen, output);
 
   if (flag == eStringPrepIgnoreErrors) {

commit 2a3883ef55d2
Author: Jonathan Kew <jkew@mozilla.com>
Date:   Sat Sep 16 11:50:08 2017 +0100

    Bug 1399540 - Add some IDN testcases with mixed punycode and non-punycode labels. r=valentin
---
 netwerk/test/unit/test_idn_urls.js | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git netwerk/test/unit/test_idn_urls.js netwerk/test/unit/test_idn_urls.js
index 358854093f65..0d8cf3216293 100644
--- netwerk/test/unit/test_idn_urls.js
+++ netwerk/test/unit/test_idn_urls.js
@@ -286,10 +286,17 @@ const testcases = [
     // Thai (also tests that node with over 63 UTF-8 octets doesn't fail)
     ["เครื่องทําน้ําทําน้ําแข็ง",
                  "xn--22cdjb2fanb9fyepcbbb9dwh4a3igze4fdcd",
-                                                     false, true, true]
+                                                     false, true, true],
+
+    // Effect of adding valid or invalid subdomains (bug 1399540)
+    ["䕮䕵䕶䕱.ascii", "xn--google.ascii",                       false, true,  true],
+    ["ascii.䕮䕵䕶䕱", "ascii.xn--google",                       false, true,  true],
+    ["中国123.䕮䕵䕶䕱", "xn--123-u68dy61b.xn--google",           false, true,  true],
+    ["䕮䕵䕶䕱.中国123", "xn--google.xn--123-u68dy61b",           false, true,  true],
+    ["xn--accountlogin.䕮䕵䕶䕱", "xn--accountlogin.xn--google", false, true,  true],
+    ["䕮䕵䕶䕱.xn--accountlogin", "xn--google.xn--accountlogin", false, true,  true],
 ];
 
-
 const profiles = ["ASCII", "high", "moderate"];
 
 function run_test() {
@@ -311,13 +318,13 @@ function run_test() {
             var expectedUnicode = test[2 + i];
             var isASCII = {};
 
-	    var result;
-	    try {
-		result = idnService.convertToDisplayIDN(URL, isASCII);
-	    } catch(e) {
-		result = ".com";
-	    }
-            if (punycodeURL.substr(0, 4) == "xn--") {
+            var result;
+            try {
+                result = idnService.convertToDisplayIDN(URL, isASCII);
+            } catch(e) {
+                result = ".com";
+            }
+            if (punycodeURL.substr(0, 4) == "xn--" || punycodeURL.indexOf(".xn--") > 0) {
                 // test convertToDisplayIDN with a Unicode URL and with a
                 //  Punycode URL if we have one
                 do_check_eq(escape(result),
