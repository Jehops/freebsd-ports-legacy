commit 6b3da0609f95
Author: Byron Campen [:bwc] <docfaraday@gmail.com>
Date:   Thu Sep 14 12:19:24 2017 -0500

    Bug 1383019: Move more logic under the protection of nsTimerImpl::mMutex, and simplify. r=froydnj, a=abillings
    
    MozReview-Commit-ID: JjYScKwyika
    
    --HG--
    extra : rebase_source : a5a8a17f86459ace51d9250454bd4cf1433130b0
---
 xpcom/threads/TimerThread.cpp | 12 ++++++----
 xpcom/threads/TimerThread.h   | 32 -------------------------
 xpcom/threads/nsTimerImpl.cpp | 56 +++++++++++++++++++++----------------------
 xpcom/threads/nsTimerImpl.h   |  5 ++--
 4 files changed, 36 insertions(+), 69 deletions(-)

diff --git xpcom/threads/TimerThread.cpp xpcom/threads/TimerThread.cpp
index b91b27b2073a..99a40d91b3c0 100644
--- xpcom/threads/TimerThread.cpp
+++ xpcom/threads/TimerThread.cpp
@@ -331,7 +331,7 @@ TimerThread::Shutdown()
     return NS_ERROR_NOT_INITIALIZED;
   }
 
-  nsTArray<UniquePtr<Entry>> timers;
+  nsTArray<RefPtr<nsTimerImpl>> timers;
   {
     // lock scope
     MonitorAutoLock lock(mMonitor);
@@ -350,12 +350,14 @@ TimerThread::Shutdown()
     // might potentially call some code reentering the same lock
     // that leads to unexpected behavior or deadlock.
     // See bug 422472.
-    mTimers.SwapElements(timers);
+    for (const UniquePtr<Entry>& entry : mTimers) {
+      timers.AppendElement(entry->Take());
+    }
+
+    mTimers.Clear();
   }
 
-  uint32_t timersCount = timers.Length();
-  for (uint32_t i = 0; i < timersCount; i++) {
-    RefPtr<nsTimerImpl> timer = timers[i]->Take();
+  for (const RefPtr<nsTimerImpl>& timer : timers) {
     if (timer) {
       timer->Cancel();
     }
diff --git xpcom/threads/TimerThread.h xpcom/threads/TimerThread.h
index f65c501c50e8..6610f5bf387b 100644
--- xpcom/threads/TimerThread.h
+++ xpcom/threads/TimerThread.h
@@ -129,36 +129,4 @@ private:
   uint32_t mAllowedEarlyFiringMicroseconds;
 };
 
-struct TimerAdditionComparator
-{
-  TimerAdditionComparator(const mozilla::TimeStamp& aNow,
-                          nsTimerImpl* aTimerToInsert) :
-    now(aNow)
-#ifdef DEBUG
-    , timerToInsert(aTimerToInsert)
-#endif
-  {
-  }
-
-  bool LessThan(nsTimerImpl* aFromArray, nsTimerImpl* aNewTimer) const
-  {
-    MOZ_ASSERT(aNewTimer == timerToInsert, "Unexpected timer ordering");
-
-    // Skip any overdue timers.
-    return aFromArray->mTimeout <= now ||
-           aFromArray->mTimeout <= aNewTimer->mTimeout;
-  }
-
-  bool Equals(nsTimerImpl* aFromArray, nsTimerImpl* aNewTimer) const
-  {
-    return false;
-  }
-
-private:
-  const mozilla::TimeStamp& now;
-#ifdef DEBUG
-  const nsTimerImpl* const timerToInsert;
-#endif
-};
-
 #endif /* TimerThread_h___ */
diff --git xpcom/threads/nsTimerImpl.cpp xpcom/threads/nsTimerImpl.cpp
index f6803791fe45..735271af089a 100644
--- xpcom/threads/nsTimerImpl.cpp
+++ xpcom/threads/nsTimerImpl.cpp
@@ -133,16 +133,8 @@ nsTimer::Release(void)
   NS_LOG_RELEASE(this, count, "nsTimer");
 
   if (count == 1) {
-    if (!mImpl->CancelCheckIfFiring()) {
-      // Last ref, in nsTimerImpl::mITimer. Make sure the cycle is broken.
-      // (when Cancel fails, nsTimerImpl::Fire is in progress, which has grabbed
-      // another ref to the nsITimer since we checked the value of mRefCnt
-      // above)
-      // If there is a nsTimerEvent in a queue for this timer, the nsTimer will
-      // live until that event pops, otherwise the nsTimerImpl will go away and
-      // the nsTimer along with it.
-      mImpl = nullptr;
-    }
+    // Last ref, in nsTimerImpl::mITimer. Make sure the cycle is broken.
+    mImpl->CancelImpl(true);
   } else if (count == 0) {
     delete this;
   }
@@ -322,31 +314,37 @@ nsTimerImpl::Init(nsIObserver* aObserver, uint32_t aDelay, uint32_t aType)
   return InitCommon(aDelay, aType, mozilla::Move(cb));
 }
 
-bool
-nsTimerImpl::CancelCheckIfFiring()
+nsresult
+nsTimerImpl::Cancel()
 {
-  Callback cb;
+  CancelImpl(false);
+  return NS_OK;
+}
 
-  MutexAutoLock lock(mMutex);
+void
+nsTimerImpl::CancelImpl(bool aClearITimer)
+{
+  Callback cbTrash;
+  RefPtr<nsITimer> timerTrash;
 
-  if (gThread) {
-    gThread->RemoveTimer(this);
-  }
+  {
+    MutexAutoLock lock(mMutex);
+    if (gThread) {
+      gThread->RemoveTimer(this);
+    }
 
-  cb.swap(mCallback);
-  ++mGeneration;
+    cbTrash.swap(mCallback);
+    ++mGeneration;
 
-  if (mCallbackDuringFire.mType != Callback::Type::Unknown) {
-    return true;
+    // Don't clear this if we're firing; once Fire returns, we'll get this call
+    // again.
+    if (aClearITimer &&
+        (mCallbackDuringFire.mType == Callback::Type::Unknown)) {
+      MOZ_RELEASE_ASSERT(mITimer, "mITimer was nulled already! "
+          "This indicates that someone has messed up the refcount on nsTimer!");
+      timerTrash.swap(mITimer);
+    }
   }
-  return false;
-}
-
-nsresult
-nsTimerImpl::Cancel()
-{
-  (void)CancelCheckIfFiring();
-  return NS_OK;
 }
 
 nsresult
diff --git xpcom/threads/nsTimerImpl.h xpcom/threads/nsTimerImpl.h
index 4b26cd21d80a..1cb530c0be3d 100644
--- xpcom/threads/nsTimerImpl.h
+++ xpcom/threads/nsTimerImpl.h
@@ -56,7 +56,7 @@ public:
   static void Shutdown();
 
   void SetDelayInternal(uint32_t aDelay, TimeStamp aBase = TimeStamp::Now());
-  bool CancelCheckIfFiring();
+  void CancelImpl(bool aClearITimer);
 
   void Fire(int32_t aGeneration);
 
@@ -211,7 +211,7 @@ public:
   static double         sDeltaSum;
   static double         sDeltaSumSquared;
   static double         sDeltaNum;
-  const RefPtr<nsITimer>      mITimer;
+  RefPtr<nsITimer>      mITimer;
   mozilla::Mutex mMutex;
   Callback              mCallback;
   Callback              mCallbackDuringFire;
@@ -225,7 +225,6 @@ public:
 
   friend class TimerThread;
   friend class nsTimerEvent;
-  friend struct TimerAdditionComparator;
 
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_FORWARD_SAFE_NSITIMER(mImpl);
