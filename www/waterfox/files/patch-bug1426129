commit 2ad185b12fe3
Author: Paul Adenot <paul@paul.cx>
Date:   Mon Mar 5 20:24:16 2018 +0200

    Bug 1426129 - Take a reference to `this` when calling methods asynchronously in CameraChild.cpp. r=pehrsons a=lizzard
    
    --HG--
    extra : amend_source : bb0df026ffa8198485415c8c44fdb7df372f07ee
---
 dom/media/systemservices/CamerasChild.cpp | 33 ++++++++++++++++++-------------
 dom/media/systemservices/CamerasChild.h   |  9 +++++++++
 2 files changed, 28 insertions(+), 14 deletions(-)

diff --git dom/media/systemservices/CamerasChild.cpp dom/media/systemservices/CamerasChild.cpp
index 594b90f808e4..79224b73cefa 100644
--- dom/media/systemservices/CamerasChild.cpp
+++ dom/media/systemservices/CamerasChild.cpp
@@ -34,7 +34,9 @@ CamerasSingleton::CamerasSingleton()
   : mCamerasMutex("CamerasSingleton::mCamerasMutex"),
     mCameras(nullptr),
     mCamerasChildThread(nullptr),
-    mFakeDeviceChangeEventThread(nullptr) {
+    mFakeDeviceChangeEventThread(nullptr),
+    mInShutdown(false)
+{
   LOG(("CamerasSingleton: %p", this));
 }
 
@@ -559,6 +561,9 @@ void
 Shutdown(void)
 {
   OffTheBooksMutexAutoLock lock(CamerasSingleton::Mutex());
+
+  CamerasSingleton::StartShutdown();
+
   CamerasChild* child = CamerasSingleton::Child();
   if (!child) {
     // We don't want to cause everything to get fired up if we're
@@ -733,7 +738,7 @@ CamerasChild::~CamerasChild()
 {
   LOG(("~CamerasChild: %p", this));
 
-  {
+  if (!CamerasSingleton::InShutdown()) {
     OffTheBooksMutexAutoLock lock(CamerasSingleton::Mutex());
     // In normal circumstances we've already shut down and the
     // following does nothing. But on fatal IPC errors we will
diff --git dom/media/systemservices/CamerasChild.h dom/media/systemservices/CamerasChild.h
index b2029dbd6b9d..620c409b656f 100644
--- dom/media/systemservices/CamerasChild.h
+++ dom/media/systemservices/CamerasChild.h
@@ -93,6 +93,14 @@ public:
     return gTheInstance.get()->mFakeDeviceChangeEventThread;
   }
 
+  static bool InShutdown() {
+    return gTheInstance.get()->mInShutdown;
+  }
+
+  static void StartShutdown() {
+    gTheInstance.get()->mInShutdown = true;
+  }
+
 private:
   static Singleton<CamerasSingleton> gTheInstance;
 
@@ -110,6 +118,7 @@ private:
   CamerasChild* mCameras;
   nsCOMPtr<nsIThread> mCamerasChildThread;
   nsCOMPtr<nsIThread> mFakeDeviceChangeEventThread;
+  Atomic<bool> mInShutdown;
 };
 
 // Get a pointer to a CamerasChild object we can use to do IPC with.
@@ -149,7 +158,7 @@ class CamerasChild final : public PCamerasChild
 public:
   // We are owned by the PBackground thread only. CamerasSingleton
   // takes a non-owning reference.
-  NS_INLINE_DECL_THREADSAFE_REFCOUNTING(CamerasChild)
+  NS_INLINE_DECL_REFCOUNTING(CamerasChild)
 
   // IPC messages recevied, received on the PBackground thread
   // these are the actual callbacks with data
