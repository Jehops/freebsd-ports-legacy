commit 586e13b2b708
Author: Blake Kaplan <mrbkap@gmail.com>
Date:   Wed Jan 10 18:48:26 2018 -0500

    Bug 1404297 - Temporarily assert that we don't re-enter this function. r=bzbarsky
    
    MozReview-Commit-ID: FoQGVDWtwN1
    
    --HG--
    extra : rebase_source : c22cc3a022dc01923696940fc0b0aae708232db0
---
 dom/base/nsDocument.cpp | 8 ++------
 dom/base/nsIDocument.h  | 2 --
 2 files changed, 2 insertions(+), 8 deletions(-)

diff --git dom/base/nsDocument.cpp dom/base/nsDocument.cpp
index 1b98f94341c2..ad08c02d51dc 100644
--- dom/base/nsDocument.cpp
+++ dom/base/nsDocument.cpp
@@ -1496,9 +1496,7 @@ nsIDocument::nsIDocument()
     mType(eUnknown),
     mDefaultElementType(0),
     mAllowXULXBL(eTriUnset),
-#ifdef DEBUG
     mIsLinkUpdateRegistrationsForbidden(false),
-#endif
     mBidiOptions(IBMBIDI_DEFAULT_BIDI_OPTIONS),
     mSandboxFlags(0),
     mPartID(0),
@@ -10117,7 +10115,7 @@ nsIDocument::EnumerateActivityObservers(ActivityObserverEnumerator aEnumerator,
 void
 nsIDocument::RegisterPendingLinkUpdate(Link* aLink)
 {
-  MOZ_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
+  MOZ_RELEASE_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
 
   if (aLink->HasPendingLinkUpdate()) {
     return;
@@ -10156,14 +10154,12 @@ nsIDocument::FlushPendingLinkUpdatesFromRunnable()
 void
 nsIDocument::FlushPendingLinkUpdates()
 {
-  MOZ_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
+  MOZ_RELEASE_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
   if (!mHasLinksToUpdate)
     return;
 
-#ifdef DEBUG
   AutoRestore<bool> saved(mIsLinkUpdateRegistrationsForbidden);
   mIsLinkUpdateRegistrationsForbidden = true;
-#endif
   for (auto iter = mLinksToUpdate.Iter(); !iter.Done(); iter.Next()) {
     Link* link = iter.Get();
     Element* element = link->GetElement();
diff --git dom/base/nsIDocument.h dom/base/nsIDocument.h
index f0a3a32ede08..59deb3289f56 100644
--- dom/base/nsIDocument.h
+++ dom/base/nsIDocument.h
@@ -3621,13 +3621,11 @@ protected:
 
   Tri mAllowXULXBL;
 
-#ifdef DEBUG
   /**
    * This is true while FlushPendingLinkUpdates executes.  Calls to
    * [Un]RegisterPendingLinkUpdate will assert when this is true.
    */
   bool mIsLinkUpdateRegistrationsForbidden;
-#endif
 
   // The document's script global object, the object from which the
   // document can get its script context and scope. This is the
commit 75a57d01385d
Author: Blake Kaplan <mrbkap@gmail.com>
Date:   Thu Mar 1 11:26:54 2018 -0800

    Bug 1404297 - Change the way we iterate over our links to update. r=smaug, a=RyanVM
    
    MozReview-Commit-ID: BTADrB9itjh
    
    --HG--
    extra : source : 3ce55799da20fcf99ceb7a209db65b2830f38630
    extra : histedit_source : 413764b6db689b36ed74b176c382cd3600f05a77
---
 dom/base/nsDocument.cpp | 36 +++++++++++++++++-------------------
 dom/base/nsIDocument.h  | 23 ++++++++++-------------
 2 files changed, 27 insertions(+), 32 deletions(-)

diff --git dom/base/nsDocument.cpp dom/base/nsDocument.cpp
index 3045f0f20ef2..336670b96c76 100644
--- dom/base/nsDocument.cpp
+++ dom/base/nsDocument.cpp
@@ -1450,8 +1450,8 @@ nsIDocument::nsIDocument()
     mHasHadScriptHandlingObject(false),
     mIsBeingUsedAsImage(false),
     mIsSyntheticDocument(false),
-    mHasLinksToUpdate(false),
     mHasLinksToUpdateRunnable(false),
+    mFlushingPendingLinkUpdates(false),
     mMayHaveDOMMutationObservers(false),
     mMayHaveAnimationObservers(false),
     mHasMixedActiveContentLoaded(false),
@@ -1496,7 +1496,6 @@ nsIDocument::nsIDocument()
     mType(eUnknown),
     mDefaultElementType(0),
     mAllowXULXBL(eTriUnset),
-    mIsLinkUpdateRegistrationsForbidden(false),
     mBidiOptions(IBMBIDI_DEFAULT_BIDI_OPTIONS),
     mSandboxFlags(0),
     mPartID(0),
@@ -10017,15 +10016,13 @@ nsIDocument::EnumerateActivityObservers(ActivityObserverEnumerator aEnumerator,
 void
 nsIDocument::RegisterPendingLinkUpdate(Link* aLink)
 {
-  MOZ_RELEASE_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
-
   if (aLink->HasPendingLinkUpdate()) {
     return;
   }
 
   aLink->SetHasPendingLinkUpdate();
 
-  if (!mHasLinksToUpdateRunnable) {
+  if (!mHasLinksToUpdateRunnable && !mFlushingPendingLinkUpdates) {
     nsCOMPtr<nsIRunnable> event =
       NewRunnableMethod("nsIDocument::FlushPendingLinkUpdatesFromRunnable",
                         this,
@@ -10042,7 +10039,6 @@ nsIDocument::RegisterPendingLinkUpdate(Link* aLink)
   }
 
   mLinksToUpdate.InfallibleAppend(aLink);
-  mHasLinksToUpdate = true;
 }
 
 void
@@ -10056,24 +10052,26 @@ nsIDocument::FlushPendingLinkUpdatesFromRunnable()
 void
 nsIDocument::FlushPendingLinkUpdates()
 {
-  MOZ_RELEASE_ASSERT(!mIsLinkUpdateRegistrationsForbidden);
-  if (!mHasLinksToUpdate)
+  if (mFlushingPendingLinkUpdates) {
     return;
+  }
 
-  AutoRestore<bool> saved(mIsLinkUpdateRegistrationsForbidden);
-  mIsLinkUpdateRegistrationsForbidden = true;
-  for (auto iter = mLinksToUpdate.Iter(); !iter.Done(); iter.Next()) {
-    Link* link = iter.Get();
-    Element* element = link->GetElement();
-    if (element->OwnerDoc() == this) {
-      link->ClearHasPendingLinkUpdate();
-      if (element->IsInComposedDoc()) {
-        element->UpdateLinkState(link->LinkState());
+  auto restore = MakeScopeExit([&] { mFlushingPendingLinkUpdates = false; });
+  mFlushingPendingLinkUpdates = true;
+
+  while (!mLinksToUpdate.IsEmpty()) {
+    LinksToUpdateList links(Move(mLinksToUpdate));
+    for (auto iter = links.Iter(); !iter.Done(); iter.Next()) {
+      Link* link = iter.Get();
+      Element* element = link->GetElement();
+      if (element->OwnerDoc() == this) {
+        link->ClearHasPendingLinkUpdate();
+        if (element->IsInComposedDoc()) {
+          element->UpdateLinkState(link->LinkState());
+        }
       }
     }
   }
-  mLinksToUpdate.Clear();
-  mHasLinksToUpdate = false;
 }
 
 already_AddRefed<nsIDocument>
diff --git dom/base/nsIDocument.h dom/base/nsIDocument.h
index 42e7a07ebf2a..e1c2ea24339d 100644
--- dom/base/nsIDocument.h
+++ dom/base/nsIDocument.h
@@ -3353,10 +3353,13 @@ protected:
   // The array of all links that need their status resolved.  Links must add themselves
   // to this set by calling RegisterPendingLinkUpdate when added to a document.
   static const size_t kSegmentSize = 128;
-  mozilla::SegmentedVector<nsCOMPtr<mozilla::dom::Link>,
-                           kSegmentSize,
-                           InfallibleAllocPolicy>
-    mLinksToUpdate;
+
+  typedef mozilla::SegmentedVector<nsCOMPtr<mozilla::dom::Link>,
+                                   kSegmentSize,
+                                   InfallibleAllocPolicy>
+    LinksToUpdateList;
+
+  LinksToUpdateList mLinksToUpdate;
 
   // SMIL Animation Controller, lazily-initialized in GetAnimationController
   RefPtr<nsSMILAnimationController> mAnimationController;
@@ -3448,12 +3451,12 @@ protected:
   // file, etc.
   bool mIsSyntheticDocument : 1;
 
-  // True if this document has links whose state needs updating
-  bool mHasLinksToUpdate : 1;
-
   // True is there is a pending runnable which will call FlushPendingLinkUpdates().
   bool mHasLinksToUpdateRunnable : 1;
 
+  // True if we're flushing pending link updates.
+  bool mFlushingPendingLinkUpdates : 1;
+
   // True if a DOMMutationObserver is perhaps attached to a node in the document.
   bool mMayHaveDOMMutationObservers : 1;
 
@@ -3605,12 +3608,6 @@ protected:
 
   Tri mAllowXULXBL;
 
-  /**
-   * This is true while FlushPendingLinkUpdates executes.  Calls to
-   * [Un]RegisterPendingLinkUpdate will assert when this is true.
-   */
-  bool mIsLinkUpdateRegistrationsForbidden;
-
   // The document's script global object, the object from which the
   // document can get its script context and scope. This is the
   // *inner* window object.
commit c22a2a29bde1
Author: Blake Kaplan <mrbkap@gmail.com>
Date:   Thu Mar 1 11:26:54 2018 -0800

    Bug 1404297 - Add a move constructor to SegmentedVector. r=smaug, a=RyanVM
    
    Given that we have a SegmentedVector of nsCOMPtrs, it's probably worth
    avoiding copying it.
    
    MozReview-Commit-ID: GHyfVLrdnlQ
    
    --HG--
    extra : source : 1d53ede1a1d3c1afd847fb50f31aa9ab3e48cc21
    extra : histedit_source : 4f77aeff6b56fffc31af54a5d032588cc4f8c8c0
---
 mfbt/SegmentedVector.h | 5 +++++
 1 file changed, 5 insertions(+)

diff --git mfbt/SegmentedVector.h mfbt/SegmentedVector.h
index d1aa9c886c72..923a467f5d68 100644
--- mfbt/SegmentedVector.h
+++ mfbt/SegmentedVector.h
@@ -139,6 +139,11 @@ public:
       aIdealSegmentSize - sizeof(Segment) < sizeof(T));
   }
 
+  SegmentedVector(SegmentedVector&& aOther)
+    : mSegments(mozilla::Move(aOther.mSegments))
+  {
+  }
+
   ~SegmentedVector() { Clear(); }
 
   bool IsEmpty() const { return !mSegments.getFirst(); }
