--- ./Source/WTF/wtf/gobject/GMutexLocker.h.orig	2015-02-18 10:08:21.672199000 +0100
+++ ./Source/WTF/wtf/gobject/GMutexLocker.h	2015-02-18 10:09:57.152875000 +0100
@@ -97,8 +97,6 @@ private:
 
 } // namespace WTF
 
-using WTF::GMutexLocker;
-
 #endif // USE(GLIB)
 
 #endif // GMutexLocker_h
--- ./Source/WTF/wtf/gobject/GThreadSafeMainLoopSource.cpp.orig	2015-02-18 10:08:28.231733000 +0100
+++ ./Source/WTF/wtf/gobject/GThreadSafeMainLoopSource.cpp	2015-02-18 10:10:10.991946000 +0100
@@ -46,7 +46,7 @@ GThreadSafeMainLoopSource::~GThreadSafeM
 
 void GThreadSafeMainLoopSource::cancel()
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
 
     // The general cancellable object should only be present if we're currently dispatching this GMainLoopSource.
     ASSERT(!m_cancellable || m_status == Dispatching);
@@ -62,49 +62,49 @@ void GThreadSafeMainLoopSource::cancel()
 
 void GThreadSafeMainLoopSource::schedule(const char* name, std::function<void ()> function, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::schedule(name, function, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 void GThreadSafeMainLoopSource::schedule(const char* name, std::function<bool ()> function, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::schedule(name, function, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 void GThreadSafeMainLoopSource::scheduleAfterDelay(const char* name, std::function<void ()> function, std::chrono::milliseconds delay, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::scheduleAfterDelay(name, function, delay, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 void GThreadSafeMainLoopSource::scheduleAfterDelay(const char* name, std::function<bool ()> function, std::chrono::milliseconds delay, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::scheduleAfterDelay(name, function, delay, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 void GThreadSafeMainLoopSource::scheduleAfterDelay(const char* name, std::function<void ()> function, std::chrono::seconds delay, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::scheduleAfterDelay(name, function, delay, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 void GThreadSafeMainLoopSource::scheduleAfterDelay(const char* name, std::function<bool ()> function, std::chrono::seconds delay, int priority, std::function<void ()> destroyFunction, GMainContext* context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::scheduleAfterDelay(name, function, delay, priority, destroyFunction, context);
     m_context.cancellable = adoptGRef(g_cancellable_new());
 }
 
 bool GThreadSafeMainLoopSource::prepareVoidCallback(Context& context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     bool retval = GMainLoopSource::prepareVoidCallback(context);
     m_cancellable = context.cancellable;
     return retval;
@@ -112,7 +112,7 @@ bool GThreadSafeMainLoopSource::prepareV
 
 void GThreadSafeMainLoopSource::finishVoidCallback()
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::finishVoidCallback();
     m_cancellable = nullptr;
 }
@@ -136,7 +136,7 @@ void GThreadSafeMainLoopSource::voidCall
 
 bool GThreadSafeMainLoopSource::prepareBoolCallback(Context& context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     bool retval = GMainLoopSource::prepareBoolCallback(context);
     m_cancellable = context.cancellable;
     return retval;
@@ -144,7 +144,7 @@ bool GThreadSafeMainLoopSource::prepareB
 
 void GThreadSafeMainLoopSource::finishBoolCallback(bool retval, Context& context)
 {
-    GMutexLocker<GRecMutex> locker(m_mutex);
+    WTF::GMutexLocker<GRecMutex> locker(m_mutex);
     GMainLoopSource::finishBoolCallback(retval, context);
     m_cancellable = nullptr;
 }
--- ./Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp.orig	2015-02-18 10:08:00.153357000 +0100
+++ ./Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp	2015-02-18 10:09:26.434793000 +0100
@@ -137,7 +137,7 @@ IntSize MediaPlayerPrivateGStreamerBase:
     if (!m_videoSize.isEmpty())
         return m_videoSize;
 
-    GMutexLocker<GMutex> lock(m_sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(m_sampleMutex);
     if (!m_sample)
         return IntSize();
 
@@ -279,7 +279,7 @@ void MediaPlayerPrivateGStreamerBase::mu
 #if USE(TEXTURE_MAPPER_GL) && !USE(COORDINATED_GRAPHICS)
 PassRefPtr<BitmapTexture> MediaPlayerPrivateGStreamerBase::updateTexture(TextureMapper* textureMapper)
 {
-    GMutexLocker<GMutex> lock(m_sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(m_sampleMutex);
     if (!m_sample)
         return nullptr;
 
@@ -330,7 +330,7 @@ void MediaPlayerPrivateGStreamerBase::tr
     g_return_if_fail(GST_IS_SAMPLE(sample));
 
     {
-        GMutexLocker<GMutex> lock(m_sampleMutex);
+        WTF::GMutexLocker<GMutex> lock(m_sampleMutex);
         if (m_sample)
             gst_sample_unref(m_sample);
         m_sample = gst_sample_ref(sample);
@@ -364,7 +364,7 @@ void MediaPlayerPrivateGStreamerBase::pa
     if (!m_player->visible())
         return;
 
-    GMutexLocker<GMutex> lock(m_sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(m_sampleMutex);
     if (!m_sample)
         return;
 
--- ./Source/WebCore/platform/graphics/gstreamer/VideoSinkGStreamer.cpp.orig	2015-02-18 10:07:53.753832000 +0100
+++ ./Source/WebCore/platform/graphics/gstreamer/VideoSinkGStreamer.cpp	2015-02-18 10:09:19.395190000 +0100
@@ -117,7 +117,7 @@ static void webkitVideoSinkTimeoutCallba
 {
     WebKitVideoSinkPrivate* priv = sink->priv;
 
-    GMutexLocker<GMutex> lock(priv->sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(priv->sampleMutex);
     GstSample* sample = priv->sample;
     priv->sample = 0;
 
@@ -136,7 +136,7 @@ static GstFlowReturn webkitVideoSinkRend
     WebKitVideoSink* sink = WEBKIT_VIDEO_SINK(baseSink);
     WebKitVideoSinkPrivate* priv = sink->priv;
 
-    GMutexLocker<GMutex> lock(priv->sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(priv->sampleMutex);
 
     if (priv->unlocked)
         return GST_FLOW_OK;
@@ -234,7 +234,7 @@ static void webkitVideoSinkFinalize(GObj
 
 static void unlockSampleMutex(WebKitVideoSinkPrivate* priv)
 {
-    GMutexLocker<GMutex> lock(priv->sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(priv->sampleMutex);
 
     if (priv->sample) {
         gst_sample_unref(priv->sample);
@@ -260,7 +260,7 @@ static gboolean webkitVideoSinkUnlockSto
     WebKitVideoSinkPrivate* priv = WEBKIT_VIDEO_SINK(baseSink)->priv;
 
     {
-        GMutexLocker<GMutex> lock(priv->sampleMutex);
+        WTF::GMutexLocker<GMutex> lock(priv->sampleMutex);
         priv->unlocked = false;
     }
 
@@ -285,7 +285,7 @@ static gboolean webkitVideoSinkStart(Gst
 {
     WebKitVideoSinkPrivate* priv = WEBKIT_VIDEO_SINK(baseSink)->priv;
 
-    GMutexLocker<GMutex> lock(priv->sampleMutex);
+    WTF::GMutexLocker<GMutex> lock(priv->sampleMutex);
     priv->unlocked = false;
     return TRUE;
 }
--- ./Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp.orig	2015-02-18 10:08:08.120995000 +0100
+++ ./Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp	2015-02-18 10:09:47.889567000 +0100
@@ -353,7 +353,7 @@ static void webKitWebSrcGetProperty(GObj
     WebKitWebSrc* src = WEBKIT_WEB_SRC(object);
     WebKitWebSrcPrivate* priv = src->priv;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     switch (propID) {
     case PROP_IRADIO_NAME:
         g_value_set_string(value, priv->iradioName);
@@ -393,7 +393,7 @@ static void webKitWebSrcStop(WebKitWebSr
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     bool seeking = priv->seekSource.isActive();
 
@@ -449,7 +449,7 @@ static void webKitWebSrcStart(WebKitWebS
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     priv->pendingStart = FALSE;
     priv->corsAccessCheck = CORSNoCheck;
@@ -542,7 +542,7 @@ static GstStateChangeReturn webKitWebSrc
         return ret;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     switch (transition) {
     case GST_STATE_CHANGE_READY_TO_PAUSED:
         GST_DEBUG_OBJECT(src, "READY->PAUSED");
@@ -579,7 +579,7 @@ static gboolean webKitWebSrcQueryWithPar
         gst_query_parse_duration(query, &format, NULL);
 
         GST_DEBUG_OBJECT(src, "duration query in format %s", gst_format_get_name(format));
-        GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
         if (format == GST_FORMAT_BYTES && src->priv->size > 0) {
             gst_query_set_duration(query, format, src->priv->size);
             result = TRUE;
@@ -587,7 +587,7 @@ static gboolean webKitWebSrcQueryWithPar
         break;
     }
     case GST_QUERY_URI: {
-        GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+        WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
         gst_query_set_uri(query, src->priv->uri);
         result = TRUE;
         break;
@@ -637,7 +637,7 @@ static gchar* webKitWebSrcGetUri(GstURIH
     WebKitWebSrc* src = WEBKIT_WEB_SRC(handler);
     gchar* ret;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     ret = g_strdup(src->priv->uri);
     return ret;
 }
@@ -652,7 +652,7 @@ static gboolean webKitWebSrcSetUri(GstUR
         return FALSE;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     g_free(priv->uri);
     priv->uri = 0;
@@ -688,7 +688,7 @@ static void webKitWebSrcNeedDataMainCb(W
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->paused = FALSE;
     locker.unlock();
 
@@ -703,7 +703,7 @@ static void webKitWebSrcNeedDataCb(GstAp
 
     GST_DEBUG_OBJECT(src, "Need more data: %u", length);
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (priv->needDataSource.isScheduled() || !priv->paused)
         return;
 
@@ -718,7 +718,7 @@ static void webKitWebSrcEnoughDataMainCb
 
     ASSERT(isMainThread());
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->paused = TRUE;
     locker.unlock();
 
@@ -733,7 +733,7 @@ static void webKitWebSrcEnoughDataCb(Gst
 
     GST_DEBUG_OBJECT(src, "Have enough data");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (priv->enoughDataSource.isScheduled() || priv->paused)
         return;
 
@@ -756,7 +756,7 @@ static gboolean webKitWebSrcSeekDataCb(G
     WebKitWebSrcPrivate* priv = src->priv;
 
     GST_DEBUG_OBJECT(src, "Seeking to offset: %" G_GUINT64_FORMAT, offset);
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (offset == priv->offset && priv->requestedOffset == priv->offset)
         return TRUE;
 
@@ -775,7 +775,7 @@ static gboolean webKitWebSrcSeekDataCb(G
 void webKitWebSrcSetMediaPlayer(WebKitWebSrc* src, WebCore::MediaPlayer* player)
 {
     ASSERT(player);
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     src->priv->player = player;
 }
 
@@ -805,7 +805,7 @@ char* StreamingClient::createReadBuffer(
 
     mapGstBuffer(buffer);
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     priv->buffer = adoptGRef(buffer);
     locker.unlock();
 
@@ -831,7 +831,7 @@ void StreamingClient::handleResponseRece
         return;
     }
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     priv->corsAccessCheck = corsAccessCheck;
 
@@ -930,7 +930,7 @@ void StreamingClient::handleDataReceived
     WebKitWebSrc* src = WEBKIT_WEB_SRC(m_src);
     WebKitWebSrcPrivate* priv = src->priv;
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
 
     GST_LOG_OBJECT(src, "Have %lld bytes of data", priv->buffer ? static_cast<long long>(gst_buffer_get_size(priv->buffer.get())) : length);
 
@@ -999,7 +999,7 @@ void StreamingClient::handleNotifyFinish
 
     GST_DEBUG_OBJECT(src, "Have EOS");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     if (!priv->seekSource.isActive()) {
         locker.unlock();
         gst_app_src_end_of_stream(priv->appsrc);
@@ -1158,7 +1158,7 @@ void ResourceHandleStreamingClient::wasB
 
     GST_ERROR_OBJECT(src, "Request was blocked");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     uri.reset(g_strdup(src->priv->uri));
     locker.unlock();
 
@@ -1172,7 +1172,7 @@ void ResourceHandleStreamingClient::cann
 
     GST_ERROR_OBJECT(src, "Cannot show URL");
 
-    GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
+    WTF::GMutexLocker<GMutex> locker(*GST_OBJECT_GET_LOCK(src));
     uri.reset(g_strdup(src->priv->uri));
     locker.unlock();
 
