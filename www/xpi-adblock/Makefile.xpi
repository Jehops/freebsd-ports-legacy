#-*- mode: makefile; tab-width: 4; -*
# ex:ts=4
#
# New ports collection makefile for:	xpi infrastructure
# Date created:		28 March 2006
# Whom:				Andrew Pantyukhin <infofarmer@FreeBSD.org>
#
# $FreeBSD$
#

# XPI_ID		- Extension id, might be in {12345-...} or dev@org format
# XPI_FILES		- List of files in xpi archive. This is used to produce
#				  PLIST_FILES. XPI_FILES can be generated by xpi-gen, but be
#				  sure to put chrome.manifest in ${FILESDIR} before that if you
#				  need it.
# XPI_DIRS		- List of directories in xpi archive. This is used to produce
#				  PLIST_DIRS.
# XPI_DISTNAME	- The name of distribution
#				  Default: ${PORTNAME}
# PORTNAME, PORTVERSION, DISTVERSIONSUFFIX, CATEGORIES, MAINTAINER, COMMENT
#				- These should all be set manually for port to be functional. See
#				  ${PORTSDIR}/Mk/bsd.port.mk for details.
# MASTER_SITES	- This should be set if port is unavailable at the default site.
#				  Default: ${MASTER_SITE_MOZILLA}
# MASTER_SITE_SUBDIR
#				- Default: extensions/${PORTNAME}
# LATEST_LINK	- Default: ${PKGBASE:S/_//g}
#
# This Makefile is an alpha-version of the new xpi infrastructure. It currently
# supports Gecko 1.8+ (Firefox 1.5+). Support for Gecko 1.7x (and Seamonkey 1.0)
# may be merged later from Thierry Thomas works.
#
# A new xpi will require a PORTNAME, PORTVERSION, DISTVERSIONSUFFIX and
# CATEGORIES. In case it is not published on the mozilla.org sites, MASTER_SITES
# can be redefined. XPI_* vars will also need to be defined manually, which helps
# keep the infrastructure simpler.
#
# Gecko 1.8 xpi engine tries to detect various compatibility issues all by itself.
# Thus, xpi's are installed into ${LOCALBASE}/lib/xpi/${XPI_ID} by default and
# links are made to all apps which have the engine (firefox, thunderbird and flock
# at the moment). relink and relink-all targets can be invoked to refarm the links
# of a single extensions or all installed extensions accordingly.
#
# In case an xpi does not have chrome.manifest, it should be generated manually by
# a maintainer and placed in files, where it will be noticed. 
#
# xpi ports do not depend on their master applications. You can install an
# extension before the app and run relink when the app is present.

MASTER_SITES?=	${MASTER_SITE_MOZILLA}
MASTER_SITE_SUBDIR?=	extensions/${XPI_DISTNAME}
PKGNAMEPREFIX?=	xpi-
EXTRACT_SUFX?=	.xpi
DISTNAME?=		${XPI_DISTNAME}-${DISTVERSIONPREFIX}${DISTVERSION}${DISTVERSIONSUFFIX}
DIST_SUBDIR?=	xpi
LATEST_LINK?=	${PKGBASE:S/_//g}

NO_BUILD=	yes
USE_ZIP=	yes
EXTRACT_AFTER_ARGS=	-d ${WRKSRC}

XPI_DISTNAME?=	${PORTNAME}
XPI_DIRS?=		chrome components defaults/preferences defaults
WITH_XPI_APPS?=	*firefox* *thunderbird* *flock*
XPI_APPS?=		${WITH_XPI_APPS:S.^.${X11BASE}/lib/.:S.$./extensions.}

_TD=		lib/xpi/${XPI_ID}
_TD_FULL=	${PREFIX}/${_TD}
_Q=			2>/dev/null || true
PLIST_FILES_CMD+='@exec for _app in ${XPI_APPS} ; { ${LN} -sf ${_TD_FULL} $$_app ${_Q}; }'
PLIST_FILES_CMD+='@unexec for _app in ${XPI_APPS} ; { ${RM} -f $$_app/${XPI_ID} ; }'
PLIST_FILES+=	${XPI_FILES:S!^!${_TD}/!}
PLIST_FILES+=	${PLIST_FILES_CMD:S/ /%%SPACE%%/g}
PLIST_DIRS+=	${XPI_DIRS:S!^!${_TD}/!}
PLIST_DIRS+=	${_TD} lib/xpi
PLIST_SUB+=		SPACE=" "

do-install:
	@${INSTALL} -d ${_TD_FULL}
	@${CP} -Rp ${WRKSRC}/ ${_TD_FULL}/
	@if [ -d ${FILESDIR} -a -f ${FILESDIR}/chrome.manifest ] ; \
		then ${CP} -p ${FILESDIR}/chrome.manifest ${_TD_FULL}/ ; fi
	@${CHOWN} -R ${SHAREOWN}:${SHAREGRP} ${_TD_FULL}/
	@${CHMOD} -R a+rX,go-w ${_TD_FULL}/
	@for _app in ${XPI_APPS} ; { ${LN} -sf ${_TD_FULL} $$_app ${_Q} ; }

relink:
	@-for _app in ${XPI_APPS} ; { ${LN} -sf ${_TD_FULL} $$_app ${_Q} ; }

relink-all:
	@-for _app in ${XPI_APPS} ; { for _xpi in ${PREFIX}/lib/xpi/\{*\} ; { \
		${LN} -sf $$_xpi $$_app ${_Q} ; } ; }

# Maintainer section
xpi-gen:	extract
	@${ECHO_CMD} -n 'XPI_ID='
	@${GREP} -m1 em:id ${WRKSRC}/install.rdf | ${CUT} -f2- -d\> | \
	${CUT} -f1 -d\< | ${CUT} -f2 -d\"
	@${ECHO_CMD} -n 'XPI_FILES='
	@cd ${WRKSRC} && ${FIND} -s . -not -type d | cut -f2- -d/ | ${TR} '\n' ' '
	@if [ -d ${FILESDIR} -a -f ${FILESDIR}/chrome.manifest ] ; \
		then ${ECHO_CMD} chrome.manifest ; fi
	@${ECHO_CMD}
	@${ECHO_CMD} -n 'XPI_DIRS='
	@cd ${WRKSRC} && ${FIND} -ds . -not -name . -type d | cut -f2- -d/ | ${TR} '\n' ' '
	@${ECHO_CMD}
