Regressed by https://github.com/intel/compute-runtime/commit/691a4ea8237f
blitterOperationsSupported isn't enabled on any GPU yet

Process 82663 stopped
* thread #1, name = 'ze_peak', stop reason = signal SIGABRT
    frame #0: 0x000000080060b02a libc.so.7`__sys_thr_kill at thr_kill.S:4
(lldb) bt
* thread #1, name = 'ze_peak', stop reason = signal SIGABRT
  * frame #0: 0x000000080060b02a libc.so.7`__sys_thr_kill at thr_kill.S:4
    frame #1: 0x000000080060a9c4 libc.so.7`__raise(s=6) at raise.c:52:10
    frame #2: 0x0000000800573459 libc.so.7`abort at abort.c:67:8
    frame #3: 0x00000008003d6a49 libcxxrt.so.1`report_failure(err=<unavailable>, thrown_exception=0x0000000802717fa8) at exception.cc:719:5
    frame #4: 0x000000000020df59 ze_peak`L0Context::init_xe(this=0x00007fffffffde70) at ze_peak.cpp:183:5
    frame #5: 0x00000000002115d9 ze_peak`main(argc=1, argv=0x00007fffffffe0f0) at ze_peak.cpp:760:11
    frame #6: 0x000000000020b8bf ze_peak`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1.c:76:7
(lldb) f 4
frame #4: 0x000000000020df59 ze_peak`L0Context::init_xe(this=0x00007fffffffde70) at ze_peak.cpp:183:5
   180    result =
   181        zeCommandListCreate(device, &command_list_description, &command_list);
   182    if (result) {
-> 183      throw std::runtime_error("zeDeviceCreateCommandList failed: " +
   184                               std::to_string(result));
   185    }
   186    if (verbose)

--- level_zero/core/source/device/device_imp.h.orig	2020-04-17 18:43:38 UTC
+++ level_zero/core/source/device/device_imp.h
@@ -99,9 +99,7 @@ struct DeviceImp : public Device {
             auto hwInfo = neoDevice->getHardwareInfo();
             if (hwInfo.capabilityTable.blitterOperationsSupported) {
                 *useBliter = NEO::DebugManager.flags.EnableCopyOnlyCommandListsAndCommandQueues.get();
-                return ZE_RESULT_SUCCESS;
             }
-            return ZE_RESULT_ERROR_INVALID_ENUMERATION;
         }
         return ZE_RESULT_SUCCESS;
     }
