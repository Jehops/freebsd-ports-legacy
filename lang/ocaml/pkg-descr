Objective Caml is an implementation of the ML language, based on
the Caml Light dialect extended with a complete class-based object system
and a powerful module system in the style of Standard ML.

Objective Caml comprises two compilers. One generates bytecode
which is then interpreted by a C program. This compiler runs quickly,
generates compact code with moderate memory requirements, and is
portable to essentially any 32 or 64 bit Unix platform. Performance of
generated programs is quite good for a bytecoded implementation:
almost twice as fast as Caml Light 0.7. This compiler can be used
either as a standalone, batch-oriented compiler that produces
standalone programs, or as an interactive, toplevel-based system.

The other compiler generates high-performance native code for a number
of processors. Compilation takes longer and generates bigger code, but
the generated programs deliver excellent performance (better than
Standard ML of New Jersey 1.08 on our tests), while retaining the
moderate memory requirements of the bytecode compiler. The native-code
compiler currently runs on the following platforms:

    Alpha processors: DecStation 3000 under OSF1
    Sparc processors: Sun Sparcstation under SunOS 4.1 or Solaris 2
    Intel 386 / 486 / Pentium processors: PCs under Linux, NextStep, FreeBSD,
					Windows NT, Windows 95
    Mips processors: DecStation 3100 and 5000 under Ultrix 4
    HP PA-RISC processors: HP 9000/700 under NextStep (sorry, no HPUX yet)
    PowerPC and IBM RS/6000 processors: IBM workstations under AIX 3.2

More information on Objective Caml is available on the World Wide Web:

    http://pauillac.inria.fr/ocaml/
