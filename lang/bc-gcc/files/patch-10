--- Makefile.in.bc	Fri Aug 21 02:44:07 1998
+++ Makefile.in	Fri Aug 21 02:44:08 1998
@@ -121,7 +121,7 @@
 # The GCC to use for compiling libgcc2.a, enquire, and libgcc1-test.
 # Usually the one we just built.
 # Don't use this as a dependency--use $(GCC_PASSES) or $(GCC_PARTS).
-GCC_FOR_TARGET = ./xgcc -B./
+GCC_FOR_TARGET = ./xgcc -v -B./
 
 # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.
 # It omits XCFLAGS, and specifies -B./.
@@ -944,7 +944,7 @@
 	cd bounds/lib; \
 	$(MAKE) -f $${srcdir1}/bounds/lib/Makefile libcheck.a \
 	  srcdir=$${srcdir1} tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
-	  GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
+	  GCC_FOR_TARGET="$${thisdir1}/xgcc -v -B$${thisdir1}/" \
 	  GCC_CFLAGS="$(GCC_CFLAGS)"
 	-rm -f $(LIBCHECK)
 	ln bounds/lib/libcheck.a . >/dev/null 2>&1 || cp bounds/lib/libcheck.a .
@@ -957,7 +957,7 @@
 	cd bounds/lib; \
 	$(MAKE) -f $$srcdir1/bounds/lib/Makefile libcheck.a \
 	  srcdir=$$srcdir1 tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
-	  GCC_FOR_TARGET="$$thisdir1/xgcc -B$$thisdir1/" \
+	  GCC_FOR_TARGET="$$thisdir1/xgcc -v -B$$thisdir1/" \
 	  GCC_CFLAGS="$(GCC_CFLAGS)"
 	-rm -f $(LIBCHECK)
 	ln bounds/lib/libcheck.a . >/dev/null 2>&1 || cp bounds/lib/libcheck.a .
@@ -1029,7 +1029,7 @@
 	cd objc; \
 	$(MAKE) -f $${srcdir1}/objc/Makefile libobjc.a \
 	  srcdir=$${srcdir1} tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
-	  GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
+	  GCC_FOR_TARGET="$${thisdir1}/xgcc -v -B$${thisdir1}/" \
 	  GCC_CFLAGS="$(GCC_CFLAGS)"
 	-rm -f libobjc.a
 	ln objc/libobjc.a . >/dev/null 2>&1 || cp objc/libobjc.a .
@@ -1042,7 +1042,7 @@
 	cd objc; \
 	$(MAKE) -f $$srcdir1/objc/Makefile libobjc.a \
 	  srcdir=$$srcdir1 tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
-	  GCC_FOR_TARGET="$$thisdir1/xgcc -B$$thisdir1/" \
+	  GCC_FOR_TARGET="$$thisdir1/xgcc -v -B$$thisdir1/" \
 	  GCC_CFLAGS="$(GCC_CFLAGS)"
 
 # Compile two additional files that are linked with every program
@@ -1828,7 +1828,7 @@
 	cd objc; \
 	$(MAKE) -f $${srcdir1}/objc/Makefile copy-headers \
 	srcdir=$${srcdir1} tooldir=$(tooldir) AR="$(AR)" AR_FLAGS="$(AR_FLAGS)" \
-	GCC_FOR_TARGET="$${thisdir1}/xgcc -B$${thisdir1}/" \
+	GCC_FOR_TARGET="$${thisdir1}/xgcc -v -B$${thisdir1}/" \
 	GCC_CFLAGS="$(GCC_CFLAGS)" incinstalldir=$${thisdir1}/include
 	touch objc-headers
 
@@ -2422,17 +2422,17 @@
 # To prevent `make install' from compiling alloca.o and then relinking cc1
 # because alloca.o is newer, we permit these recursive makes to compile
 # alloca.o.  Then cc1 is newer, so it won't have to be relinked.
-	$(MAKE) CC="stage1/xgcc -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
+	$(MAKE) CC="stage1/xgcc -v -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
 	$(MAKE) stage2
-	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
+	$(MAKE) CC="stage2/xgcc -v -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
 
 bootstrap2: force
-	$(MAKE) CC="stage1/xgcc -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
+	$(MAKE) CC="stage1/xgcc -v -Bstage1/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage1/ LANGUAGES="$(LANGUAGES)"
 	$(MAKE) stage2
-	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
+	$(MAKE) CC="stage2/xgcc -v -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
 
 bootstrap3: force
-	$(MAKE) CC="stage2/xgcc -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
+	$(MAKE) CC="stage2/xgcc -v -Bstage2/" CFLAGS="$(BOOT_CFLAGS)" LDFLAGS="$(BOOT_LDFLAGS)" libdir=$(libdir) STAGE_PREFIX=stage2/ LANGUAGES="$(LANGUAGES)"
 
 # Compare the object files in the current directory with those in the
 # stage2 directory.
