------------------------------------------------------------------------------
--                                                                          --
--                 GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS               --
--                                                                          --
--                   S Y S T E M . O S _ I N T E R F A C E                  --
--                                                                          --
--                                   B o d y                                --
--                         (Version for new GNARL)                          --
--                                                                          --
--                             $Revision: 1.2 $                            --
--                                                                          --
--   Copyright (C) 1991,1992,1993,1994,1995,1996 Florida State University   --
--                                                                          --
-- GNARL is free software; you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with GNARL; see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- As a special exception,  if other files  instantiate  generics from this --
-- unit, or you link  this unit with other files  to produce an executable, --
-- this  unit  does not  by itself cause  the resulting  executable  to  be --
-- covered  by the  GNU  General  Public  License.  This exception does not --
-- however invalidate  any other reasons why  the executable file  might be --
-- covered by the  GNU Public License.                                      --
--                                                                          --
-- GNARL was developed by the GNARL team at Florida State University. It is --
-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --
-- State University (http://www.gnat.com).                                  --
--                                                                          --
------------------------------------------------------------------------------

--  This is the FreeBSD THREADS version of this package

--  This is only a first approximation.
--  It should be autogenerated by the m4 macro processor.
--  Contributed by Daniel M. Eischen (eischen@vigrid.com)

--  DO NOT EDIT this file.
--  It was automatically generated from another file by the m4 macro processor.
--  The name of the file you should edit is the same as this one, but with
--  ".ads" replaced by ".sm4", or
--  ".adb" replaced by ".bm4", or
--  ".c" replaced by ".cm4", or
--  ".dat" replaced by ".tm4"

--  Local options selected:
--    __TARGET            = i386-unknown-freebsd
--    __ARCH              = I386
--    __OS                = FREEBSD
--    __HAS_SIGCONTEXT    = 1
--    __HAS_UCONTEXT      = 0
--    __THREADS           = POSIX_THREADS
--    __THREAD_VARIANT    = MIT-THREADS
--    __HAS_TIMESPEC      = 1
--    __HAS_NANOSLEEP     = 1
--    __HAS_CLOCK_GETTIME = 1
--    __HAS_GETTIMEOFDAY  = 1
--    __POSIX_THREAD_PRIO_PROTECT = 0
--    __POSIX_THREAD_PRIO_INHERIT = 0
--    __POSIX_THREAD_ATTR_STACKADDR = 1
--    __POSIX_THREAD_ATTR_STACKSIZE = 1
--    __POSIX_THREAD_PRIORITY_SCHEDULING = 0

--  This package encapsulates all direct interfaces to OS services
--  that are needed by children of System.

--  This version is for POSIX-like operating systems
--  The original file "s-osinte.ads_m4" contains conditional
--  macro calls that allow selection of various options.

with Interfaces.C; use Interfaces.C;
package body System.OS_Interface is

   function Errno return int is
      type int_ptr is access all int;

      function internal_errno return int_ptr;
      pragma Import (C, internal_errno, "__error");
   begin
      return (internal_errno.all);
   end Errno;

   function Get_Stack_Base (thread : pthread_t) return Address is
   begin
      return (0);
   end Get_Stack_Base;

   function pthread_getschedparam
     (thread : pthread_t;
      policy : access int;
      param  : access struct_sched_param) return int is

      function pthread_getprio (thread : pthread_t) return int;
      pragma Import (C, pthread_getprio, "pthread_getprio");

      Result : int;
   begin
      Result := pthread_getprio (thread);
      if Result >= 0 then
         --  Only set sched_param if we succeeded.  Also ensure
         --  we return a successful status to the caller.
         param.sched_priority := Result;
         Result := 0;
      end if;
      return (Result);
   end pthread_getschedparam;

   function pthread_setschedparam
     (thread : pthread_t;
      policy : int;
      param  : access struct_sched_param) return int is

      function pthread_setprio (thread : pthread_t; prio : int) return int;
      pragma Import (C, pthread_setprio, "pthread_setprio");

   begin
      return (pthread_setprio (thread, param.sched_priority));
   end pthread_setschedparam;

   function pthread_attr_setschedpolicy
     (attr   : access pthread_attr_t;
      policy : int) return int is
   begin
      return (0);
   end pthread_attr_setschedpolicy;

   function pthread_attr_getschedpolicy
     (attr   : access pthread_attr_t;
      policy : access int) return int is
   begin
      return (0);
   end pthread_attr_getschedpolicy;

   procedure pthread_init is
   begin
      null;
   end pthread_init;

   function pthread_sigmask_set
     (how  : int;
      set  : access sigset_t)
     return int
   is
      function sigmask_set
        (how  : int;
         set  : access sigset_t;
         oset : sigset_t_ptr)
        return int;
      pragma Import (C, sigmask_set, "pthread_sigmask");
   begin
      return sigmask_set (how, set, null);
   end pthread_sigmask_set;

   function pthread_sigmask_oset
     (how  : int;
      oset : access sigset_t)
     return int
   is
      function sigmask_oset
        (how  : int;
         set  : sigset_t_ptr;
         oset : access sigset_t)
        return int;
      pragma Import (C, sigmask_oset, "pthread_sigmask");
   begin
      return sigmask_oset (how, null, oset);
   end pthread_sigmask_oset;

   -----------------
   -- To_Duration --
   -----------------

   function To_Duration (TS : timespec) return Duration is
   begin
      return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;
   end To_Duration;

   -----------------
   -- To_Timespec --
   -----------------

   function To_Timespec (D : Duration) return timespec is
      S : time_t;
      F : Duration;
   begin
      S := time_t (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.
      if F < 0.0 then S := S - 1; F := F + 1.0; end if;
      return timespec' (ts_sec => S,
        ts_nsec => long (Long_Long_Integer (F * 10#1#E9)));
   end To_Timespec;


   function To_Duration (TV : struct_timeval) return Duration is
   begin
      return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;
   end To_Duration;

   function To_Timeval (D : Duration) return struct_timeval is
      S : long;
      F : Duration;
   begin
      S := long (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.
      if F < 0.0 then S := S - 1; F := F + 1.0; end if;
      return struct_timeval' (tv_sec => S,
        tv_usec => long (Long_Long_Integer (F * 10#1#E6)));
   end To_Timeval;

end System.OS_Interface;
