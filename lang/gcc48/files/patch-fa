--- gcc/c-common.c.orig	Sat Dec  2 19:46:03 2000
+++ gcc/c-common.c	Mon Dec 11 12:11:16 2000
@@ -232,7 +232,7 @@
 						 int, int, int));
 static void init_attributes		PARAMS ((void));
 static void record_function_format	PARAMS ((tree, tree, enum format_type,
-						 int, int));
+						 int, int, int));
 static void record_international_format	PARAMS ((tree, tree, int));
 static int default_valid_lang_attribute PARAMS ((tree, tree, tree, tree));
 
@@ -927,6 +927,7 @@
 	    enum format_type format_type;
 	    tree argument;
 	    unsigned int arg_num;
+	    int null_format_ok;
 
 	    if (TREE_CODE (decl) != FUNCTION_DECL)
 	      {
@@ -937,7 +938,7 @@
 
 	    if (TREE_CODE (format_type_id) != IDENTIFIER_NODE)
 	      {
-		error ("unrecognized format specifier");
+		error_with_decl (decl, "unrecognized format specifier");
 		continue;
 	      }
 	    else
@@ -945,12 +946,26 @@
 		const char *p = IDENTIFIER_POINTER (format_type_id);
 
 		if (!strcmp (p, "printf") || !strcmp (p, "__printf__"))
+		  {
+		  format_type = printf_format_type;
+		  null_format_ok = 0;
+		  }
+		else if (!strcmp (p, "printf0") || !strcmp (p, "__printf0__"))
+		  {
 		  format_type = printf_format_type;
+		  null_format_ok = 1;
+		  }
 		else if (!strcmp (p, "scanf") || !strcmp (p, "__scanf__"))
+		  {
 		  format_type = scanf_format_type;
+		  null_format_ok = 0;
+		  }
 		else if (!strcmp (p, "strftime")
 			 || !strcmp (p, "__strftime__"))
+		  {
 		  format_type = strftime_format_type;
+		  null_format_ok = 0;
+		  }
 		else
 		  {
 		    warning ("`%s' is an unrecognized format function type", p);
@@ -1029,7 +1044,8 @@
 
 	    record_function_format (DECL_NAME (decl),
 				    DECL_ASSEMBLER_NAME (decl),
-				    format_type, format_num, first_arg_num);
+				    format_type, format_num, first_arg_num,
+				    null_format_ok);
 	    break;
 	  }
 
@@ -1693,6 +1709,20 @@
 
 static const format_char_info print_char_table[] =
 {
+#warning The FreeBSD kernel extensions in print_char_table might not be done correctly.
+/* FreeBSD kernel extensions (src/sys/kern/subr_prf.c).  */
+/* The format %b is supported to decode error registers.
+   Its usage is:	printf("reg=%b\n", regval, "<base><arg>*");
+   which produces:	reg=3<BITTWO,BITONE>
+   The format %D provides a hexdump given a pointer and separator string:
+   ("%6D", ptr, ":")		-> XX:XX:XX:XX:XX:XX
+   ("%*D", len, ptr, " ")	-> XX XX XX XX ...
+   */
+  { "D",   1, STD_EXT, { T89_C,   T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp"       "c" },
+  { "b",   1, STD_EXT, { T89_C,   T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp"       "" },
+  { "rz",  0, STD_EXT, { BADLEN,  T89_I,   T89_I,   T89_L,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp0 +#"   "i" },
+#define unextended_print_char_table	(print_char_table + 3)
+#warning The FreeBSD kernel extensions in print_char_table might not be done correctly.
   /* C89 conversion specifiers.  */
   { "di",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, "-wp0 +'I", "i" },
   { "oxX", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, "-wp0#",    "i" },
@@ -1791,6 +1821,7 @@
   enum format_type format_type;	/* type of format (printf, scanf, etc.) */
   int format_num;		/* number of format argument */
   int first_arg_num;		/* number of first arg (zero for varargs) */
+  int null_format_ok;		/* TRUE if the format string may be NULL */
 } function_format_info;
 
 static function_format_info *function_format_list = NULL;
@@ -1876,42 +1907,42 @@
     {
       /* Functions from ISO/IEC 9899:1990.  */
       record_function_format (get_identifier ("printf"), NULL_TREE,
-			      printf_format_type, 1, 2);
+			      printf_format_type, 1, 2, 0);
       record_function_format (get_identifier ("__builtin_printf"), NULL_TREE,
-			      printf_format_type, 1, 2);
+			      printf_format_type, 1, 2, 0);
       record_function_format (get_identifier ("fprintf"), NULL_TREE,
-			      printf_format_type, 2, 3);
+			      printf_format_type, 2, 3, 0);
       record_function_format (get_identifier ("sprintf"), NULL_TREE,
-			      printf_format_type, 2, 3);
+			      printf_format_type, 2, 3, 0);
       record_function_format (get_identifier ("scanf"), NULL_TREE,
-			      scanf_format_type, 1, 2);
+			      scanf_format_type, 1, 2, 0);
       record_function_format (get_identifier ("fscanf"), NULL_TREE,
-			      scanf_format_type, 2, 3);
+			      scanf_format_type, 2, 3, 0);
       record_function_format (get_identifier ("sscanf"), NULL_TREE,
-			      scanf_format_type, 2, 3);
+			      scanf_format_type, 2, 3, 0);
       record_function_format (get_identifier ("vprintf"), NULL_TREE,
-			      printf_format_type, 1, 0);
+			      printf_format_type, 1, 0, 0);
       record_function_format (get_identifier ("vfprintf"), NULL_TREE,
-			      printf_format_type, 2, 0);
+			      printf_format_type, 2, 0, 0);
       record_function_format (get_identifier ("vsprintf"), NULL_TREE,
-			      printf_format_type, 2, 0);
+			      printf_format_type, 2, 0, 0);
       record_function_format (get_identifier ("strftime"), NULL_TREE,
-			      strftime_format_type, 3, 0);
+			      strftime_format_type, 3, 0, 0);
     }
 
   if (flag_hosted && flag_isoc99)
     {
       /* ISO C99 adds the snprintf and vscanf family functions.  */
       record_function_format (get_identifier ("snprintf"), NULL_TREE,
-			      printf_format_type, 3, 4);
+			      printf_format_type, 3, 4, 0);
       record_function_format (get_identifier ("vsnprintf"), NULL_TREE,
-			      printf_format_type, 3, 0);
+			      printf_format_type, 3, 0, 0);
       record_function_format (get_identifier ("vscanf"), NULL_TREE,
-			      scanf_format_type, 1, 0);
+			      scanf_format_type, 1, 0, 0);
       record_function_format (get_identifier ("vfscanf"), NULL_TREE,
-			      scanf_format_type, 2, 0);
+			      scanf_format_type, 2, 0, 0);
       record_function_format (get_identifier ("vsscanf"), NULL_TREE,
-			      scanf_format_type, 2, 0);
+			      scanf_format_type, 2, 0, 0);
     }
 
   if (flag_hosted && flag_noniso_default_format_attributes)
@@ -1934,12 +1965,13 @@
 
 static void
 record_function_format (name, assembler_name, format_type,
-			format_num, first_arg_num)
+			format_num, first_arg_num, null_format_ok)
       tree name;
       tree assembler_name;
       enum format_type format_type;
       int format_num;
       int first_arg_num;
+      int null_format_ok;
 {
   function_format_info *info;
 
@@ -1963,6 +1995,7 @@
   info->format_type = format_type;
   info->format_num = format_num;
   info->first_arg_num = first_arg_num;
+  info->null_format_ok = null_format_ok;
 }
 
 /* Record information for the names of function that modify the format
@@ -2454,7 +2487,7 @@
 	 specially if info == NULL and add a res->number_null entry for
 	 that case, or maybe add a function pointer to be called at
 	 the end instead of hardcoding check_format_info_main.  */
-      status_warning (status, "null format string");
+      if (!info->null_format_ok) status_warning (status, "null format string");
 
       /* Skip to first argument to check, so we can see if this format
 	 has any arguments (it shouldn't).  */
@@ -2650,6 +2683,54 @@
 	      main_arg_num = opnum + info->first_arg_num - 1;
 	    }
 	}
+      if (*format_chars == 'b')
+	{
+	  /* There should be an int arg to control the string arg.  */
+	  if (params == 0)
+	    {
+	      status_warning (status, "too few arguments for format");
+	      return;
+	    }
+	    if (info->first_arg_num != 0)
+	    {
+	      cur_param = TREE_VALUE (params);
+	      params = TREE_CHAIN (params);
+	      ++arg_num;
+	      if ((TYPE_MAIN_VARIANT (TREE_TYPE (cur_param))
+		   != integer_type_node)
+		  &&
+		  (TYPE_MAIN_VARIANT (TREE_TYPE (cur_param))
+		   != unsigned_type_node))
+		{
+		  status_warning (status, "bitmap is not type int (arg %d)", arg_num);
+		}
+	    }
+	}
+      if (*format_chars == 'D')
+	{
+	  /* There should be an unsigned char * arg before the string arg.  */
+	  if (params == 0)
+	    {
+	      status_warning (status, "too few arguments for format");
+	      return;
+	    }
+	    if (info->first_arg_num != 0)
+	    {
+	      tree cur_type;
+	      cur_param = TREE_VALUE (params);
+	      params = TREE_CHAIN (params);
+	      ++arg_num;
+	      cur_type = TREE_TYPE (cur_param);
+	      if (TREE_CODE (cur_type) != POINTER_TYPE
+		  || TYPE_MAIN_VARIANT (TREE_TYPE (cur_type))
+		     != unsigned_char_type_node)
+		{
+		  status_warning (status,
+			  "ethernet address is not type unsigned char * (arg %d)",
+			   arg_num);
+		}
+	    }
+	}
 
       /* Read any format flags, but do not yet validate them beyond removing
 	 duplicates, since in general validation depends on the rest of
@@ -3024,7 +3105,7 @@
 	  else if (strchr (fci->flags2, '2') != 0)
 	    y2k_level = 2;
 	  if (y2k_level == 3)
-	    status_warning (status, "`%%%c' yields only last 2 digits of year in some locales",
+	    status_warning (status, "`%%%c' yields only last 2 digits of year in some locales on non-BSD systems",
 			    format_char);
 	  else if (y2k_level == 2)
 	    status_warning (status, "`%%%c' yields only last 2 digits of year", format_char);
