https://github.com/glandium/git-cinnabar/commit/ea76c73d222e

--- helper/cinnabar-fast-import.c.orig	2019-07-01 04:57:48 UTC
+++ helper/cinnabar-fast-import.c
@@ -588,7 +588,7 @@ static void store_file(struct rev_chunk *chunk)
 	while (rev_diff_iter_next(&diff)) {
 		if (diff.start > last_file.file.len || diff.start < last_end)
 			die("Malformed file chunk for %s",
-			    sha1_to_hex(chunk->node->hash));
+			    hash_to_hex_algop(chunk->node->hash, &hash_algos[GIT_HASH_SHA1]));
 		strbuf_add(&data, last_file.file.buf + last_end,
 		           diff.start - last_end);
 		strbuf_addbuf(&data, &diff.data);
@@ -598,7 +598,7 @@ static void store_file(struct rev_chunk *chunk)
 
 	if (last_file.file.len < last_end)
 		die("Malformed file chunk for %s",
-		    sha1_to_hex(chunk->node->hash));
+		    hash_to_hex_algop(chunk->node->hash, &hash_algos[GIT_HASH_SHA1]));
 
 	strbuf_add(&data, last_file.file.buf + last_end,
 		   last_file.file.len - last_end);
@@ -702,8 +702,8 @@ static void store_manifest(struct rev_chunk *chunk)
 		note = get_note_hg(&hg2git, chunk->delta_node);
 		if (!note)
 			die("Cannot find delta node %s for %s",
-			    sha1_to_hex(chunk->delta_node->hash),
-			    sha1_to_hex(chunk->node->hash));
+			    hash_to_hex_algop(chunk->delta_node->hash, &hash_algos[GIT_HASH_SHA1]),
+			    hash_to_hex_algop(chunk->node->hash, &hash_algos[GIT_HASH_SHA1]));
 
 		// TODO: this could be smarter, avoiding to throw everything
 		// away. But this is what the equivalent fast-import commands
@@ -826,7 +826,7 @@ static void store_manifest(struct rev_chunk *chunk)
 	strbuf_addstr(&data, "author  <cinnabar@git> 0 +0000\n"
 	                     "committer  <cinnabar@git> 0 +0000\n"
 	                     "\n");
-	strbuf_addstr(&data, sha1_to_hex(last_manifest_oid.hash));
+	strbuf_addstr(&data, hash_to_hex_algop(last_manifest_oid.hash, &hash_algos[GIT_HASH_SHA1]));
 	store_object(OBJ_COMMIT, &data, NULL, &last_manifest->oid, 0);
 	strbuf_release(&data);
 	ensure_notes(&hg2git);
@@ -834,11 +834,11 @@ static void store_manifest(struct rev_chunk *chunk)
 	add_head(&manifest_heads, &last_manifest->oid);
 	if ((cinnabar_check & CHECK_MANIFESTS) &&
 	    !check_manifest(&last_manifest->oid, NULL))
-		die("sha1 mismatch for node %s", sha1_to_hex(chunk->node->hash));
+		die("sha1 mismatch for node %s", hash_to_hex_algop(chunk->node->hash, &hash_algos[GIT_HASH_SHA1]));
 	return;
 
 malformed:
-	die("Malformed manifest chunk for %s", sha1_to_hex(chunk->node->hash));
+	die("Malformed manifest chunk for %s", hash_to_hex_algop(chunk->node->hash, &hash_algos[GIT_HASH_SHA1]));
 }
 
 static void for_each_changegroup_chunk(FILE *in, int version,
--- helper/hg-connect.c.orig	2019-07-01 04:57:48 UTC
+++ helper/hg-connect.c
@@ -263,7 +263,7 @@ void hg_unbundle(struct hg_connection *conn, struct st
 			/* XXX: should use hg_object_id-specific function */
 			oid_array_for_each_unique(heads, unbundlehash, &ctx);
 			git_SHA1_Final(sha1, &ctx);
-			sha1_to_hex_r(&heads_str[13], sha1);
+			hash_to_hex_algop_r(&heads_str[13], sha1, &hash_algos[GIT_HASH_SHA1]);
 		} else
 			heads_str = join_oid_array_hex(heads, ' ');
 	} else
