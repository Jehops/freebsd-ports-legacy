https://github.com/glandium/git-cinnabar/commit/7e88e6e73cb6

--- helper/GIT-VERSION.mk.orig	2020-04-23 06:16:13 UTC
+++ helper/GIT-VERSION.mk
@@ -1,2 +1,2 @@
-GIT_VERSION ?= v2.27.0
+GIT_VERSION ?= v2.29.0
 WINDOWS_GIT_VERSION ?= $(GIT_VERSION).windows.1
--- helper/cinnabar-fast-import.c.orig	2020-04-23 06:16:13 UTC
+++ helper/cinnabar-fast-import.c
@@ -1,8 +1,5 @@
-#define cmd_main fast_import_main
-#define hashwrite fast_import_hashwrite
 static void start_packfile();
 #include "fast-import.patched.c"
-#undef hashwrite
 #include "cinnabar-fast-import.h"
 #include "cinnabar-helper.h"
 #include "cinnabar-notes.h"
@@ -32,10 +29,9 @@ static void cleanup();
 static struct pack_window *pack_win;
 static struct pack_window *prev_win;
 
-void hashwrite(struct hashfile *, const void *, unsigned int);
+void real_hashwrite(struct hashfile *, const void *, unsigned int);
 
-void fast_import_hashwrite(struct hashfile *f, const void *buf,
-			   unsigned int count)
+void hashwrite(struct hashfile *f, const void *buf, unsigned int count)
 {
 	size_t window_size;
 
@@ -52,7 +48,7 @@ void fast_import_hashwrite(struct hashfile *f, const v
 		pack_data->pack_size = pack_win->len;
 	}
 
-	hashwrite(f, buf, count);
+	real_hashwrite(f, buf, count);
 	pack_win->last_used = -1; /* always last used */
 	pack_win->inuse_cnt = -1;
 	if (pack_data)
--- helper/cinnabar-helper.c.orig	2020-04-23 06:16:13 UTC
+++ helper/cinnabar-helper.c
@@ -2411,7 +2411,7 @@ static void init_git_config()
 		setup_path();
 	}
 	proc.argv = argv;
-	argv_array_push(&proc.env_array, "GIT_EDITOR=echo");
+	strvec_push(&proc.env_array, "GIT_EDITOR=echo");
 	proc.no_stdin = 1;
 	proc.no_stderr = 1;
 	/* We don't really care about the capture_command return value. If
--- helper/csum-file.c.patch.orig	2020-11-05 19:24:28 UTC
+++ helper/csum-file.c.patch
@@ -0,0 +1,13 @@
+diff --git a/csum-file.c b/csum-file.c
+index 0f35fa5ee4..cee7bd5aeb 100644
+--- a/csum-file.c
++++ b/csum-file.c
+@@ -86,7 +86,7 @@ int finalize_hashfile(struct hashfile *f, unsigned char *result, unsigned int fl
+ 	return fd;
+ }
+ 
+-void hashwrite(struct hashfile *f, const void *buf, unsigned int count)
++void real_hashwrite(struct hashfile *f, const void *buf, unsigned int count)
+ {
+ 	while (count) {
+ 		unsigned offset = f->offset;
--- helper/helper.mk.orig	2020-04-23 06:16:13 UTC
+++ helper/helper.mk
@@ -91,8 +91,12 @@ CINNABAR_OBJECTS += which.o
 
 PATCHES = $(notdir $(wildcard $(SOURCE_DIR)helper/*.patch))
 
-$(addprefix $(SOURCE_DIR)helper/,$(PATCHES:%.c.patch=%.patched.c)): $(SOURCE_DIR)helper/%.patched.c: $(SOURCE_DIR)helper/%.c.patch %.c
-	patch -p1 -F0 -o $@ $(CURDIR)/$(notdir $(lastword $^)) < $<
+define patch
+$$(SOURCE_DIR)helper/$1.patched.c: $$(SOURCE_DIR)helper/$1.c.patch $$(firstword $$(wildcard $$(SOURCE_DIR)git-core/$1.c $$(SOURCE_DIR)git-core/builtin/$1.c))
+	patch -p1 -F0 -o $$@ $$(lastword $$^) < $$<
+endef
+
+$(foreach p,$(PATCHES),$(eval $(call patch,$(p:%.c.patch=%))))
 
 clean-patched:
 	$(RM) $(addprefix $(SOURCE_DIR)helper/,$(PATCHES:%.c.patch=%.patched.c))
--- helper/hg-connect-stdio.c.orig	2020-04-23 06:16:13 UTC
+++ helper/hg-connect-stdio.c
@@ -265,7 +265,7 @@ struct hg_connection *hg_connect_stdio(const char *url
 	strbuf_addstr(&buf, "hg -R ");
 	maybe_sq_quote_buf(&buf, remote_path);
 	strbuf_addstr(&buf, " serve --stdio");
-	argv_array_push(&proc->args, buf.buf);
+	strvec_push(&proc->args, buf.buf);
 	strbuf_release(&buf);
 
 	start_command(proc);
