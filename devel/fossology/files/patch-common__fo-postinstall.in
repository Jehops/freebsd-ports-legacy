--- common/fo-postinstall.in	2011-06-02 15:16:35.611277082 +0100
+++ common/fo-postinstall.in.orig	2011-06-02 15:12:07.679891820 +0100
@@ -7,14 +7,23 @@
 # idempotent, meaning that running it repeatedly will still do the
 # right thing, regardless of the success of previous runs.
 
-# FIXME: joint options do not work (i.e. "-as" instead of "-a -s")
+## Options parsing and setup
+# parse options
+OPTS=`getopt -o adwseoh --long agent,database,web,web-only,scheduler,scheduler-only,everything,overwrite,help -n 'fo-postinstall' -- "$@"`
+
+if [ $? != 0 ]; then
+   echo "ERROR: Bad option specified."
+   OPTS="--help"
+fi
+
+eval set -- "$OPTS"
 
 # if no options or just -o then do everything
-if [ $# -eq 0 -o "$1" = "-o" ]; then
+if [ "$OPTS" = " --" -o "$OPTS" = " -o --" ]; then
    EVERYTHING=1
 fi
 
-while [ $# -gt 0 ]; do
+while true; do
    case "$1" in
       -a|--agent) AGENT=1; shift;;
       -d|--database) DATABASE=1; shift;;
@@ -93,12 +102,53 @@
    # documentation.
 
    # Make sure the user and group exist, if not then create
-
-	# We do this in the port Makefile
-
-   #echo "*** Creating user and group ***"
+   echo "*** Creating user and group ***"
 
    # check for group
+   if grep -q "^{$PROJECTGROUP}:" /etc/group; then
+      echo "NOTE: group '{$PROJECTGROUP}' already exists, good."
+   else
+      # use addgroup if it exists since it supports --system
+      if [ -f /usr/sbin/addgroup -a ! -L /usr/sbin/addgroup ]; then
+         addgroup --system {$PROJECTGROUP}
+      else
+         groupadd {$PROJECTGROUP}
+      fi
+      if [ "$?" != "0" ] ; then
+         echo "ERROR: Unable to create group '{$PROJECTGROUP}'"
+         exit 1
+      else
+         echo "NOTE: group '{$PROJECTGROUP}' created"
+      fi
+   fi
+
+   # check for user
+   if grep -q "^{$PROJECTUSER}:" /etc/passwd; then
+      echo "NOTE: user '{$PROJECTUSER}' already exists, good."
+      USERSHELL=`grep "^{$PROJECTUSER}:" /etc/passwd |cut -d: -f 7`
+      if [ "$USERSHELL" = "/bin/false" ]; then
+         echo "ERROR: {$PROJECTUSER} shell must be a real shell"
+         exit 1
+      fi
+   else
+      # ensure that the full parent path of the HOME exists first
+      mkdir -p $\{REPO%/*/*\}
+      # use adduser if it exists since it supports --system, but
+      # not if it's a symlink (probably to /usr/sbin/useradd)
+      if [ -f /usr/sbin/adduser -a ! -L /usr/sbin/adduser ]; then
+         adduser --gecos "{$PROJECT}" --ingroup {$PROJECTGROUP} --system \
+           --shell /bin/bash --home "$\{REPO%/*\}" {$PROJECTUSER}
+      else
+         useradd -c "{$PROJECT}" -g {$PROJECTGROUP} -m \
+           -s /bin/bash -d "$\{REPO%/*\}" {$PROJECTUSER}
+      fi
+      if [ "$?" != "0" ] ; then
+         echo "ERROR: Unable to create user '{$PROJECTUSER}'"
+         exit 1
+      else
+         echo "NOTE: user '{$PROJECTUSER}' created"
+      fi
+   fi
 
    ## check for existance/ownership/permissions of needed directories
    echo "*** Making sure needed dirs exist with right ownership/permissions ***"
@@ -230,5 +280,28 @@
 
 ########################################################################
 
+if [ $WEBONLY ]; then
+   echo "*** Setting up the web interface ***"
+
+   # See if web server user exists, if so add to the group.
+   # check for www-data (Debian, etc)
+   grep -q "^www-data:" /etc/passwd
+   if [ $? == 0 ] ; then
+     echo "NOTE: Adding user www-data to group {$PROJECTGROUP}"
+     # this is smart enough to not add multiple times so it's ok to repeat
+     usermod -G {$PROJECTGROUP} -a www-data
+   fi
+   # check for apache (RHEL/CentOS, etc)
+   grep -q "^apache:" /etc/passwd
+   if [ $? == 0 ] ; then
+     echo "NOTE: Adding user apache to group {$PROJECTGROUP}"
+     # this is smart enough to not add multiple times so it's ok to repeat
+     usermod -G {$PROJECTGROUP} -a apache
+   fi
+
+fi # end of WEBONLY
+
+########################################################################
+
 echo "FOSSology postinstall complete, but sure to complete the remaining"
 echo "  steps in the INSTALL instructions."
