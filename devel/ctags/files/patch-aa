--- ctags.1.orig	Mon Jul 10 02:10:28 2000
+++ ctags.1	Sun Jul 30 15:21:04 2000
@@ -1,20 +1,17 @@
-.TH CTAGS 1 "Version 4.0.2" "Darren Hiebert"
+.TH EXCTAGS 1 "Version 4.0.2" "Darren Hiebert"
 
 
 .SH "NAME"
-ctags \- Generate tag files for source code
+exctags \- Generate tag files for source code
 
 
 .SH SYNOPSIS
 .TP 6
-\fBctags\fP [\fBoptions\fP] [\fIfile(s)\fP]
-.TP 6
-\fBetags\fP [\fBoptions\fP] [\fIfile(s)\fP]
+\fBexctags\fP [\fBoptions\fP] [\fIfile(s)\fP]
 
 
 .SH "DESCRIPTION"
-The \fBctags\fP and \fBetags\fP programs (hereinafter collectively referred to
-as \fBctags\fP, except where distinguished) generate an index (or "tag") file
+The \fBexctags\fP program generates an index (or "tag") file
 for a variety of language objects found in \fIfile(s)\fP.
 This tag file allows these items to be quickly and easily located by a text
 editor or other utility. A "tag" signifies a language object for which an
@@ -22,7 +19,7 @@
 object).
 
 .PP
-Alternatively, \fBctags\fP can generate a cross reference file which lists, in
+Alternatively, \fBexctags\fP can generate a cross reference file which lists, in
 human readable form, information about the various source objects found in a
 set of language files.
 
@@ -52,7 +49,7 @@
 .RE
 
 .PP
-\fBCtags\fP is capable of generating tags for indicated contructs of the
+\fBexctags\fP is capable of generating tags for indicated contructs of the
 following languages:
 
 .PP
@@ -283,9 +280,9 @@
 
 .PP
 By default, all other files extensions are ignored. This permits running
-\fBctags\fP on all files in either a single directory (e.g. "ctags *"), or all
-files in an entire source directory tree (e.g. "ctags -R"), since only those
-files whose extensions are known to \fBctags\fP will be scanned.
+\fBexctags\fP on all files in either a single directory (e.g. "exctags *"), or all
+files in an entire source directory tree (e.g. "exctags -R"), since only those
+files whose extensions are known to \fBexctags\fP will be scanned.
 
 .PP
 The reason that .h extensions are mapped to C++ files rather than C files
@@ -296,8 +293,8 @@
 
 .SH "OPTIONS"
 
-Despite the wealth of available options, defaults are set so that \fBctags\fP
-is most commonly executed without any options (e.g. "ctags *"), which will
+Despite the wealth of available options, defaults are set so that \fBexctags\fP
+is most commonly executed without any options (e.g. "exctags *"), which will
 create a tag file in the current directory for all known source files. The
 options described below are provided merely to allow custom tailoring to meet
 special needs.
@@ -315,7 +312,7 @@
 and "=\fIoff\fP" are considered synonyms for "=\fIno\fP".
 
 Some options are either ignored, or only useful, when used together with
-\fBetags\fP or, equivalently, when \fBctags\fP is run with the \fI-e\fP
+\fBetags\fP or, equivalently, when \fBexctags\fP is run with the \fI-e\fP
 option. These options will be noted.
 
 Most options may appear anywhere on the command line, affecting only those
@@ -333,17 +330,18 @@
 .TP 5
 .B \-e
 Output a tag file for use with Emacs. If this program is executed by the name
-\fBetags\fP, this option is enabled by default. This option must appear before
+\fBetags\fP, or, equivalently, when \fBexctags\fP is run with the \fI-e\fP
+option; this option is enabled by default. This option must appear before
 the first file name.
 
 .TP 5
 .BI \-f " tagfile"
 Use the name specified by \fItagfile\fP for the tag file (default is "tags",
 or "TAGS" when using the \fB-e\fP option). If \fItagfile\fP is specified as
-"-", then the tag file is written to standard output instead. \fBCtags\fP
+"-", then the tag file is written to standard output instead. \fBexctags\fP
 will stubbornly refuse to take orders if \fItagfile\fP exists and its first
 line contains something other than a valid tags line. This will save your neck
-if you mistakenly type "ctags -f *.c", which would otherwise overwrite your
+if you mistakenly type "exctags -f *.c", which would otherwise overwrite your
 first C file with the tags generated by the rest! This option must appear
 before the first file name. If this option is specified more than once, only
 the last will apply.
@@ -400,7 +398,7 @@
 and C++ source files. This option is specifically provided to handle special
 cases arising through the use of preprocessor macros. When the tokens listed
 are simple tokens, these tokens will be ignored during parsing of the source
-files. If a token is suffixed with a '+' character, \fBctags\fP will also
+files. If a token is suffixed with a '+' character, \fBexctags\fP will also
 ignore any parenthesis-enclosed argument list which may immediately follow the
 token in the source files. If two tokens are separated with the '=' character,
 the first token is replaced by the second token for parsing purposes. The list
@@ -533,9 +531,9 @@
 source line (with extra white space condensed) of the file which defines the
 tag. No tag file is written and all options affecting tag file output will be
 ignored. Example applications for this feature are generating a listing of all
-functions located in a source file (e.g. \fBctags -x --c-types\fP=\fIf\fP
+functions located in a source file (e.g. \fBexctags -x --c-types\fP=\fIf\fP
 \fIfile\fP), or generating a list of all externally visible global variables
-located in a source file (e.g. \fBctags -x --c-types\fP=\fIv\fP
+located in a source file (e.g. \fBexctags -x --c-types\fP=\fIv\fP
 \fB--file-scope\fP=\fIno file\fP). This option must appear before the first
 file name.
 
@@ -779,7 +777,7 @@
 
 .TP 5
 \fB--filter\fP=\fIyes\fP|\fIno\fP
-Causes \fBctags\fP to behave as a filter, reading source file names from
+Causes \fBexctags\fP to behave as a filter, reading source file names from
 standard input and printing their tags to standard output on a file-by-file
 basis. If \fB--sorted\fP is enabled, tags are sorted only within the source
 file in which they are defined. File names are read from standard output in
@@ -793,7 +791,7 @@
 \fB--filter-terminator\fP=\fIstring\fP
 Specifies a string to print to standard output following the tags for each
 file name parsed when the \fB--filter\fP option is enabled. This may permit an
-application reading the output of ctags to determine when the output for each
+application reading the output of exctags to determine when the output for each
 file is finished. Note that if the file name read is a directory and
 \fB--recurse\fP is enabled, this string will be printed only one once at the
 end of all tags found for by descending the directory. This string will always
@@ -937,7 +935,7 @@
 
 .TP 5
 \fB--lang[uage]\fP=\fIlanguage\fP
-By default, \fBctags\fP automatically selects the language of a source file,
+By default, \fBexctags\fP automatically selects the language of a source file,
 ignoring those files whose language cannot be determined (see
 \fBSOURCE FILES\fP, above). This option forces the specified language to be
 used for every supplied file instead of automatically selecting the language
@@ -990,7 +988,7 @@
 Specifies whether "#line" directives should be recognized. These are present
 in the output of preprocessors and contain the line number, and possibly the
 file name, of the original source file(s) from which the preprocessor output
-file was generated. When enabled, this option will cause \fBctags\fP to
+file was generated. When enabled, this option will cause \fBexctags\fP to
 generate tag entries marked with the file names and line numbers of their
 locations original source file(s), instead of their actual locations in the
 preprocessor output. The actual file names placed into the tag file will have
@@ -1001,7 +999,7 @@
 generally only useful when used together with the \fB--excmd\fP=\fInumber\fP
 (\fB-n\fP) option. Also, you may have to use either the \fB--lang\fP or
 \fB--langmap\fP option if the extension of the preprocessor output file is not
-known to \fBctags\fP.
+known to \fBexctags\fP.
 
 .TP 5
 \fB--links\fP=\fIyes\fP|\fIno\fP
@@ -1022,7 +1020,7 @@
 which they relate. Directories named "EIFGEN" are skipped, because these
 contain Eiffel compiler-generated C files. Also on Unix, symbolic links are
 followed. If you don't like these behaviors, either explicitly specify the
-files or pipe the output of \fBfind\fP(1) into \fBctags -L-\fP instead.
+files or pipe the output of \fBfind\fP(1) into \fBexctags -L-\fP instead.
 \fBNote:\fP This option is not supported on all platforms at present.
 
 .TP 5
@@ -1035,14 +1033,14 @@
 .TP 5
 \fB--totals\fP=\fIyes\fP|\fIno\fP
 Prints statistics about the source files read and the tag file written during
-the current invocation of \fBctags\fP. This option is off by default.
+the current invocation of \fBexctags\fP. This option is off by default.
 This option must appear before the first file name.
 
 .TP 5
 \fB--verbose\fP=\fIyes\fP|\fIno\fP
 Enable verbose mode. This prints out information on option processing and a
 brief message describing what action is being taken for each file considered
-by \fBctags\fP. Normally, \fBctags\fP does not read command line arguments
+by \fBexctags\fP. Normally, \fBexctags\fP does not read command line arguments
 until after options are read from the configuration files (see \fBFILES\fP,
 below) and the \fBCTAGS\fP environment variable. However, if this option is
 the first argument on the command line, it will take effect before any options
@@ -1050,13 +1048,13 @@
 
 .TP 5
 \fB--version\fP
-Prints a version identifier for \fBctags\fP to standard output. This is
+Prints a version identifier for \fBexctags\fP to standard output. This is
 guaranteed to always contain the string "Exuberant Ctags".
 
 
 .SH "OPERATIONAL DETAILS"
 For every one of the qualified objects which are discovered in the source
-files supplied to \fBctags\fP, a separate line is added to the tag file, each
+files supplied to \fBexctags\fP, a separate line is added to the tag file, each
 looking like this in the most general case:
 
 .PP
@@ -1116,9 +1114,9 @@
 it resolve coding dilemmas caused by preprocessor conditionals.
 
 .PP
-In general, \fBctags\fP tries to be smart about conditional preprocessor
+In general, \fBexctags\fP tries to be smart about conditional preprocessor
 directives. If a preprocessor conditional is encountered within a statement
-which defines a tag, \fBctags\fP follows only the first branch of that
+which defines a tag, \fBexctags\fP follows only the first branch of that
 conditional (except in the special case of "#if 0", in which case it follows
 only the last branch). The reason for this is that failing to pursue only one
 branch can result in ambiguous syntax, as in the following example:
@@ -1143,19 +1141,19 @@
 .RE
 
 .PP
-Both branches cannot be followed, or braces become unbalanced and \fBctags\fP
+Both branches cannot be followed, or braces become unbalanced and \fBexctags\fP
 would be unable to make sense of the syntax.
 
 .PP
 If the application of this heuristic fails to properly parse a file,
 generally due to complicated and inconsistent pairing within the conditionals,
-\fBctags\fP will retry the file using a different heuristic which does not
+\fBexctags\fP will retry the file using a different heuristic which does not
 selectively follow conditional preprocessor branches, but instead falls back
 to relying upon a closing brace ("}") in column 1 as indicating the end of a
 block once any brace imbalance results from following a #if conditional branch.
 
 .PP
-\fBCtags\fP will also try to specially handle arguments lists enclosed in
+\fBexctags\fP will also try to specially handle arguments lists enclosed in
 double sets of parentheses in order to accept the following conditional
 construct:
 
@@ -1182,7 +1180,7 @@
 Note that the path recorded for filenames in the tag file and utilized by
 the editor to search for tags are identical to the paths specified for
 \fIfile(s)\fP on the command line. This means the if you want the paths for
-files to be relative to some directory, you must invoke \fBctags\fP with the
+files to be relative to some directory, you must invoke \fBexctags\fP with the
 same pathnames for \fIfile(s)\fP (this can be overridden with \fB-p\fP).
 
 
@@ -1258,7 +1256,7 @@
 .TP 8
 .B CTAGS
 If this enviroment variable exists, it will be expected to contain a set of
-default options which are read when \fBctags\fP starts, after the
+default options which are read when \fBexctags\fP starts, after the
 configuration files listed in \fBFILES\fP, below, are read, but before any
 command line options are read. Options appearing on the command line will
 override options specified in this file. Only options will be read from this
@@ -1267,7 +1265,8 @@
 .TP 8
 .B ETAGS
 Similar to the \fBCTAGS\fP variable above, this variable, if found, will be
-read when \fBetags\fP starts. If this variable is not found, \fBetags\fP will
+read when \fBexctags\fP  is run with the \fI-e\fP option.
+If this variable is not found, \fBexctags\fP will
 try to use \fBCTAGS\fP instead.
 
 .TP 8
@@ -1276,12 +1275,12 @@
 specifies the directory in which to place temporary files. This can be useful
 if the size of a temporary file becomes too large to fit on the partition
 holding the default temporary directory defined at compilation time.
-\fBctags\fP creates temporary files only if either (1) an emacs-style tag file
+\fBexctags\fP creates temporary files only if either (1) an emacs-style tag file
 is being generated, (2) the tag file is being sent to standard output, or (3)
 the program was compiled to use an internal sort algorithm to sort the tag
 files instead of the the sort utility of the operating system. If the sort
 utility of the operating system is being used, it will generally observe this
-variable also. Note that if \fBctags\fP is setuid, the value of TMPDIR will be
+variable also. Note that if \fBexctags\fP is setuid, the value of TMPDIR will be
 ignored.
 
 .SH "HOW TO USE WITH VI"
@@ -1325,20 +1324,20 @@
 
 
 .SH "BUGS (CAVEATS)"
-\fBCtags\fP has as many options as \fBls\fP(1).
+\fBexctags\fP has as many options as \fBls\fP(1).
 
 .PP
-Because \fBctags\fP is neither a preprocessor nor a compiler, use of
-preprocessor macros can fool \fBctags\fP into either missing tags or
-improperly generating inappropriate tags. Although \fBctags\fP has been
+Because \fBexctags\fP is neither a preprocessor nor a compiler, use of
+preprocessor macros can fool \fBexctags\fP into either missing tags or
+improperly generating inappropriate tags. Although \fBexctags\fP has been
 designed to handle certain common cases, this is the single biggest cause of
 reported problems. In particular, the use of preprocessor constructs which
-alter the textual syntax of C can fool \fBctags\fP. You can work around many
+alter the textual syntax of C can fool \fBexctags\fP. You can work around many
 such problems by using the \fB-I\fP option.
 
 .PP
 When parsing a C++ member function definition (e.g. "className::function"),
-\fBctags\fP cannot determine whether the scope specifier is a class name or a
+\fBexctags\fP cannot determine whether the scope specifier is a class name or a
 namespace specifier and always lists it as a class name in the scope portion
 of the extension flags.
 
@@ -1356,7 +1355,7 @@
 use the \fB--lang\fP option.
 
 .PP
-Note that when \fBctags\fP generates uses patterns for locating tags (see
+Note that when \fBexctags\fP generates uses patterns for locating tags (see
 the \fB--excmd\fP option), it is entirely possible that the wrong line may be
 found by your editor if there exists another source line which is identical to
 the line containing the tag. The following example demonstrates this condition:
@@ -1411,10 +1410,11 @@
 
 .TP 10
 .I tags
-The default tag file created by \fBctags\fP.
+The default tag file created by \fBexctags\fP.
 .TP 10
 .I TAGS
-The default tag file created by \fBetags\fP.
+The default tag file created by \fBexctags\fP run with \fI-e\fP.
+option.
 
 .SH "SEE ALSO"
 The official Exuberant Ctags web site at:
@@ -1426,7 +1426,7 @@
 
 .PP
 Also \fBex\fP(1), \fBvi\fP(1), \fBelvis\fP, or, better yet, \fBvim\fP, the
-official editor of \fBctags\fP. For more information on \fBvim\fP, see the VIM
+official editor of \fBexctags\fP. For more information on \fBvim\fP, see the VIM
 Pages web site at:
 
 .PP
