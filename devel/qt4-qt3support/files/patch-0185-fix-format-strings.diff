--- src/qt3support/tools/q3gcache.cpp
+++ src/qt3support/tools/q3gcache.cpp
@@ -622,7 +622,7 @@ void Q3GCache::statistics() const
 #if defined(QT_DEBUG)
     QString line;
     line.fill(QLatin1Char('*'), 80);
-    qDebug(line.ascii());
+    qDebug("%s", line.ascii());
     qDebug("CACHE STATISTICS:");
     qDebug("cache contains %d item%s, with a total cost of %d",
 	   count(), count() != 1 ? "s" : "", tCost);
@@ -643,7 +643,7 @@ void Q3GCache::statistics() const
 	   lruList->dumps != 1 ? "have" : "has", lruList->dumpCosts);
     qDebug("Statistics from internal dictionary class:");
     dict->statistics();
-    qDebug(line.ascii());
+    qDebug("%s", line.ascii());
 #endif
 }
 
--- src/qt3support/tools/q3gdict.cpp
+++ src/qt3support/tools/q3gdict.cpp
@@ -828,11 +828,11 @@ void Q3GDict::statistics() const
     QString line;
     line.fill(QLatin1Char('-'), 60);
     double real, ideal;
-    qDebug(line.ascii());
+    qDebug("%s", line.ascii());
     qDebug("DICTIONARY STATISTICS:");
     if (count() == 0) {
         qDebug("Empty!");
-        qDebug(line.ascii());
+        qDebug("%s", line.ascii());
         return;
     }
     real = 0.0;
@@ -853,7 +853,7 @@ void Q3GDict::statistics() const
         while (b--)
             *pbuf++ = '*';
         *pbuf = '\0';
-        qDebug(buf);
+        qDebug("%s", buf);
         i++;
     }
     qDebug("Array size = %d", size());
@@ -861,7 +861,7 @@ void Q3GDict::statistics() const
     qDebug("Real dist  = %g", real);
     qDebug("Rand dist  = %g", ideal);
     qDebug("Real/Rand  = %g", real/ideal);
-    qDebug(line.ascii());
+    qDebug("%s", line.ascii());
 #endif // QT_DEBUG
 }
 
--- src/qt3support/tools/q3cstring.h
+++ src/qt3support/tools/q3cstring.h
@@ -57,7 +57,11 @@ public:
     }
 
     Q3CString        copy()        const { return *this; }
-    Q3CString    &sprintf(const char *format, ...);
+    Q3CString    &sprintf(const char *format, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 2, 3)))
+#endif
+        ;
 
     Q3CString        left(uint len)  const { return QByteArray::left(len); }
     Q3CString        right(uint len) const { return QByteArray::right(len); }