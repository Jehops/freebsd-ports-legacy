*** subband_layer_1.cc.orig	Thu Jun 23 21:14:36 1994
--- subband_layer_1.cc	Thu Dec  9 05:32:19 1999
***************
*** 86,92 ****
  }
  
  
! bool SubbandLayer1::read_sampledata (Ibitstream *stream)
  {
    if (allocation)
    {
--- 86,92 ----
  }
  
  
! boolean SubbandLayer1::read_sampledata (Ibitstream *stream)
  {
    if (allocation)
    {
***************
*** 105,111 ****
  }
  
  
! bool SubbandLayer1::put_next_sample (e_channels channels,
  				     SynthesisFilter *filter1, SynthesisFilter *)
  {
    if (allocation && channels != right)
--- 105,111 ----
  }
  
  
! boolean SubbandLayer1::put_next_sample (e_channels channels,
  				     SynthesisFilter *filter1, SynthesisFilter *)
  {
    if (allocation && channels != right)
***************
*** 142,148 ****
  }
  
  
! bool SubbandLayer1IntensityStereo::put_next_sample (e_channels channels,
  	SynthesisFilter *filter1, SynthesisFilter *filter2)
  {
    if (allocation)
--- 142,148 ----
  }
  
  
! boolean SubbandLayer1IntensityStereo::put_next_sample (e_channels channels,
  	SynthesisFilter *filter1, SynthesisFilter *filter2)
  {
    if (allocation)
***************
*** 231,239 ****
  }
  
  
! bool SubbandLayer1Stereo::read_sampledata (Ibitstream *stream)
  {
!   bool returnvalue = SubbandLayer1::read_sampledata (stream);
    if (channel2_allocation)
    {
      channel2_sample = real (stream->get_bits (channel2_samplelength));
--- 231,239 ----
  }
  
  
! boolean SubbandLayer1Stereo::read_sampledata (Ibitstream *stream)
  {
!   boolean returnvalue = SubbandLayer1::read_sampledata (stream);
    if (channel2_allocation)
    {
      channel2_sample = real (stream->get_bits (channel2_samplelength));
***************
*** 246,252 ****
  }
  
  
! bool SubbandLayer1Stereo::put_next_sample (e_channels channels,
  					   SynthesisFilter *filter1, SynthesisFilter *filter2)
  {
    SubbandLayer1::put_next_sample (channels, filter1, filter2);
--- 246,252 ----
  }
  
  
! boolean SubbandLayer1Stereo::put_next_sample (e_channels channels,
  					   SynthesisFilter *filter1, SynthesisFilter *filter2)
  {
    SubbandLayer1::put_next_sample (channels, filter1, filter2);
