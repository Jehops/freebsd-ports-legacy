--- SConstruct.orig	Fri Mar 16 22:45:44 2007
+++ SConstruct	Fri Mar 30 17:32:20 2007
@@ -38,7 +38,7 @@
     BoolOption('FPU_OPTIMIZATION', 'Build runtime checked assembler code', 1),
     BoolOption('LIBLO', 'Compile with support for liblo library', 1),
     BoolOption('NLS', 'Set to turn on i18n support', 1),
-    PathOption('PREFIX', 'Set the install "prefix"', '/usr/local'),
+    PathOption('PREFIX', 'Set the install "prefix"', '/usr/local', PathOption.PathIsDirCreate),
     BoolOption('SURFACES', 'Build support for control surfaces', 1),
     BoolOption('SYSLIBS', 'USE AT YOUR OWN RISK: CANCELS ALL SUPPORT FROM ARDOUR AUTHORS: Use existing system versions of various libraries instead of internal ones', 0),
     BoolOption('UNIVERSAL', 'Compile as universal binary.  Requires that external libraries are already universal.', 0),
@@ -381,7 +381,7 @@
 # Make sure they know what they are doing
 #
 
-if env['VST']:
+if False:
     sys.stdout.write ("Are you building Ardour for personal use (rather than distribution to others)? [no]: ")
     answer = sys.stdin.readline ()
     answer = answer.rstrip().strip()
@@ -660,13 +660,7 @@
 # prepend boiler plate optimization flags
 #
 
-opt_flags[:0] = [
-    "-O3",
-    "-fomit-frame-pointer",
-    "-ffast-math",
-    "-fstrength-reduce",
-    "-pipe"
-    ]
+opt_flags[:0] = [ "%%CFLAGS%%" ];
 
 if env['DEBUG'] == 1:
     env.Append(CCFLAGS=" ".join (debug_flags))
@@ -752,6 +746,7 @@
 if env['LIBLO']:
     libraries['lo'] = LibraryInfo ()
     prep_libcheck(env, libraries['lo'])
+    libraries['lo'].Append(CCFLAGS="-I/usr/local/include", LINKFLAGS="-L/usr/local/lib")
 
     conf = Configure (libraries['lo'])
     if conf.CheckLib ('lo', 'lo_server_new') == False:
@@ -765,6 +760,7 @@
 
 libraries['dmalloc'] = LibraryInfo ()
 prep_libcheck(env, libraries['dmalloc'])
+libraries['dmalloc'].Append(CCFLAGS="-I/usr/local/include", LINKFLAGS="-L/usr/local/lib")
 
 #
 # look for the threaded version
@@ -796,8 +792,10 @@
     subst_dict['%MIDITAG%'] = "ardour"
     subst_dict['%MIDITYPE%'] = "coremidi"
 else:
-    print "It appears you don't have the required MIDI libraries installed. For Linux this means you are missing the development package for ALSA libraries."
-    sys.exit (1)
+    libraries['sysmidi'] = LibraryInfo ()
+    env['SYSMIDI'] = 'none'
+    subst_dict['%MIDITAG%'] = "none"
+    subst_dict['%MIDITYPE%'] = "none"
 
 env = conf.Finish()
 
@@ -1064,8 +1062,8 @@
     subst_dict['%JACK_INPUT%'] = "coreaudio:Built-in Audio:in"
     subst_dict['%JACK_OUTPUT%'] = "coreaudio:Built-in Audio:out"
 else:
-    subst_dict['%JACK_INPUT%'] = "alsa_pcm:playback_"
-    subst_dict['%JACK_OUTPUT%'] = "alsa_pcm:capture_"
+    subst_dict['%JACK_INPUT%'] = "oss:playback_"
+    subst_dict['%JACK_OUTPUT%'] = "oss:capture_"
 
 # posix_memalign available
 if not conf.CheckFunc('posix_memalign'):
