--- SConstruct.orig
+++ SConstruct
@@ -784,10 +784,7 @@ if env['FPU_OPTIMIZATION']:
 # handle x86/x86_64 libdir properly
 
 if env['DIST_LIBDIR'] == '':
-    if env['DIST_TARGET'] == 'x86_64':
-        env['LIBDIR']='lib64'
-    else:
-        env['LIBDIR']='lib'
+    env['LIBDIR']='lib'
 else:
     env['LIBDIR'] = env['DIST_LIBDIR']
 
@@ -838,13 +835,7 @@ if env['ARCH'] != '':
 # prepend boiler plate optimization flags
 #
 
-opt_flags[:0] = [
-    "-O3",
-    "-fomit-frame-pointer",
-    "-ffast-math",
-    "-fstrength-reduce",
-    "-pipe"
-    ]
+opt_flags[:0] = [ "%%CFLAGS%%" ];
 
 if env['DEBUG'] == 1:
     env.Append(CCFLAGS=" ".join (debug_flags))
@@ -954,6 +945,7 @@ conf.Finish()
 
 libraries['usb'] = LibraryInfo ()
 prep_libcheck(env, libraries['usb'])
+libraries['usb'].Append(CCFLAGS="-I/usr/local/include", LINKFLAGS="-L/usr/local/lib")
 
 conf = Configure (libraries['usb'])
 if conf.CheckLib ('usb', 'usb_interrupt_write'):
@@ -1005,6 +997,7 @@ libraries['boost'] = conf.Finish ()
 
 libraries['dmalloc'] = LibraryInfo ()
 prep_libcheck(env, libraries['dmalloc'])
+libraries['dmalloc'].Append(CCFLAGS="-I/usr/local/include", LINKFLAGS="-L/usr/local/lib")
 
 #
 # look for the threaded version
@@ -1062,8 +1055,10 @@ elif conf.CheckCHeader('/System/Library/
     subst_dict['%MIDITAG%'] = "ardour"
     subst_dict['%MIDITYPE%'] = "coremidi"
 else:
-    print "It appears you don't have the required MIDI libraries installed. For Linux this means you are missing the development package for ALSA libraries."
-    sys.exit (1)
+    libraries['sysmidi'] = LibraryInfo ()
+    env['SYSMIDI'] = 'none'
+    subst_dict['%MIDITAG%'] = "none"
+    subst_dict['%MIDITYPE%'] = "none"
 
 pname = env['PROGRAM_NAME']
 subst_dict['%MIDI_DEVICE_NAME%'] = pname.lower()
@@ -1349,8 +1344,8 @@ if conf.CheckCHeader('/System/Library/Fr
     subst_dict['%JACK_INPUT%'] = "coreaudio:Built-in Audio:in"
     subst_dict['%JACK_OUTPUT%'] = "coreaudio:Built-in Audio:out"
 else:
-    subst_dict['%JACK_INPUT%'] = "alsa_pcm:playback_"
-    subst_dict['%JACK_OUTPUT%'] = "alsa_pcm:capture_"
+    subst_dict['%JACK_INPUT%'] = "oss:playback_"
+    subst_dict['%JACK_OUTPUT%'] = "oss:capture_"
 
 # posix_memalign available
 if not conf.CheckFunc('posix_memalign'):
